--
-- PostgreSQL database dump
--

-- Dumped from database version 9.1.14
-- Dumped by pg_dump version 9.4.0
-- Started on 2019-11-20 11:39:28

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 401 (class 3079 OID 12240)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 4703 (class 0 OID 0)
-- Dependencies: 401
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 402 (class 3079 OID 190184)
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA public;


--
-- TOC entry 4704 (class 0 OID 0)
-- Dependencies: 402
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


SET search_path = public, pg_catalog;

--
-- TOC entry 1567 (class 0 OID 0)
-- Name: box2d; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box2d;


--
-- TOC entry 479 (class 1255 OID 16470)
-- Name: box2d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d_in(cstring) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_in';


ALTER FUNCTION public.box2d_in(cstring) OWNER TO postgres;

--
-- TOC entry 480 (class 1255 OID 16471)
-- Name: box2d_out(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d_out(box2d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_out';


ALTER FUNCTION public.box2d_out(box2d) OWNER TO postgres;

--
-- TOC entry 1566 (class 1247 OID 16447)
-- Name: box2d; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box2d (
    INTERNALLENGTH = 16,
    INPUT = box2d_in,
    OUTPUT = box2d_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE box2d OWNER TO postgres;

--
-- TOC entry 4705 (class 0 OID 0)
-- Dependencies: 1566
-- Name: TYPE box2d; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box2d IS 'postgis type: A box composed of x min, ymin, xmax, ymax. Often used to return the 2d enclosing box of a geometry.';


--
-- TOC entry 1555 (class 0 OID 0)
-- Name: box3d; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d;


--
-- TOC entry 454 (class 1255 OID 16439)
-- Name: box3d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_in(cstring) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.box3d_in(cstring) OWNER TO postgres;

--
-- TOC entry 455 (class 1255 OID 16440)
-- Name: box3d_out(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_out(box3d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_out';


ALTER FUNCTION public.box3d_out(box3d) OWNER TO postgres;

--
-- TOC entry 1554 (class 1247 OID 16436)
-- Name: box3d; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d (
    INTERNALLENGTH = 48,
    INPUT = box3d_in,
    OUTPUT = box3d_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE box3d OWNER TO postgres;

--
-- TOC entry 4707 (class 0 OID 0)
-- Dependencies: 1554
-- Name: TYPE box3d; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box3d IS 'postgis type: A box composed of x min, ymin, zmin, xmax, ymax, zmax. Often used to return the 3d extent of a geometry or collection of geometries.';


--
-- TOC entry 1559 (class 0 OID 0)
-- Name: box3d_extent; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d_extent;


--
-- TOC entry 456 (class 1255 OID 16443)
-- Name: box3d_extent_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent_in(cstring) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.box3d_extent_in(cstring) OWNER TO postgres;

--
-- TOC entry 457 (class 1255 OID 16444)
-- Name: box3d_extent_out(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent_out(box3d_extent) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_extent_out';


ALTER FUNCTION public.box3d_extent_out(box3d_extent) OWNER TO postgres;

--
-- TOC entry 1558 (class 1247 OID 16442)
-- Name: box3d_extent; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d_extent (
    INTERNALLENGTH = 48,
    INPUT = box3d_extent_in,
    OUTPUT = box3d_extent_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE box3d_extent OWNER TO postgres;

--
-- TOC entry 4709 (class 0 OID 0)
-- Dependencies: 1558
-- Name: TYPE box3d_extent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box3d_extent IS 'postgis type: A box composed of x min, ymin, zmin, xmax, ymax, zmax. Often used to return the extent of a geometry.';


--
-- TOC entry 1563 (class 0 OID 0)
-- Name: chip; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE chip;


--
-- TOC entry 473 (class 1255 OID 16463)
-- Name: chip_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION chip_in(cstring) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_in';


ALTER FUNCTION public.chip_in(cstring) OWNER TO postgres;

--
-- TOC entry 474 (class 1255 OID 16464)
-- Name: chip_out(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION chip_out(chip) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_out';


ALTER FUNCTION public.chip_out(chip) OWNER TO postgres;

--
-- TOC entry 1562 (class 1247 OID 16462)
-- Name: chip; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE chip (
    INTERNALLENGTH = variable,
    INPUT = chip_in,
    OUTPUT = chip_out,
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE chip OWNER TO postgres;

--
-- TOC entry 1582 (class 0 OID 0)
-- Name: geography; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geography;


--
-- TOC entry 1103 (class 1255 OID 17197)
-- Name: geography_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_analyze';


ALTER FUNCTION public.geography_analyze(internal) OWNER TO postgres;

--
-- TOC entry 1101 (class 1255 OID 17195)
-- Name: geography_in(cstring, oid, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_in(cstring, oid, integer) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_in';


ALTER FUNCTION public.geography_in(cstring, oid, integer) OWNER TO postgres;

--
-- TOC entry 1102 (class 1255 OID 17196)
-- Name: geography_out(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_out(geography) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_out';


ALTER FUNCTION public.geography_out(geography) OWNER TO postgres;

--
-- TOC entry 1099 (class 1255 OID 17192)
-- Name: geography_typmod_in(cstring[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_in(cstring[]) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_typmod_in';


ALTER FUNCTION public.geography_typmod_in(cstring[]) OWNER TO postgres;

--
-- TOC entry 1100 (class 1255 OID 17193)
-- Name: geography_typmod_out(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_out(integer) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_typmod_out';


ALTER FUNCTION public.geography_typmod_out(integer) OWNER TO postgres;

--
-- TOC entry 1581 (class 1247 OID 17194)
-- Name: geography; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geography (
    INTERNALLENGTH = variable,
    INPUT = geography_in,
    OUTPUT = geography_out,
    TYPMOD_IN = geography_typmod_in,
    TYPMOD_OUT = geography_typmod_out,
    ANALYZE = geography_analyze,
    ALIGNMENT = double,
    STORAGE = main
);


ALTER TYPE geography OWNER TO postgres;

--
-- TOC entry 4712 (class 0 OID 0)
-- Dependencies: 1581
-- Name: TYPE geography; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geography IS 'postgis type: Ellipsoidal spatial data type.';


--
-- TOC entry 1551 (class 0 OID 0)
-- Name: geometry; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry;


--
-- TOC entry 425 (class 1255 OID 16408)
-- Name: geometry_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_analyze';


ALTER FUNCTION public.geometry_analyze(internal) OWNER TO postgres;

--
-- TOC entry 423 (class 1255 OID 16406)
-- Name: geometry_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_in(cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_in';


ALTER FUNCTION public.geometry_in(cstring) OWNER TO postgres;

--
-- TOC entry 424 (class 1255 OID 16407)
-- Name: geometry_out(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_out(geometry) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_out';


ALTER FUNCTION public.geometry_out(geometry) OWNER TO postgres;

--
-- TOC entry 426 (class 1255 OID 16409)
-- Name: geometry_recv(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_recv(internal) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_recv';


ALTER FUNCTION public.geometry_recv(internal) OWNER TO postgres;

--
-- TOC entry 427 (class 1255 OID 16410)
-- Name: geometry_send(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_send(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_send';


ALTER FUNCTION public.geometry_send(geometry) OWNER TO postgres;

--
-- TOC entry 1550 (class 1247 OID 16400)
-- Name: geometry; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry (
    INTERNALLENGTH = variable,
    INPUT = geometry_in,
    OUTPUT = geometry_out,
    RECEIVE = geometry_recv,
    SEND = geometry_send,
    ANALYZE = geometry_analyze,
    DELIMITER = ':',
    ALIGNMENT = int4,
    STORAGE = main
);


ALTER TYPE geometry OWNER TO postgres;

--
-- TOC entry 4714 (class 0 OID 0)
-- Dependencies: 1550
-- Name: TYPE geometry; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geometry IS 'postgis type: Planar spatial data type.';


--
-- TOC entry 1570 (class 1247 OID 16722)
-- Name: geometry_dump; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry_dump AS (
	path integer[],
	geom geometry
);


ALTER TYPE geometry_dump OWNER TO postgres;

--
-- TOC entry 4716 (class 0 OID 0)
-- Dependencies: 1570
-- Name: TYPE geometry_dump; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geometry_dump IS 'postgis type: A spatial datatype with two fields - geom (holding a geometry object) and path[] (a 1-d array holding the position of the geometry within the dumped object.)';


--
-- TOC entry 1586 (class 0 OID 0)
-- Name: gidx; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE gidx;


--
-- TOC entry 1104 (class 1255 OID 17200)
-- Name: gidx_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gidx_in(cstring) RETURNS gidx
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'gidx_in';


ALTER FUNCTION public.gidx_in(cstring) OWNER TO postgres;

--
-- TOC entry 1105 (class 1255 OID 17201)
-- Name: gidx_out(gidx); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gidx_out(gidx) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'gidx_out';


ALTER FUNCTION public.gidx_out(gidx) OWNER TO postgres;

--
-- TOC entry 1585 (class 1247 OID 17199)
-- Name: gidx; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE gidx (
    INTERNALLENGTH = variable,
    INPUT = gidx_in,
    OUTPUT = gidx_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE gidx OWNER TO postgres;

--
-- TOC entry 1578 (class 0 OID 0)
-- Name: pgis_abs; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE pgis_abs;


--
-- TOC entry 818 (class 1255 OID 16901)
-- Name: pgis_abs_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_abs_in(cstring) RETURNS pgis_abs
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_abs_in';


ALTER FUNCTION public.pgis_abs_in(cstring) OWNER TO postgres;

--
-- TOC entry 819 (class 1255 OID 16902)
-- Name: pgis_abs_out(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_abs_out(pgis_abs) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_abs_out';


ALTER FUNCTION public.pgis_abs_out(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1577 (class 1247 OID 16900)
-- Name: pgis_abs; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE pgis_abs (
    INTERNALLENGTH = 8,
    INPUT = pgis_abs_in,
    OUTPUT = pgis_abs_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE pgis_abs OWNER TO postgres;

--
-- TOC entry 1547 (class 0 OID 0)
-- Name: spheroid; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE spheroid;


--
-- TOC entry 416 (class 1255 OID 16397)
-- Name: spheroid_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION spheroid_in(cstring) RETURNS spheroid
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ellipsoid_in';


ALTER FUNCTION public.spheroid_in(cstring) OWNER TO postgres;

--
-- TOC entry 417 (class 1255 OID 16398)
-- Name: spheroid_out(spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION spheroid_out(spheroid) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ellipsoid_out';


ALTER FUNCTION public.spheroid_out(spheroid) OWNER TO postgres;

--
-- TOC entry 1546 (class 1247 OID 16394)
-- Name: spheroid; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE spheroid (
    INTERNALLENGTH = 65,
    INPUT = spheroid_in,
    OUTPUT = spheroid_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE spheroid OWNER TO postgres;

--
-- TOC entry 1153 (class 1255 OID 17282)
-- Name: _st_asgeojson(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgeojson(integer, geography, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_geojson';


ALTER FUNCTION public._st_asgeojson(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 900 (class 1255 OID 16993)
-- Name: _st_asgeojson(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgeojson(integer, geometry, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asGeoJson';


ALTER FUNCTION public._st_asgeojson(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 1139 (class 1255 OID 17268)
-- Name: _st_asgml(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgml(integer, geography, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_gml';


ALTER FUNCTION public._st_asgml(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 883 (class 1255 OID 16976)
-- Name: _st_asgml(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgml(integer, geometry, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asGML';


ALTER FUNCTION public._st_asgml(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 1147 (class 1255 OID 17276)
-- Name: _st_askml(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_askml(integer, geography, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_kml';


ALTER FUNCTION public._st_askml(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 892 (class 1255 OID 16985)
-- Name: _st_askml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_askml(integer, geometry, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asKML';


ALTER FUNCTION public._st_askml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 1185 (class 1255 OID 17314)
-- Name: _st_bestsrid(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_bestsrid(geography) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_BestSRID($1,$1)$_$;


ALTER FUNCTION public._st_bestsrid(geography) OWNER TO postgres;

--
-- TOC entry 1184 (class 1255 OID 17313)
-- Name: _st_bestsrid(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_bestsrid(geography, geography) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_bestsrid';


ALTER FUNCTION public._st_bestsrid(geography, geography) OWNER TO postgres;

--
-- TOC entry 792 (class 1255 OID 16870)
-- Name: _st_buffer(geometry, double precision, cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_buffer(geometry, double precision, cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'buffer';


ALTER FUNCTION public._st_buffer(geometry, double precision, cstring) OWNER TO postgres;

--
-- TOC entry 850 (class 1255 OID 16943)
-- Name: _st_contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_contains(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'contains';


ALTER FUNCTION public._st_contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 856 (class 1255 OID 16949)
-- Name: _st_containsproperly(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_containsproperly(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'containsproperly';


ALTER FUNCTION public._st_containsproperly(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 852 (class 1255 OID 16945)
-- Name: _st_coveredby(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_coveredby(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'coveredby';


ALTER FUNCTION public._st_coveredby(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1177 (class 1255 OID 17306)
-- Name: _st_covers(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_covers(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_covers';


ALTER FUNCTION public._st_covers(geography, geography) OWNER TO postgres;

--
-- TOC entry 854 (class 1255 OID 16947)
-- Name: _st_covers(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_covers(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'covers';


ALTER FUNCTION public._st_covers(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 844 (class 1255 OID 16937)
-- Name: _st_crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_crosses(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'crosses';


ALTER FUNCTION public._st_crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1067 (class 1255 OID 17159)
-- Name: _st_dfullywithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dfullywithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dfullywithin';


ALTER FUNCTION public._st_dfullywithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1161 (class 1255 OID 17290)
-- Name: _st_distance(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_distance(geography, geography, double precision, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_distance';


ALTER FUNCTION public._st_distance(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 686 (class 1255 OID 16727)
-- Name: _st_dumppoints(geometry, integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) RETURNS SETOF geometry_dump
    LANGUAGE plpgsql
    AS $$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);

  -- Special case (MULTI* OR GEOMETRYCOLLECTION) : iterate and return the DumpPoints of the geometries
  SELECT ST_NumGeometries(the_geom) INTO nb_geom;

  IF (nb_geom IS NOT NULL) THEN
    
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP

      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;

    RETURN;
  END IF;
  

  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;

    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN

    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;

    RETURN NEXT tmp;
    RETURN;

  END IF;


  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING or CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;

  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;

  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$$;


ALTER FUNCTION public._st_dumppoints(the_geom geometry, cur_path integer[]) OWNER TO postgres;

--
-- TOC entry 838 (class 1255 OID 16931)
-- Name: _st_dwithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dwithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dwithin';


ALTER FUNCTION public._st_dwithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1162 (class 1255 OID 17291)
-- Name: _st_dwithin(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dwithin(geography, geography, double precision, boolean) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_dwithin';


ALTER FUNCTION public._st_dwithin(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 872 (class 1255 OID 16965)
-- Name: _st_equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_equals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geomequals';


ALTER FUNCTION public._st_equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1166 (class 1255 OID 17295)
-- Name: _st_expand(geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_expand(geography, double precision) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_expand';


ALTER FUNCTION public._st_expand(geography, double precision) OWNER TO postgres;

--
-- TOC entry 841 (class 1255 OID 16934)
-- Name: _st_intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_intersects(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'intersects';


ALTER FUNCTION public._st_intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 798 (class 1255 OID 16876)
-- Name: _st_linecrossingdirection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_linecrossingdirection(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_LineCrossingDirection';


ALTER FUNCTION public._st_linecrossingdirection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1065 (class 1255 OID 17157)
-- Name: _st_longestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_longestline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_longestline2d';


ALTER FUNCTION public._st_longestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1061 (class 1255 OID 17153)
-- Name: _st_maxdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_maxdistance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_maxdistance2d_linestring';


ALTER FUNCTION public._st_maxdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1088 (class 1255 OID 17181)
-- Name: _st_orderingequals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_orderingequals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_same';


ALTER FUNCTION public._st_orderingequals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 859 (class 1255 OID 16952)
-- Name: _st_overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_overlaps(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'overlaps';


ALTER FUNCTION public._st_overlaps(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1176 (class 1255 OID 17305)
-- Name: _st_pointoutside(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_pointoutside(geography) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_point_outside';


ALTER FUNCTION public._st_pointoutside(geography) OWNER TO postgres;

--
-- TOC entry 836 (class 1255 OID 16929)
-- Name: _st_touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_touches(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'touches';


ALTER FUNCTION public._st_touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 847 (class 1255 OID 16940)
-- Name: _st_within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_within(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'within';


ALTER FUNCTION public._st_within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1215 (class 1255 OID 199266)
-- Name: actualizat(); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION actualizat() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
 resultado_txt TEXT DEFAULT 'Nada que actualizar';
 registro_old int;
 registro_new int; 
BEGIN
     select count(identifica_p) from terreno into registro_old;
     INSERT INTO public.terreno(
            id_p, cedula_ppal_p, id_catastro_p, codigonal_p, codigounico_p, 
            identifica_p, id_proyecto_p, clase_inmueble_p, id_cb_fk, id_tb_fk, 
            id_tu_fk, direccion_p, direccioncatastro_p, zona_p, id_barrio, 
            pais_p, ciudad_p, lind_norte_p, lind_sur_p, lind_este_p, lind_oeste_p, 
            lind_adic_p, matricula_ppal_p, mat_inmob_p, id_madq_fk, nombre_areacedida_p, 
            nit_cede_fk, derecho_p, afecta_pot_p, asegurado_p, suscep_vta_p, 
            id_depen_fk, nombrecomun_p, area_cesion_p, area_actual_p, area_sicat_p, 
            area_terreno_p, fecha_estudio_titulo_p, num_activofijo_p, codigo_zhg_p, 
            cuenta_terreno_p, propietario_antes_p, actualiza_sap, impto_predial_p, 
            id_shp_p, fecha_levantamiento_p, id_estado_fk, fecha_creacion_p, 
            fecha_modifica_p, migracion_siga, id_capa, mensaje_p, doc_calidad_bien, 
            fecha_expedicion_cb_p, orfeo_cb_p, documento_p, foto_p, ubica_archivo_p)

    SELECT 
	   id_p,
	   cedula_ppal_p,
	   id_catastro_p,
	   codigonal_p,
	   codigounico_p,
	   identifica_p, id_proyecto_p, clase_inmueble_p, id_cb_fk, id_tb_fk,
	   id_tu_fk, direccion_p, direccioncatastro_p, zona_p, id_barrio,
	   pais_p, ciudad_p, lind_norte_p, lind_sur_p, lind_este_p, lind_oeste_p,
	   lind_adic_p, matricula_ppal_p, mat_inmob_p, id_madq_fk, nombre_areacedida_p,
	   nit_cede_fk, derecho_p, afecta_pot_p, asegurado_p, suscep_vta_p, 
	   id_depen_fk, nombrecomun_p, area_cesion_p, area_actual_p, area_sicat_p, 
	   area_terreno_p, fecha_estudio_titulo_p, num_activofijo_p, codigo_zhg_p, 
	   cuenta_terreno_p, propietario_antes_p, actualiza_sap, impto_predial_p, 
	   id_shp_p, fecha_levantamiento_p, id_estado_fk, fecha_creacion_p, 
	   fecha_modifica_p, migracion_siga, id_capa, mensaje_p, doc_calidad_bien, 
	   fecha_expedicion_cb_p, orfeo_cb_p, documento_p, foto_p, ubica_archivo_p 


FROM prediomunicipio p WHERE
    NOT EXISTS (SELECT identifica_p FROM terreno t WHERE p.identifica_p = t.identifica_p);
    select count(identifica_p) from terreno into registro_new;
    IF registro_new > registro_old THEN
    resultado_txt :=  'Se actualizo correctamente';
     END IF;
   RETURN resultado_txt;
 
END;
$$;


ALTER FUNCTION public.actualizat() OWNER TO sistemas;

--
-- TOC entry 1078 (class 1255 OID 17170)
-- Name: addauth(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addauth(text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$_$;


ALTER FUNCTION public.addauth(text) OWNER TO postgres;

--
-- TOC entry 4721 (class 0 OID 0)
-- Dependencies: 1078
-- Name: FUNCTION addauth(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addauth(text) IS 'args: auth_token - Add an authorization token to be used in current transaction.';


--
-- TOC entry 531 (class 1255 OID 16569)
-- Name: addbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addBBOX';


ALTER FUNCTION public.addbbox(geometry) OWNER TO postgres;

--
-- TOC entry 711 (class 1255 OID 16771)
-- Name: addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 4722 (class 0 OID 0)
-- Dependencies: 711
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer) IS 'args: table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 710 (class 1255 OID 16770)
-- Name: addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 4723 (class 0 OID 0)
-- Dependencies: 710
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) IS 'args: schema_name, table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 709 (class 1255 OID 16769)
-- Name: addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;

BEGIN

	-- Verify geometry type
	IF ( NOT ( (new_type = 'GEOMETRY') OR
			   (new_type = 'GEOMETRYCOLLECTION') OR
			   (new_type = 'POINT') OR
			   (new_type = 'MULTIPOINT') OR
			   (new_type = 'POLYGON') OR
			   (new_type = 'MULTIPOLYGON') OR
			   (new_type = 'LINESTRING') OR
			   (new_type = 'MULTILINESTRING') OR
			   (new_type = 'GEOMETRYCOLLECTIONM') OR
			   (new_type = 'POINTM') OR
			   (new_type = 'MULTIPOINTM') OR
			   (new_type = 'POLYGONM') OR
			   (new_type = 'MULTIPOLYGONM') OR
			   (new_type = 'LINESTRINGM') OR
			   (new_type = 'MULTILINESTRINGM') OR
			   (new_type = 'CIRCULARSTRING') OR
			   (new_type = 'CIRCULARSTRINGM') OR
			   (new_type = 'COMPOUNDCURVE') OR
			   (new_type = 'COMPOUNDCURVEM') OR
			   (new_type = 'CURVEPOLYGON') OR
			   (new_type = 'CURVEPOLYGONM') OR
			   (new_type = 'MULTICURVE') OR
			   (new_type = 'MULTICURVEM') OR
			   (new_type = 'MULTISURFACE') OR
			   (new_type = 'MULTISURFACEM')) )
	THEN
		RAISE EXCEPTION 'Invalid type name - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM,
	or GEOMETRYCOLLECTIONM';
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumns() - invalid SRID';
			RETURN 'fail';
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD COLUMN ' || quote_ident(column_name) ||
		' geometry ';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Delete stale record in geometry_columns (if any)
	sql := 'DELETE FROM geometry_columns WHERE
		f_table_catalog = ' || quote_literal('') ||
		' AND f_table_schema = ' ||
		quote_literal(real_schema) ||
		' AND f_table_name = ' || quote_literal(table_name) ||
		' AND f_geometry_column = ' || quote_literal(column_name);
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add record in geometry_columns
	sql := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema,f_table_name,' ||
										  'f_geometry_column,coord_dimension,srid,type)' ||
		' VALUES (' ||
		quote_literal('') || ',' ||
		quote_literal(real_schema) || ',' ||
		quote_literal(table_name) || ',' ||
		quote_literal(column_name) || ',' ||
		new_dim::text || ',' ||
		new_srid::text || ',' ||
		quote_literal(new_type) || ')';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add table CHECKs
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_srid_' || column_name)
		|| ' CHECK (ST_SRID(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_dims_' || column_name)
		|| ' CHECK (ST_NDims(' || quote_ident(column_name) ||
		') = ' || new_dim::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	IF ( NOT (new_type = 'GEOMETRY')) THEN
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
			quote_ident('enforce_geotype_' || column_name) ||
			' CHECK (GeometryType(' ||
			quote_ident(column_name) || ')=' ||
			quote_literal(new_type) || ' OR (' ||
			quote_ident(column_name) || ') is null)';
		RAISE DEBUG '%', sql;
		EXECUTE sql;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 4724 (class 0 OID 0)
-- Dependencies: 709
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) IS 'args: catalog_name, schema_name, table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 662 (class 1255 OID 16700)
-- Name: addpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.addpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 664 (class 1255 OID 16702)
-- Name: addpoint(geometry, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addpoint(geometry, geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.addpoint(geometry, geometry, integer) OWNER TO postgres;

--
-- TOC entry 430 (class 1255 OID 16414)
-- Name: affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$_$;


ALTER FUNCTION public.affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 428 (class 1255 OID 16412)
-- Name: affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_affine';


ALTER FUNCTION public.affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 583 (class 1255 OID 16621)
-- Name: area(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION area(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.area(geometry) OWNER TO postgres;

--
-- TOC entry 581 (class 1255 OID 16619)
-- Name: area2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION area2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.area2d(geometry) OWNER TO postgres;

--
-- TOC entry 949 (class 1255 OID 17042)
-- Name: asbinary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asbinary(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.asbinary(geometry) OWNER TO postgres;

--
-- TOC entry 951 (class 1255 OID 17044)
-- Name: asbinary(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asbinary(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.asbinary(geometry, text) OWNER TO postgres;

--
-- TOC entry 630 (class 1255 OID 16668)
-- Name: asewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkb(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.asewkb(geometry) OWNER TO postgres;

--
-- TOC entry 636 (class 1255 OID 16674)
-- Name: asewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkb(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.asewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 628 (class 1255 OID 16666)
-- Name: asewkt(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkt(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asEWKT';


ALTER FUNCTION public.asewkt(geometry) OWNER TO postgres;

--
-- TOC entry 886 (class 1255 OID 16979)
-- Name: asgml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asgml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0)$_$;


ALTER FUNCTION public.asgml(geometry) OWNER TO postgres;

--
-- TOC entry 884 (class 1255 OID 16977)
-- Name: asgml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asgml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0)$_$;


ALTER FUNCTION public.asgml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 632 (class 1255 OID 16670)
-- Name: ashexewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ashexewkb(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.ashexewkb(geometry) OWNER TO postgres;

--
-- TOC entry 634 (class 1255 OID 16672)
-- Name: ashexewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ashexewkb(geometry, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.ashexewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 895 (class 1255 OID 16988)
-- Name: askml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, transform($1,4326), 15)$_$;


ALTER FUNCTION public.askml(geometry) OWNER TO postgres;

--
-- TOC entry 893 (class 1255 OID 16986)
-- Name: askml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, transform($1,4326), $2)$_$;


ALTER FUNCTION public.askml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 896 (class 1255 OID 16989)
-- Name: askml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, transform($2,4326), $3)$_$;


ALTER FUNCTION public.askml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 881 (class 1255 OID 16974)
-- Name: assvg(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION assvg(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.assvg(geometry) OWNER TO postgres;

--
-- TOC entry 879 (class 1255 OID 16972)
-- Name: assvg(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION assvg(geometry, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.assvg(geometry, integer) OWNER TO postgres;

--
-- TOC entry 877 (class 1255 OID 16970)
-- Name: assvg(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION assvg(geometry, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.assvg(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 953 (class 1255 OID 17046)
-- Name: astext(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION astext(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asText';


ALTER FUNCTION public.astext(geometry) OWNER TO postgres;

--
-- TOC entry 593 (class 1255 OID 16631)
-- Name: azimuth(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION azimuth(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_azimuth';


ALTER FUNCTION public.azimuth(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1071 (class 1255 OID 17163)
-- Name: bdmpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bdmpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(BuildArea(mline));

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.bdmpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1069 (class 1255 OID 17161)
-- Name: bdpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bdpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.bdpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 807 (class 1255 OID 16885)
-- Name: boundary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boundary(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'boundary';


ALTER FUNCTION public.boundary(geometry) OWNER TO postgres;

--
-- TOC entry 757 (class 1255 OID 16818)
-- Name: box(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box(box3d) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX';


ALTER FUNCTION public.box(box3d) OWNER TO postgres;

--
-- TOC entry 754 (class 1255 OID 16815)
-- Name: box(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box(geometry) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX';


ALTER FUNCTION public.box(geometry) OWNER TO postgres;

--
-- TOC entry 755 (class 1255 OID 16816)
-- Name: box2d(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(box3d) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(box3d) OWNER TO postgres;

--
-- TOC entry 459 (class 1255 OID 16448)
-- Name: box2d(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(box3d_extent) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(box3d_extent) OWNER TO postgres;

--
-- TOC entry 752 (class 1255 OID 16813)
-- Name: box2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(geometry) OWNER TO postgres;

--
-- TOC entry 4725 (class 0 OID 0)
-- Dependencies: 752
-- Name: FUNCTION box2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION box2d(geometry) IS 'args: geomA - Returns a BOX2D representing the maximum extents of the geometry.';


--
-- TOC entry 756 (class 1255 OID 16817)
-- Name: box3d(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d(box2d) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_to_BOX3D';


ALTER FUNCTION public.box3d(box2d) OWNER TO postgres;

--
-- TOC entry 753 (class 1255 OID 16814)
-- Name: box3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d(geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX3D';


ALTER FUNCTION public.box3d(geometry) OWNER TO postgres;

--
-- TOC entry 4726 (class 0 OID 0)
-- Dependencies: 753
-- Name: FUNCTION box3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION box3d(geometry) IS 'args: geomA - Returns a BOX3D representing the maximum extents of the geometry.';


--
-- TOC entry 458 (class 1255 OID 16446)
-- Name: box3d_extent(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent(box3d_extent) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_extent_to_BOX3D';


ALTER FUNCTION public.box3d_extent(box3d_extent) OWNER TO postgres;

--
-- TOC entry 759 (class 1255 OID 16820)
-- Name: box3dtobox(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3dtobox(box3d) RETURNS box
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT box($1)$_$;


ALTER FUNCTION public.box3dtobox(box3d) OWNER TO postgres;

--
-- TOC entry 790 (class 1255 OID 16868)
-- Name: buffer(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buffer(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'buffer';


ALTER FUNCTION public.buffer(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 795 (class 1255 OID 16873)
-- Name: buffer(geometry, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buffer(geometry, double precision, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_Buffer($1, $2, $3)$_$;


ALTER FUNCTION public.buffer(geometry, double precision, integer) OWNER TO postgres;

--
-- TOC entry 675 (class 1255 OID 16713)
-- Name: buildarea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buildarea(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_buildarea';


ALTER FUNCTION public.buildarea(geometry) OWNER TO postgres;

--
-- TOC entry 1209 (class 1255 OID 190549)
-- Name: busqueda_terreno_folio(character varying); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION busqueda_terreno_folio(folio character varying) RETURNS SETOF record
    LANGUAGE sql
    AS $_$
SELECT * from prediomunicipio
WHERE  mat_inmob_p =($1);
$_$;


ALTER FUNCTION public.busqueda_terreno_folio(folio character varying) OWNER TO sistemas;

--
-- TOC entry 765 (class 1255 OID 16826)
-- Name: bytea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bytea(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_bytea';


ALTER FUNCTION public.bytea(geometry) OWNER TO postgres;

--
-- TOC entry 863 (class 1255 OID 16956)
-- Name: centroid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION centroid(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'centroid';


ALTER FUNCTION public.centroid(geometry) OWNER TO postgres;

--
-- TOC entry 1033 (class 1255 OID 17172)
-- Name: checkauth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text) RETURNS integer
    LANGUAGE sql
    AS $_$ SELECT CheckAuth('', $1, $2) $_$;


ALTER FUNCTION public.checkauth(text, text) OWNER TO postgres;

--
-- TOC entry 4727 (class 0 OID 0)
-- Dependencies: 1033
-- Name: FUNCTION checkauth(text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION checkauth(text, text) IS 'args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';


--
-- TOC entry 1079 (class 1255 OID 17171)
-- Name: checkauth(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$_$;


ALTER FUNCTION public.checkauth(text, text, text) OWNER TO postgres;

--
-- TOC entry 4728 (class 0 OID 0)
-- Dependencies: 1079
-- Name: FUNCTION checkauth(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION checkauth(text, text, text) IS 'args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';


--
-- TOC entry 1080 (class 1255 OID 17173)
-- Name: checkauthtrigger(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauthtrigger() RETURNS trigger
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'check_authorization';


ALTER FUNCTION public.checkauthtrigger() OWNER TO postgres;

--
-- TOC entry 815 (class 1255 OID 16893)
-- Name: collect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION collect(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_collect';


ALTER FUNCTION public.collect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 688 (class 1255 OID 16729)
-- Name: combine_bbox(box2d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box2d, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_combine';


ALTER FUNCTION public.combine_bbox(box2d, geometry) OWNER TO postgres;

--
-- TOC entry 692 (class 1255 OID 16735)
-- Name: combine_bbox(box3d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box3d, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.combine_bbox(box3d, geometry) OWNER TO postgres;

--
-- TOC entry 690 (class 1255 OID 16731)
-- Name: combine_bbox(box3d_extent, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box3d_extent, geometry) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.combine_bbox(box3d_extent, geometry) OWNER TO postgres;

--
-- TOC entry 1208 (class 1255 OID 190205)
-- Name: comma_cat(text, text); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION comma_cat(text, text) RETURNS text
    LANGUAGE sql
    AS $_$select case
WHEN $2 is null or $2 = '' THEN $1
WHEN $1 is null or $1 = '' THEN $2
ELSE $1 || ',' || $2
END$_$;


ALTER FUNCTION public.comma_cat(text, text) OWNER TO sistemas;

--
-- TOC entry 550 (class 1255 OID 16588)
-- Name: compression(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION compression(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getCompression';


ALTER FUNCTION public.compression(chip) OWNER TO postgres;

--
-- TOC entry 849 (class 1255 OID 16942)
-- Name: contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION contains(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'contains';


ALTER FUNCTION public.contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 796 (class 1255 OID 16874)
-- Name: convexhull(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION convexhull(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'convexhull';


ALTER FUNCTION public.convexhull(geometry) OWNER TO postgres;

--
-- TOC entry 843 (class 1255 OID 16936)
-- Name: crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosses(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'crosses';


ALTER FUNCTION public.crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 548 (class 1255 OID 16586)
-- Name: datatype(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION datatype(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getDatatype';


ALTER FUNCTION public.datatype(chip) OWNER TO postgres;

--
-- TOC entry 805 (class 1255 OID 16883)
-- Name: difference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION difference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'difference';


ALTER FUNCTION public.difference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 915 (class 1255 OID 17008)
-- Name: dimension(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dimension(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dimension';


ALTER FUNCTION public.dimension(geometry) OWNER TO postgres;

--
-- TOC entry 1084 (class 1255 OID 17177)
-- Name: disablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$$;


ALTER FUNCTION public.disablelongtransactions() OWNER TO postgres;

--
-- TOC entry 4729 (class 0 OID 0)
-- Dependencies: 1084
-- Name: FUNCTION disablelongtransactions(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION disablelongtransactions() IS 'Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.';


--
-- TOC entry 833 (class 1255 OID 16926)
-- Name: disjoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disjoint(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'disjoint';


ALTER FUNCTION public.disjoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 589 (class 1255 OID 16627)
-- Name: distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_mindistance2d';


ALTER FUNCTION public.distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 587 (class 1255 OID 16625)
-- Name: distance_sphere(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance_sphere(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_distance_sphere';


ALTER FUNCTION public.distance_sphere(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 585 (class 1255 OID 16623)
-- Name: distance_spheroid(geometry, geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance_spheroid(geometry, geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_distance_ellipsoid';


ALTER FUNCTION public.distance_spheroid(geometry, geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 533 (class 1255 OID 16571)
-- Name: dropbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dropBBOX';


ALTER FUNCTION public.dropbbox(geometry) OWNER TO postgres;

--
-- TOC entry 720 (class 1255 OID 16774)
-- Name: dropgeometrycolumn(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4730 (class 0 OID 0)
-- Dependencies: 720
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying) IS 'args: table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 719 (class 1255 OID 16773)
-- Name: dropgeometrycolumn(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4731 (class 0 OID 0)
-- Dependencies: 719
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying, character varying) IS 'args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 718 (class 1255 OID 16772)
-- Name: dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Remove ref from geometry_columns table
	EXECUTE 'delete from geometry_columns where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4732 (class 0 OID 0)
-- Dependencies: 718
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying) IS 'args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 723 (class 1255 OID 16777)
-- Name: dropgeometrytable(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('','',$1) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying) OWNER TO postgres;

--
-- TOC entry 4733 (class 0 OID 0)
-- Dependencies: 723
-- Name: FUNCTION dropgeometrytable(character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying) IS 'args: table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 722 (class 1255 OID 16776)
-- Name: dropgeometrytable(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('',$1,$2) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4734 (class 0 OID 0)
-- Dependencies: 722
-- Name: FUNCTION dropgeometrytable(character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying, character varying) IS 'args: schema_name, table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 721 (class 1255 OID 16775)
-- Name: dropgeometrytable(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- Remove refs from geometry_columns table
	EXECUTE 'DELETE FROM geometry_columns WHERE ' ||
		'f_table_schema = ' || quote_literal(real_schema) ||
		' AND ' ||
		' f_table_name = ' || quote_literal(table_name);

	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name);

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4735 (class 0 OID 0)
-- Dependencies: 721
-- Name: FUNCTION dropgeometrytable(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying, character varying, character varying) IS 'args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 682 (class 1255 OID 16723)
-- Name: dump(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dump(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dump';


ALTER FUNCTION public.dump(geometry) OWNER TO postgres;

--
-- TOC entry 684 (class 1255 OID 16725)
-- Name: dumprings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dumprings(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dump_rings';


ALTER FUNCTION public.dumprings(geometry) OWNER TO postgres;

--
-- TOC entry 1211 (class 1255 OID 199247)
-- Name: ejemplo(integer); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION ejemplo(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
 numero ALIAS FOR $1;

BEGIN
 RETURN numero * 2;
END;
$_$;


ALTER FUNCTION public.ejemplo(integer) OWNER TO sistemas;

--
-- TOC entry 1212 (class 1255 OID 199258)
-- Name: ejemplo(integer, integer); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION ejemplo(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
 numero1 ALIAS FOR $1;
 numero2 ALIAS FOR $2;

 constante CONSTANT integer := 100;
 resultado integer;

BEGIN
 resultado := (numero1 * numero2) + constante;

 RETURN resultado;
END;
$_$;


ALTER FUNCTION public.ejemplo(integer, integer) OWNER TO sistemas;

--
-- TOC entry 1213 (class 1255 OID 199259)
-- Name: ejemplo_txt(integer, integer); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION ejemplo_txt(integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
 numero1 ALIAS FOR $1;
 numero2 ALIAS FOR $2;

 constante CONSTANT integer := 100;
 resultado INTEGER;

 resultado_txt TEXT DEFAULT 'El resultado es 104'; 

BEGIN
 resultado := (numero1 * numero2) + constante;

 IF resultado <> 104 THEN
    resultado_txt :=  'El resultado NO es 104';
 END IF;

 RETURN resultado_txt;
END;
$_$;


ALTER FUNCTION public.ejemplo_txt(integer, integer) OWNER TO sistemas;

--
-- TOC entry 1082 (class 1255 OID 17175)
-- Name: enablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$$;


ALTER FUNCTION public.enablelongtransactions() OWNER TO postgres;

--
-- TOC entry 4736 (class 0 OID 0)
-- Dependencies: 1082
-- Name: FUNCTION enablelongtransactions(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION enablelongtransactions() IS 'Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.';


--
-- TOC entry 939 (class 1255 OID 17032)
-- Name: endpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION endpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_endpoint_linestring';


ALTER FUNCTION public.endpoint(geometry) OWNER TO postgres;

--
-- TOC entry 616 (class 1255 OID 16654)
-- Name: envelope(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION envelope(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_envelope';


ALTER FUNCTION public.envelope(geometry) OWNER TO postgres;

--
-- TOC entry 871 (class 1255 OID 16964)
-- Name: equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION equals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geomequals';


ALTER FUNCTION public.equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 696 (class 1255 OID 16741)
-- Name: estimated_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION estimated_extent(text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.estimated_extent(text, text) OWNER TO postgres;

--
-- TOC entry 694 (class 1255 OID 16739)
-- Name: estimated_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION estimated_extent(text, text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.estimated_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 612 (class 1255 OID 16650)
-- Name: expand(box2d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(box2d, double precision) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_expand';


ALTER FUNCTION public.expand(box2d, double precision) OWNER TO postgres;

--
-- TOC entry 610 (class 1255 OID 16648)
-- Name: expand(box3d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(box3d, double precision) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_expand';


ALTER FUNCTION public.expand(box3d, double precision) OWNER TO postgres;

--
-- TOC entry 614 (class 1255 OID 16652)
-- Name: expand(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_expand';


ALTER FUNCTION public.expand(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 917 (class 1255 OID 17010)
-- Name: exteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION exteriorring(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_exteriorring_polygon';


ALTER FUNCTION public.exteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 544 (class 1255 OID 16582)
-- Name: factor(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION factor(chip) RETURNS real
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getFactor';


ALTER FUNCTION public.factor(chip) OWNER TO postgres;

--
-- TOC entry 700 (class 1255 OID 16745)
-- Name: find_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_extent(text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.find_extent(text, text) OWNER TO postgres;

--
-- TOC entry 698 (class 1255 OID 16743)
-- Name: find_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_extent(text, text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.find_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 727 (class 1255 OID 16781)
-- Name: find_srid(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_srid(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$_$;


ALTER FUNCTION public.find_srid(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 4737 (class 0 OID 0)
-- Dependencies: 727
-- Name: FUNCTION find_srid(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION find_srid(character varying, character varying, character varying) IS 'args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(<db/schema>, <table>, <column>) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.';


--
-- TOC entry 705 (class 1255 OID 16764)
-- Name: fix_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fix_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
			WHERE ( f_table_schema is NULL
		OR f_table_schema = ''
			OR f_table_schema NOT IN (
					SELECT nspname::varchar
					FROM pg_namespace nn, pg_class cc, pg_attribute aa
					WHERE cc.relnamespace = nn.oid
					AND cc.relname = f_table_name::name
					AND aa.attrelid = cc.oid
					AND aa.attname = f_geometry_column::name))
			AND f_table_name::name = c.relname
			AND c.oid = a.attrelid
			AND c.relnamespace = n.oid
			AND f_geometry_column::name = a.attname

			AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid(% = %)'
			AND sridcheck.consrc ~ textcat(' = ', srid::text)

			AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype(%) = ''%''::text) OR (% IS NULL))'
			AND typecheck.consrc ~ textcat(' = ''', type::text)

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return 'fixed:'||foundschema::text;

END;
$$;


ALTER FUNCTION public.fix_geometry_columns() OWNER TO postgres;

--
-- TOC entry 1225 (class 1255 OID 210136)
-- Name: fn_campos_tabla(character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_campos_tabla(tabla character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
 bloque text/*varchar(1000)*/='';
 campos record;
 verificacion integer;
BEGIN
   


for campos in (
select COLUMN_NAME  
  FROM 
information_schema.columns
where 
TABLE_name=tabla  
) loop

 /* select   strpos(campos_tabla,cast( campos.COLUMN_NAME as varchar)) into verificacion ;
  RAISE INFO ' campo------------ %',  campos.COLUMN_NAME;   
 RAISE INFO ' validacion------------ %',  verificacion; */   
--if  verificacion > 0 then 
 
bloque=bloque||campos.COLUMN_NAME ||',';
--end if; 



--bloque=bloque||campos.COLUMN_NAME ||',';


 end loop;			

bloque=substring(bloque from 1 for char_length(bloque)-1);

return bloque;

END;
$$;


ALTER FUNCTION public.fn_campos_tabla(tabla character varying) OWNER TO sibica;

--
-- TOC entry 1228 (class 1255 OID 210137)
-- Name: fn_func_generacion_auditoria(integer); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_func_generacion_auditoria(aux_tipo integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    sql_str VARCHAR(9000);
    tablas record;
    cantidad integer;
BEGIN
  

for tablas in (
SELECT tablename FROM pg_tables WHERE schemaname = 'public' and
    tablename in ('user','tabla','campo','rol','modulo','modulo_permiso','modulo_permiso_campo,file,reporte_predio,seguimiento_tarea,seguimiento_tarea_file,tarea_panorama,terreno,tipo_amoblamiento,clasificacion_panorama')
     
) loop


--1 crea todos los trigers
if aux_tipo=1 then 

 
--codigo para crear todos los trigers
sql_str='CREATE TRIGGER  tg_audit_'||tablas.tablename||'
AFTER INSERT OR UPDATE OR DELETE
  ON public.'||tablas.tablename||'
  FOR EACH ROW
  EXECUTE PROCEDURE public.fn_log_auditoria_tablas()';
   execute sql_str;  
  
  
  else
---2 borra los trigers
  
   --codigo para borrar todos los trigers
  SELECT  count(tgname) into cantidad FROM pg_trigger where tgname='tg_audit_'||tablas.tablename;
  if cantidad>0 then 
   sql_str= 'DROP TRIGGER tg_audit_'||tablas.tablename||' ON public.'||tablas.tablename;
  execute sql_str;
  end if;
  
  
 end if;
  

 end loop;	
 
END;
$$;


ALTER FUNCTION public.fn_func_generacion_auditoria(aux_tipo integer) OWNER TO sibica;

--
-- TOC entry 1217 (class 1255 OID 205330)
-- Name: fn_get_campo_permiso_rol_modulo(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_campo_permiso_rol_modulo(p_cod_modulo integer, p_cod_rol integer, p_cod_campo integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	ress INTEGER;
BEGIN
	SELECT
        CASE WHEN count(*) > 0 THEN 1 ELSE 0 END INTO ress                    
    FROM 
        modulo_permiso_campo mpc
        INNER JOIN modulo_permiso mp ON mp.id_mp_pk = mpc.modulo_permiso_fk
    WHERE
    	mp.modulo_mp_fk = p_cod_modulo
        AND mp.rol_mp_fk = p_cod_rol
        AND mpc.campo_fk = p_cod_campo;

	return ress;


  	EXCEPTION
      WHEN OTHERS THEN
      ress := 0;

      return ress;

END;
$$;


ALTER FUNCTION public.fn_get_campo_permiso_rol_modulo(p_cod_modulo integer, p_cod_rol integer, p_cod_campo integer) OWNER TO sibica;

--
-- TOC entry 1233 (class 1255 OID 210139)
-- Name: fn_get_campos_rol_modulo(integer, integer); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_campos_rol_modulo(p_cod_modulo integer, p_cod_rol integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_c TEXT;
sec_insidencia INTEGER;
contar INTEGER;
ress TEXT;
datos RECORD;
BEGIN
	ress := '[ ';
    FOR datos IN (SELECT
					  tb.id_tbl_pk AS cod_tabla,
                      tb.nombre_tbl AS nom_tabla,
                      cp.id_campo AS cod_campo,
                      cp.nombre_campo AS nom_campo,
                      public.fn_get_campo_permiso_rol_modulo(p_cod_modulo, p_cod_rol, cp.id_campo) AS estado                    
                  FROM 
                      tabla tb
                      INNER JOIN campo cp ON tb.id_tbl_pk = cp.tabla_campo_fk
                  ORDER BY tb.id_tbl_pk, cp.id_campo)
    LOOP
    	ress := ress || '{';
    	ress := ress || '"cod_tabla":"' || datos.cod_tabla || '",';
        ress := ress || '"nom_tabla":"' || datos.nom_tabla || '",';
        ress := ress || '"cod_campo":"' || datos.cod_campo || '",';
        ress := ress || '"nom_campo":"' || datos.nom_campo || '",';
        ress := ress || '"estado":"' || datos.estado || '"';
        ress := ress || '},';
                
    END LOOP;
    ress := substr(ress, 0, length(ress));
	ress := ress || ']';

	return ress;


  	EXCEPTION
      WHEN OTHERS THEN
      ress := '[ ]';

      return ress;

END;
$$;


ALTER FUNCTION public.fn_get_campos_rol_modulo(p_cod_modulo integer, p_cod_rol integer) OWNER TO sibica;

--
-- TOC entry 1229 (class 1255 OID 210173)
-- Name: fn_get_coleccion_where(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_coleccion_where(p_nom_cod_tabla character varying, p_nom_des_tabla character varying, p_nom_tabla character varying, p_aux_where character varying) RETURNS TABLE(codigo bigint, nombre character varying, codigo_excepcion integer, mensaje character varying, nit_empresa character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
 existe_where VARCHAR; 
 consulta VARCHAR;
 _c text;
 sec_insidencia INTEGER;
  
BEGIN

   CREATE TEMP TABLE  temp_auxiliar(  
      codigo BIGINT,
      nombre varchar,
      codigo_excepcion integer,
      mensaje varchar,
      nit_empresa varchar  
       
    ) ON COMMIT DROP;

   IF(p_aux_where IS NOT NULL AND p_aux_where <> '') THEN    
       existe_where:=CONCAT(' WHERE',' ',p_aux_where);
   ELSE
      existe_where:='';
   END IF;
      
   
   consulta := 'INSERT INTO temp_auxiliar(codigo,nombre,codigo_excepcion,mensaje,nit_empresa)'||CONCAT('SELECT',' ',p_nom_cod_tabla,',',p_nom_des_tabla,',',0,',','''NO APLICA''',',','''NO APLICA''',' ','FROM',' ',p_nom_tabla,' ',existe_where);           
        
   EXECUTE consulta;
   
   RETURN QUERY    
    SELECT 
      *
    FROM
     temp_auxiliar;    
   
 
EXCEPTION
WHEN OTHERS THEN 

  raise notice '% %', SQLERRM, SQLSTATE;
  --GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;  
  
   CREATE TEMP TABLE  temp_auxiliar(
            codigo BIGINT,
    	    nombre VARCHAR(1000),
            codigo_excepcion INTEGER,
            mensaje VARCHAR,
            nit_empresa VARCHAR            
       
    ) ON COMMIT DROP;
    
  
    
  INSERT INTO temp_auxiliar(codigo,nombre,codigo_excepcion,mensaje,nit_empresa)
  VALUES(-1,
         CAST('Causa error: '||SQLERRM||'<br>Codigo error: '||SQLSTATE||'<br>Detalles: '||_c AS VARCHAR),         
         0,
         'Se presento un error al momento de consultar los datos de la tabla',
         '001'         
         );   
  
  RETURN QUERY    
  SELECT 
    *
  FROM
   temp_auxiliar; 
  

END;
$$;


ALTER FUNCTION public.fn_get_coleccion_where(p_nom_cod_tabla character varying, p_nom_des_tabla character varying, p_nom_tabla character varying, p_aux_where character varying) OWNER TO sibica;

--
-- TOC entry 1224 (class 1255 OID 210141)
-- Name: fn_get_css_no_permisos(integer); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_css_no_permisos(p_cod_rol integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_c TEXT;
sec_insidencia INTEGER;
contar INTEGER;
ress TEXT;
datos RECORD;
BEGIN
	ress := '["NA"';
    FOR datos IN (SELECT 
						md.id_mod,
                        md.key_mod,
    					mp.id_mp_pk,
                        mp.insertar_mp,
                        mp.editar_mp,
                        mp.consultar_mp,
                        mp.eliminar_mp,
                        mp.estado_mp_fk                       
    				FROM
                    	modulo md
                        INNER JOIN modulo_permiso mp ON mp.modulo_mp_fk = md.id_mod
                    WHERE
                    	mp.rol_mp_fk = p_cod_rol
                        --AND mp.estado_mp_fk = 1
                    UNION SELECT 
                        md.id_mod,
                        md.key_mod,
                        -1 AS id_mp_pk,
                        0 AS insertar_mp,
                        0 AS editar_mp,
                        0 AS consultar_mp,
                        0 AS eliminar_mp,
                        2 AS estado_mp_fk                       
                    FROM
                          modulo md
                    WHERE
                    	md.id_mod NOT IN(SELECT 
                        					mdx.id_mod                     
                                          FROM
                                              modulo mdx
                                              INNER JOIN modulo_permiso mpx ON mpx.modulo_mp_fk = mdx.id_mod
                                          WHERE
                                              mpx.rol_mp_fk = p_cod_rol)
                    
    				)
    LOOP
    	IF datos.key_mod IS NOT NULL THEN
            IF datos.estado_mp_fk = 1 THEN
                IF datos.consultar_mp <> 1 THEN
                    ress := ress || ',"' || datos.key_mod ||'"';
                    ress := ress || ',"' || datos.key_mod ||'_3"';
                END IF;
                IF datos.insertar_mp <> 1 THEN
                    ress := ress || ',"' || datos.key_mod ||'_1"';
                END IF;
                IF datos.editar_mp <> 1 THEN
                    ress := ress || ',"' || datos.key_mod ||'_2"';
                END IF;
                IF datos.eliminar_mp <> 1 THEN
                    ress := ress || ',"' || datos.key_mod ||'_4"';
                END IF;
            ELSE
            	ress := ress || ',"' || datos.key_mod ||'"';
                ress := ress || ',"' || datos.key_mod ||'_1"';
                ress := ress || ',"' || datos.key_mod ||'_2"';
                ress := ress || ',"' || datos.key_mod ||'_3"';
                ress := ress || ',"' || datos.key_mod ||'_4"';
            END IF;
    	END IF;
    END LOOP;
	ress := ress || ']';

	return ress;


  	EXCEPTION
      WHEN OTHERS THEN
      ress := '["NA"]';

      return ress;

END;
$$;


ALTER FUNCTION public.fn_get_css_no_permisos(p_cod_rol integer) OWNER TO sibica;

--
-- TOC entry 1216 (class 1255 OID 210170)
-- Name: fn_get_dato_permiso_campo(text, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_dato_permiso_campo(p_dato text, p_cod_rol integer, p_nom_campo character varying, p_nom_tabla character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_c TEXT;
sec_insidencia INTEGER;
contar INTEGER;
ress TEXT;
datos RECORD;
BEGIN
	ress := '';
    
    SELECT 
    	count(*) AS contar
    FROM
    	campo cp
        INNER JOIN tabla tb ON tb.id_tbl_pk = cp.tabla_campo_fk
        INNER JOIN modulo_permiso_campo mpc ON mpc.campo_fk = cp.id_campo
        INNER JOIN modulo_permiso mp ON mp.id_mp_pk = mpc.modulo_permiso_fk
    WHERE
    	cp.nombre_campo = p_nom_campo
        AND tb.nombre_tbl = p_nom_tabla
        AND mp.rol_mp_fk = p_cod_rol;
    
    IF contar > 0 THEN
    	ress = p_dato;
    END IF;    
    
    
	return ress;


  	EXCEPTION
      WHEN OTHERS THEN
      ress := 'NA';

      return ress;

END;
$$;


ALTER FUNCTION public.fn_get_dato_permiso_campo(p_dato text, p_cod_rol integer, p_nom_campo character varying, p_nom_tabla character varying) OWNER TO sibica;

--
-- TOC entry 1234 (class 1255 OID 210172)
-- Name: fn_get_permisos_rol(integer); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_permisos_rol(p_cod_rol integer) RETURNS TABLE(cod_modulo_permiso integer, cod_modulo integer, nom_modulo character varying, cod_rol integer, insertar integer, editar integer, consultar integer, eliminar integer, cod_estado integer, campos character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
  _c text;
    
BEGIN		

	CREATE TEMP TABLE temp_aux_permisos_rol(
    	cod_modulo_permiso INTEGER,
        cod_modulo INTEGER,
        nom_modulo VARCHAR,
        cod_rol INTEGER,
        insertar INTEGER,
        editar INTEGER,
        consultar INTEGER,
        eliminar INTEGER,
		cod_estado INTEGER,
        campos VARCHAR
      ) ON COMMIT DROP;           
	
	
	INSERT INTO temp_aux_permisos_rol(
    	cod_modulo_permiso,
        cod_modulo,
        nom_modulo,
        cod_rol,
        insertar,
        editar,
        consultar,
        eliminar,
		cod_estado,
        campos
    )
  	SELECT
    	mp.id_mp_pk,
        md.id_mod,
        md.nombre_mod,        
        mp.rol_mp_fk,
        mp.insertar_mp,
        mp.editar_mp,
        mp.consultar_mp,
        mp.eliminar_mp,
        mp.estado_mp_fk,
        fn_get_campos_rol_modulo(md.id_mod, p_cod_rol) AS campos        
    FROM
    	modulo_permiso mp
        INNER JOIN modulo md ON mp.modulo_mp_fk = md.id_mod
    WHERE
    	mp.rol_mp_fk = p_cod_rol
    UNION SELECT
    	-1 AS id_mp_pk,
        md.id_mod,
        md.nombre_mod,        
        p_cod_rol AS rol_mp_fk,
        0 AS insertar_mp,
        0 AS editar_mp,
        0 AS consultar_mp,
        0 AS eliminar_mp,
        1 AS estado_mp_fk,
        fn_get_campos_rol_modulo(md.id_mod, p_cod_rol) AS campos
    FROM
    	modulo md
    WHERE
    	md.id_mod NOT IN (SELECT 
    						mpr.modulo_mp_fk 
        					FROM modulo_permiso mpr 
                            WHERE mpr.rol_mp_fk = p_cod_rol);
   
      
  	RETURN QUERY    
    	SELECT 
      		*
    	FROM
     		temp_aux_permisos_rol;  
    
EXCEPTION
WHEN OTHERS THEN
  raise notice '% %', SQLERRM, SQLSTATE; 
  --GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;        
  CREATE TEMP TABLE temp_aux_permisos_rol(
    	cod_modulo_permiso INTEGER,
        cod_modulo INTEGER,
        nom_modulo VARCHAR,
        cod_rol INTEGER,
        insertar INTEGER,
        editar INTEGER,
        consultar INTEGER,
        eliminar INTEGER,
		cod_estado INTEGER,
        campos VARCHAR
      ) ON COMMIT DROP; 
          
  INSERT INTO temp_aux_permisos_rol(
    	cod_modulo_permiso,
        cod_modulo,
        nom_modulo,
        cod_rol,
        insertar,
        editar,
        consultar,
        eliminar,
		cod_estado,
        campos
    )
  	VALUES(
      -1,
      -1,
      '-1',
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      '[]'
    );
  
  RETURN QUERY    
    SELECT 
      *
    FROM
     temp_aux_permisos_rol;
END;
$$;


ALTER FUNCTION public.fn_get_permisos_rol(p_cod_rol integer) OWNER TO sibica;

--
-- TOC entry 1220 (class 1255 OID 210194)
-- Name: fn_get_reporte_irregular_predio(character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_reporte_irregular_predio(p_predio character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
  DECLARE
  _c TEXT;
  sec_insidencia INTEGER;
  contar INTEGER;
  ress TEXT;
  msj_tipo_reporte TEXT;
  obs_reporte TEXT;
  datos RECORD;
  BEGIN
      ress := '{';
      msj_tipo_reporte := '[';
      obs_reporte := '';
      
      SELECT 
          count(*) INTO contar
      FROM
          terreno tr
          INNER JOIN geo_predio_mc gp ON gp.id_shp = tr.id_shp_p
          INNER JOIN reporte_predio rp ON rp.the_geom = gp.the_geom
      WHERE
          tr.identifica_p = p_predio;
          --AND rp.id_estado = 1    
      	
      
      FOR datos IN (SELECT * FROM tipo_reporte WHERE id_estado = 1)
      LOOP
          msj_tipo_reporte := msj_tipo_reporte || '{';
          msj_tipo_reporte := msj_tipo_reporte || '"id":"' || datos.id_tipo_reporte || '",';
          msj_tipo_reporte := msj_tipo_reporte || '"nombre":"' || datos.nombre_tipo_reporte || '",';
          msj_tipo_reporte := msj_tipo_reporte || '"mensaje":"' || datos.mensaje || '"';
          msj_tipo_reporte := msj_tipo_reporte || '},';
      END LOOP;
      msj_tipo_reporte := substr(msj_tipo_reporte, 0, length(msj_tipo_reporte)) || ']';
      --msj_tipo_reporte := msj_tipo_reporte || ']';
  	    
      IF contar > 0 THEN
          SELECT 
              rp.observacion_ciudadano INTO obs_reporte
          FROM
              terreno tr
              INNER JOIN geo_predio_mc gp ON gp.id_shp = tr.id_shp_p
              INNER JOIN reporte_predio rp ON rp.the_geom = gp.the_geom
          WHERE
              tr.identifica_p = p_predio;
      END IF;
      
      ress := ress || '"msj_reporte":' || msj_tipo_reporte || ',';
      ress := ress || '"existe_reporte":' || contar || ',';
      ress := ress || '"obs_reporte":"' || obs_reporte || '"';
      ress := ress || '}';
      
      return ress;


      EXCEPTION
        WHEN OTHERS THEN
        ress := '{}';

        return ress;

  END;
  $$;


ALTER FUNCTION public.fn_get_reporte_irregular_predio(p_predio character varying) OWNER TO sibica;

--
-- TOC entry 1230 (class 1255 OID 210174)
-- Name: fn_get_session(text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_get_session(p_name_sesion text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
existe_table_temp INTEGER;
BEGIN
   PERFORM relname
  FROM pg_class
  WHERE relname = 'tbl_session'
    AND CASE WHEN has_schema_privilege(relnamespace, 'USAGE')
             THEN pg_table_is_visible(oid) ELSE false END;

  IF(existe_table_temp > 0) THEN 
    RETURN NULL;
  ELSE
    RETURN (SELECT value FROM tbl_session WHERE name = p_name_sesion);
  END IF;
  
END;
$$;


ALTER FUNCTION public.fn_get_session(p_name_sesion text) OWNER TO sibica;

--
-- TOC entry 1231 (class 1255 OID 208512)
-- Name: fn_guarda_parametro(character varying, character varying, text, text, character varying, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_guarda_parametro(p_instrucion character varying, p_tabla character varying, p_campos text, p_valores text, p_condicion character varying, p_datos_session text) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
 
  cadena_execute varchar;
  v_campos_tabla varchar;
  v_datos varchar;
  _c text;
  v_retorno varchar;
  result_sesion TEXT;   

BEGIN

   SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion; 

  cadena_execute = '';
  v_campos_tabla = p_campos;
  v_datos = p_valores;

  IF p_instrucion = 'insert' THEN
      cadena_execute = 'INSERT INTO ' || p_tabla ||' ('|| v_campos_tabla  ||') VALUES ('|| v_datos ||');';       
  END IF;

  IF p_instrucion = 'update' THEN
      cadena_execute = 'UPDATE ' || p_tabla ||' SET '|| v_campos_tabla  ||' WHERE '|| p_condicion ||';';       
  END IF;

  IF p_instrucion = 'delete' THEN
      cadena_execute = 'DELETE FROM ' || p_tabla ||' WHERE '|| p_condicion ||';';       
  END IF;


 EXECUTE cadena_execute; 
 
          
 return                        
      'Operación realizada correctamente.';                   
                         
    
/*EXCEPTION
WHEN OTHERS THEN
  raise notice '% %', SQLERRM, SQLSTATE; 
  GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
          
  return 
	'La operación no se pudo completar por que ocurrio un error en la base de datos.'; */
END;
$$;


ALTER FUNCTION public.fn_guarda_parametro(p_instrucion character varying, p_tabla character varying, p_campos text, p_valores text, p_condicion character varying, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 1218 (class 1255 OID 208513)
-- Name: fn_guardar_campos(text, character varying, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_guardar_campos(p_datos text, p_tabla character varying, p_datos_session text) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
fila record;
_c text;
v_retorno varchar;
v_codigo_tabla public.tabla.id_tbl_pk%TYPE;
result_sesion TEXT;

BEGIN

  SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion;

  v_retorno := 'Registro guardado correctamente.';
  
  SELECT id_tbl_pk INTO v_codigo_tabla  FROM public.tabla WHERE nombre_tbl = p_tabla;

  DELETE FROM 
   public.campo
  WHERE
   tabla_campo_fk = v_codigo_tabla;
 
  FOR fila IN (SELECT valor from public.fn_split_data (p_datos, ',')) LOOP
  
     INSERT INTO 
        public.campo
      (        
        nombre_campo,       
        tabla_campo_fk
      )
      VALUES (        
        fila.valor,
        v_codigo_tabla
      );
  
  
  END LOOP;
  
  return v_retorno;
  
  /*EXCEPTION
WHEN OTHERS THEN
    raise notice '% %', SQLERRM, SQLSTATE; 
    GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;    
          
  return  
        'Se presento un error en la base de datos al momento de guardar el registro.';*/

END;
$$;


ALTER FUNCTION public.fn_guardar_campos(p_datos text, p_tabla character varying, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 1219 (class 1255 OID 208514)
-- Name: fn_guardar_tablas(text, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_guardar_tablas(p_datos text, p_datos_session text) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
fila record;
_c text;
v_retorno varchar;
result_sesion TEXT; 

BEGIN

   SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion;

  v_retorno := 'Registro guardado correctamente.';

  DELETE FROM 
   public.tabla;
 
  FOR fila IN (SELECT valor from public.fn_split_data (p_datos, ',')) LOOP
  
      INSERT INTO 
        public.tabla
      (        
        nombre_tbl
        
      )
      VALUES (
       fila.valor
      );
  
  
  END LOOP;
  
  return v_retorno;
  
  /*EXCEPTION
WHEN OTHERS THEN
    raise notice '% %', SQLERRM, SQLSTATE; 
    GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;    
          
  return  
        'Se presento un error en la base de datos al momento de guardar el registro.';*/

END;
$$;


ALTER FUNCTION public.fn_guardar_tablas(p_datos text, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 1236 (class 1255 OID 210193)
-- Name: fn_guardar_tipo_amoblamiento(integer, character varying, integer, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_guardar_tipo_amoblamiento(p_codigo integer, p_nombre character varying, p_estado integer, p_datasesion character varying, p_codigo_file integer, p_file_name character varying, p_ruta_file character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  data_session text;
  aux_nombre_ta public.tipo_amoblamiento.nombre_ta%TYPE;
  aux_file_tipo_amoblamiento_fk public.tipo_amoblamiento.icono_ta_fk%TYPE;
  aux_id_ta public.tipo_amoblamiento.id_ta%TYPE;
  v_retorno varchar;
  _c text;
  
BEGIN

 v_retorno := 'Registro guardado correctamente.';

 SELECT public.fn_set_session ('cadena_session',p_datasesion) into data_session;
           
      SELECT
        id_ta, 
        nombre_ta,
        icono_ta_fk INTO aux_id_ta,aux_nombre_ta,aux_file_tipo_amoblamiento_fk 
      FROM 
        public.tipo_amoblamiento
       
      WHERE
      	id_ta = p_codigo;
          
        -- guarda la foto del usuario.
    IF(p_file_name IS NOT NULL AND p_file_name <> '')THEN  
        IF(aux_file_tipo_amoblamiento_fk IS NULL)THEN
        
            SELECT NEXTVAL('public.file_id_file_seq') INTO aux_file_tipo_amoblamiento_fk;
            
            INSERT INTO 
                public.file
              (
                id_file,
                nombre_file,
                ruta_file               
              )
              VALUES (
                aux_file_tipo_amoblamiento_fk,
                p_file_name,
                p_ruta_file              
              );
            
        ELSE
        	UPDATE 
                public.file 
              SET 
                nombre_file = p_file_name,
                ruta_file = p_ruta_file
              WHERE 
                id_file = aux_file_tipo_amoblamiento_fk;         
       
        END IF; 
    END IF;  
    
    IF aux_id_ta IS NULL THEN
      
    	INSERT INTO 
            public.tipo_amoblamiento
          (         
            nombre_ta,
            icono_ta_fk,
            estado_ta_fk
          )
          VALUES (
            p_nombre,
            CASE WHEN aux_file_tipo_amoblamiento_fk IS NULL THEN NULL ELSE aux_file_tipo_amoblamiento_fk END,
            p_estado
          );
          
 	ELSE
    
        UPDATE 
          public.tipo_amoblamiento 
        SET 
          nombre_ta = p_nombre,
          icono_ta_fk = CASE WHEN aux_file_tipo_amoblamiento_fk IS NULL THEN NULL ELSE aux_file_tipo_amoblamiento_fk END,
          estado_ta_fk = p_estado
        WHERE 
          id_ta = aux_id_ta;
    
    END IF;    
          
 return 
 	v_retorno;       
     
/*EXCEPTION
WHEN OTHERS THEN
    raise notice '% %', SQLERRM, SQLSTATE; 
    --GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;    
          
  return  
        'Se presento un error en la base de datos. Por favor intente nuevamente.';*/

END;
$$;


ALTER FUNCTION public.fn_guardar_tipo_amoblamiento(p_codigo integer, p_nombre character varying, p_estado integer, p_datasesion character varying, p_codigo_file integer, p_file_name character varying, p_ruta_file character varying) OWNER TO sibica;

--
-- TOC entry 1235 (class 1255 OID 208534)
-- Name: fn_guardar_usuario(integer, character varying, character varying, character varying, character varying, character varying, character varying, character varying, integer, bigint, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_guardar_usuario(p_codigo integer, p_identificacion character varying, p_nombre1 character varying, p_nombre2 character varying, p_apellido1 character varying, p_apellido2 character varying, p_email character varying, p_clave character varying, p_estado integer, p_dependencia bigint, p_rol integer, p_email_anterior character varying, p_datos_sesion text) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  aux_codigo_usuario integer;  
  v_retorno VARCHAR;
  _c text;
  v_existe_usuario INTEGER;
  result_sesion TEXT;
  
BEGIN

   SELECT public.fn_set_session ('cadena_session',p_datos_sesion) into result_sesion; 
 
  v_retorno := 'Registro guardado correctamente.';

 --se valida si el usuario existe con su numero de cedula
 
  SELECT 
    id_user_pk INTO aux_codigo_usuario   
  FROM 
    public.user 
  WHERE
  	 id_user_pk = p_codigo;
  
  SELECT 
    COUNT(id_user_pk) INTO v_existe_usuario   
  FROM 
    public.user 
  WHERE
  	 correo_user = p_email
     AND correo_user <> p_email_anterior;      
  
 IF v_existe_usuario = 0 THEN
   IF(aux_codigo_usuario IS NULL)THEN
 
      SELECT nextval('public.user_id_user_pk_seq') INTO aux_codigo_usuario;
      
     	INSERT INTO 
            public.user
          (
            id_user_pk,
            identificacion_user,
            primer_nombre_user,
            segundo_nombre_user,
            primer_apellido_user,
            segundo_apellido_user,
            correo_user,
            clave_user,           
            estado_user_fk,
            rol_user_fk,
            dependencia_user_fk
          )
          VALUES (
            aux_codigo_usuario,
            p_identificacion,
            p_nombre1,
            p_nombre2,
            p_apellido1,
            p_apellido2,
            p_email,
            p_clave,
            p_estado,
            p_rol,
            p_dependencia
          );                
     
   ELSIF aux_codigo_usuario IS NOT NULL AND p_codigo > 0 THEN
       
      UPDATE 
         public.user 
      SET 
        primer_nombre_user = p_nombre1,
        segundo_nombre_user = p_nombre2,
        primer_apellido_user = p_apellido1,
        segundo_apellido_user = p_apellido2,
        correo_user = p_email,
        clave_user = CASE WHEN p_clave = '-1' THEN clave_user ELSE p_clave END,           
        estado_user_fk = p_estado,
        rol_user_fk = p_rol,
        dependencia_user_fk = p_dependencia
        
      WHERE 
        id_user_pk = aux_codigo_usuario;
   ELSE
      
      v_retorno := 'El usuario ingresado ya existe por favor intente nuevamente.'; 	
      
   END IF;  
 ELSE 
     v_retorno := 'El usuario ingresado ya existe por favor intente nuevamente.';
 END IF;  
          
 return 
 	v_retorno;       
     
/*EXCEPTION
WHEN OTHERS THEN
    raise notice '% %', SQLERRM, SQLSTATE; 
    --GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;    
          
  return  
        'Se presento un error en la base de datos al momento de guardar el registro.';*/
END;
$$;


ALTER FUNCTION public.fn_guardar_usuario(p_codigo integer, p_identificacion character varying, p_nombre1 character varying, p_nombre2 character varying, p_apellido1 character varying, p_apellido2 character varying, p_email character varying, p_clave character varying, p_estado integer, p_dependencia bigint, p_rol integer, p_email_anterior character varying, p_datos_sesion text) OWNER TO sibica;

--
-- TOC entry 1223 (class 1255 OID 208535)
-- Name: fn_log_auditoria_tablas(); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_log_auditoria_tablas() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

  campo varchar[];--campos de la tabla
  v_nuevos varchar[];--valores nuevos
  v_viejos varchar[];--valores viejos
  auxiliar text /*varchar(1000)*/;
  nuevos varchar;
  viejos varchar;
  aux_usuario varchar;
  aux_ip TEXT;
  aux_browser TEXT;
  aux_cadena_sesion TEXT;
  array_sesion TEXT[];
BEGIN

   select public.fn_get_session('cadena_session') INTO aux_cadena_sesion;   
   array_sesion:=(string_to_array(aux_cadena_sesion,'=')); 
   aux_usuario:=array_sesion[1];
   aux_ip:=array_sesion[2];
   aux_browser:=array_sesion[3];  
   
---se encarga de guardar los valores nuevos en un arreglo y depuracion de caracteres invalidos en la estructura

IF (TG_OP <> 'DELETE'   ) THEN

        --se reemplaza por null los valores que vienen vacios en el arreglo para que no se dañe
        nuevos=cast(new as varchar);
        select replace(nuevos,',)',',null)') into nuevos;
        select replace(nuevos,'(,',',(null,') into nuevos;
        select replace(nuevos,',,',',null,') into nuevos;
        ---se crea el arreglo
       v_nuevos:=(string_to_array(nuevos,','));
      -----v_nuevos:=(string_to_array(cast(new as varchar),','));
      --se quitan los caracteres que son invalidos en la estructura
       v_nuevos:=replace(cast(v_nuevos as varchar),'(','');
      v_nuevos:=replace(cast(v_nuevos as varchar),')','');
  --    RAISE INFO ' v_nuevos-- %',  v_nuevos;  
      
   
         
end if;
IF (TG_OP = 'DELETE' or TG_OP = 'UPDATE') THEN
      ---se encarga de guardar los valores viejos en un arreglo y depuracion de caracteres invalidos en la estructura
       viejos=cast(OLD as varchar);
       --se reemplaza por null los valores que vienen vacios en el arreglo para que no se dañe
        select replace(viejos,',)',',null)') into viejos;
        select replace(viejos,'(,',',(null,') into viejos;
        select replace(viejos,',,',',null,') into viejos;
      
      
    --  v_viejos:=(string_to_array(cast(OLD as varchar),','));  
     --se quitan los caracteres que son invalidos en la estructura
       v_viejos:=(string_to_array(viejos,','));  
       v_viejos:=replace(cast(v_viejos as varchar),'(','');
       v_viejos:=replace(cast(v_viejos as varchar),')','');
       -- RAISE INFO ' v_viejos-- %',  v_viejos;  
end if;

---se consultan los campos de la tabla afectada
SELECT fn_campos_tabla into auxiliar FROM public.fn_campos_tabla(cast(TG_TABLE_NAME as varchar)/*,cast(v_nuevos as varchar)*/ );
campo:=(string_to_array(auxiliar,','));
-- RAISE INFO 'campo----------------------------------------------------- %',  campo; 
-- RAISE INFO 'campo----------------------------------------------------- %', array_length(campo,1);



 FOR fila IN 1..(array_length(campo,1)) LOOP
   --   RAISE INFO 'campo----------------------------------------------------- %', fila;
 
 

  IF  TG_OP = 'DELETE'  THEN
           INSERT INTO public.tbl_audit (table_name, operation, old_value, new_value, update_date,user_name,field,ip,browser)
           VALUES (TG_TABLE_NAME, 'D', v_viejos[fila], NULL, now(), aux_usuario,campo[fila],aux_ip,aux_browser);
   -- RETURN OLD;
   
    END IF;
   IF  TG_OP = 'UPDATE'  THEN
  
           IF ( v_viejos[fila]<> v_nuevos[fila]) THEN
             INSERT INTO public.tbl_audit (table_name, operation, old_value, new_value, update_date,user_name,field,ip,browser)
             VALUES (TG_TABLE_NAME, 'U', v_viejos[fila], v_nuevos[fila], now(), aux_usuario,campo[fila],aux_ip,aux_browser);
           END IF;
   END IF;        
           
  --  RETURN NEW;
  
  
  
   IF  TG_OP = 'INSERT'  THEN
           INSERT INTO public.tbl_audit (table_name, operation, old_value, new_value, update_date,user_name,field,ip,browser)
          -- VALUES (TG_TABLE_NAME, 'I', null, NEW, now(), USER);
             VALUES (TG_TABLE_NAME, 'I', null,  v_nuevos[fila], now(), aux_usuario,campo[fila],aux_ip,aux_browser);
   -- RETURN NEW;
  END IF;
  
     end loop;
			 
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.fn_log_auditoria_tablas() OWNER TO sibica;

--
-- TOC entry 1221 (class 1255 OID 210195)
-- Name: fn_set_reporte_irregular_predio(character varying, character varying, text, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_set_reporte_irregular_predio(p_predio character varying, p_tipo_reporte character varying, p_observacion text, p_datos_session text) RETURNS text
    LANGUAGE plpgsql
    AS $$
  DECLARE
    _c TEXT;
    sec_insidencia INTEGER;
    contar INTEGER;
    ress TEXT;
    v_them_geo TEXT;
    msj_tipo_reporte TEXT;
    obs_reporte TEXT;
    datos RECORD;
    result_sesion TEXT;  
  BEGIN
      SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion;
      
      ress := 'Se registro correctamente el reporte';
            
      SELECT
          gp.the_geom INTO v_them_geo
      FROM
          terreno tr
          INNER JOIN geo_predio_mc gp ON gp.id_shp = tr.id_shp_p
      WHERE
          tr.identifica_p = p_predio;
        
  	  INSERT INTO reporte_predio(
      	the_geom,
        tipo_reporte,
        fecha_reporte,
        observacion_ciudadano
      ) VALUES (
      	v_them_geo,
        p_tipo_reporte,
        now(),
        p_observacion
      );
      
      return ress;

      EXCEPTION
        WHEN OTHERS THEN
        ress := 'Ocurrio un error al registrar el reporte';

        return ress;

  END;
  $$;


ALTER FUNCTION public.fn_set_reporte_irregular_predio(p_predio character varying, p_tipo_reporte character varying, p_observacion text, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 1222 (class 1255 OID 208536)
-- Name: fn_set_session(text, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_set_session(p_name_sesion text, p_value_sesion text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
   PERFORM relname
  FROM pg_class
  WHERE relname = 'tbl_session'
    AND CASE WHEN has_schema_privilege(relnamespace, 'USAGE')
             THEN pg_table_is_visible(oid) ELSE false END;

  IF not found THEN
    CREATE TEMPORARY TABLE tbl_session (name TEXT, value TEXT);
  ELSE
    DELETE FROM tbl_session WHERE name = p_name_sesion;
  END IF;

  INSERT INTO tbl_session(name,value) VALUES (p_name_sesion, p_value_sesion);
  
END;
$$;


ALTER FUNCTION public.fn_set_session(p_name_sesion text, p_value_sesion text) OWNER TO sibica;

--
-- TOC entry 1232 (class 1255 OID 203665)
-- Name: fn_split_data(character varying, character varying); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION fn_split_data(p_cadena character varying, p_separador character varying) RETURNS TABLE(id integer, valor character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE  
v_arr text[];
v_query varchar;
    rc_arr RECORD;
    v_cantidad_arr integer;
    v_dato_arr varchar;
    v_consulta varchar;
    v_cont integer;

BEGIN
v_cont := 1;
v_query := ' '; 
v_arr := string_to_array(p_cadena, p_separador); 
    v_cantidad_arr := array_length(v_arr, 1);
    
    FOR rc_arr IN 1..v_cantidad_arr LOOP
    v_dato_arr := v_arr[rc_arr];
        
        IF rc_arr > 1 THEN
        v_query := v_query ||' UNION ';
        END IF;
        v_query := v_query ||' SELECT ';
        v_query := v_query ||' '|| rc_arr ||' as id,';
        v_query := v_query ||' '''|| v_arr[rc_arr] ||''' as valor';        
   
    END LOOP;     
  
    v_query := v_query ||' ORDER BY id';
    
CREATE TEMP TABLE temp_auxiliar(  
        id integer,
        valor varchar
    ) ON COMMIT DROP;
    
    v_consulta := 'INSERT INTO temp_auxiliar(id,valor) '||v_query;           
        
    EXECUTE v_consulta;
   
    RETURN QUERY    
      SELECT 
        *
      FROM
          temp_auxiliar;    
          
END;
$$;


ALTER FUNCTION public.fn_split_data(p_cadena character varying, p_separador character varying) OWNER TO sibica;

--
-- TOC entry 595 (class 1255 OID 16633)
-- Name: force_2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_2d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_2d';


ALTER FUNCTION public.force_2d(geometry) OWNER TO postgres;

--
-- TOC entry 599 (class 1255 OID 16637)
-- Name: force_3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.force_3d(geometry) OWNER TO postgres;

--
-- TOC entry 601 (class 1255 OID 16639)
-- Name: force_3dm(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3dm(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dm';


ALTER FUNCTION public.force_3dm(geometry) OWNER TO postgres;

--
-- TOC entry 597 (class 1255 OID 16635)
-- Name: force_3dz(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3dz(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.force_3dz(geometry) OWNER TO postgres;

--
-- TOC entry 603 (class 1255 OID 16641)
-- Name: force_4d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_4d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_4d';


ALTER FUNCTION public.force_4d(geometry) OWNER TO postgres;

--
-- TOC entry 605 (class 1255 OID 16643)
-- Name: force_collection(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_collection(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_collection';


ALTER FUNCTION public.force_collection(geometry) OWNER TO postgres;

--
-- TOC entry 620 (class 1255 OID 16658)
-- Name: forcerhr(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION forcerhr(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_forceRHR_poly';


ALTER FUNCTION public.forcerhr(geometry) OWNER TO postgres;

--
-- TOC entry 1117 (class 1255 OID 17220)
-- Name: geography(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography(geometry) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_from_geometry';


ALTER FUNCTION public.geography(geometry) OWNER TO postgres;

--
-- TOC entry 1106 (class 1255 OID 17203)
-- Name: geography(geography, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography(geography, integer, boolean) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_enforce_typmod';


ALTER FUNCTION public.geography(geography, integer, boolean) OWNER TO postgres;

--
-- TOC entry 1134 (class 1255 OID 17250)
-- Name: geography_cmp(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_cmp(geography, geography) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_cmp';


ALTER FUNCTION public.geography_cmp(geography, geography) OWNER TO postgres;

--
-- TOC entry 1133 (class 1255 OID 17249)
-- Name: geography_eq(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_eq(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_eq';


ALTER FUNCTION public.geography_eq(geography, geography) OWNER TO postgres;

--
-- TOC entry 1132 (class 1255 OID 17248)
-- Name: geography_ge(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_ge(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_ge';


ALTER FUNCTION public.geography_ge(geography, geography) OWNER TO postgres;

--
-- TOC entry 1120 (class 1255 OID 17225)
-- Name: geography_gist_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_compress(internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_compress';


ALTER FUNCTION public.geography_gist_compress(internal) OWNER TO postgres;

--
-- TOC entry 1119 (class 1255 OID 17224)
-- Name: geography_gist_consistent(internal, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_consistent(internal, geometry, integer) RETURNS boolean
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_consistent';


ALTER FUNCTION public.geography_gist_consistent(internal, geometry, integer) OWNER TO postgres;

--
-- TOC entry 1125 (class 1255 OID 17230)
-- Name: geography_gist_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_decompress(internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_decompress';


ALTER FUNCTION public.geography_gist_decompress(internal) OWNER TO postgres;

--
-- TOC entry 1127 (class 1255 OID 17232)
-- Name: geography_gist_join_selectivity(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_join_selectivity(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_join_selectivity';


ALTER FUNCTION public.geography_gist_join_selectivity(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 1121 (class 1255 OID 17226)
-- Name: geography_gist_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_penalty';


ALTER FUNCTION public.geography_gist_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 1122 (class 1255 OID 17227)
-- Name: geography_gist_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_picksplit(internal, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_picksplit';


ALTER FUNCTION public.geography_gist_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 1124 (class 1255 OID 17229)
-- Name: geography_gist_same(box2d, box2d, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_same(box2d, box2d, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_same';


ALTER FUNCTION public.geography_gist_same(box2d, box2d, internal) OWNER TO postgres;

--
-- TOC entry 1126 (class 1255 OID 17231)
-- Name: geography_gist_selectivity(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_selectivity(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_selectivity';


ALTER FUNCTION public.geography_gist_selectivity(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 1123 (class 1255 OID 17228)
-- Name: geography_gist_union(bytea, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_union(bytea, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gist_union';


ALTER FUNCTION public.geography_gist_union(bytea, internal) OWNER TO postgres;

--
-- TOC entry 1131 (class 1255 OID 17247)
-- Name: geography_gt(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gt(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_gt';


ALTER FUNCTION public.geography_gt(geography, geography) OWNER TO postgres;

--
-- TOC entry 1130 (class 1255 OID 17246)
-- Name: geography_le(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_le(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_le';


ALTER FUNCTION public.geography_le(geography, geography) OWNER TO postgres;

--
-- TOC entry 1129 (class 1255 OID 17245)
-- Name: geography_lt(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_lt(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_lt';


ALTER FUNCTION public.geography_lt(geography, geography) OWNER TO postgres;

--
-- TOC entry 1128 (class 1255 OID 17233)
-- Name: geography_overlaps(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_overlaps(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_overlaps';


ALTER FUNCTION public.geography_overlaps(geography, geography) OWNER TO postgres;

--
-- TOC entry 1114 (class 1255 OID 17212)
-- Name: geography_typmod_dims(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_dims(integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_typmod_dims';


ALTER FUNCTION public.geography_typmod_dims(integer) OWNER TO postgres;

--
-- TOC entry 1115 (class 1255 OID 17213)
-- Name: geography_typmod_srid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_srid(integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_typmod_srid';


ALTER FUNCTION public.geography_typmod_srid(integer) OWNER TO postgres;

--
-- TOC entry 1116 (class 1255 OID 17214)
-- Name: geography_typmod_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_type(integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_typmod_type';


ALTER FUNCTION public.geography_typmod_type(integer) OWNER TO postgres;

--
-- TOC entry 1006 (class 1255 OID 17099)
-- Name: geomcollfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromtext(text) OWNER TO postgres;

--
-- TOC entry 1004 (class 1255 OID 17097)
-- Name: geomcollfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1058 (class 1255 OID 17150)
-- Name: geomcollfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1056 (class 1255 OID 17148)
-- Name: geomcollfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 764 (class 1255 OID 16825)
-- Name: geometry(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_bytea';


ALTER FUNCTION public.geometry(bytea) OWNER TO postgres;

--
-- TOC entry 760 (class 1255 OID 16821)
-- Name: geometry(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box2d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_to_LWGEOM';


ALTER FUNCTION public.geometry(box2d) OWNER TO postgres;

--
-- TOC entry 761 (class 1255 OID 16822)
-- Name: geometry(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box3d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.geometry(box3d) OWNER TO postgres;

--
-- TOC entry 460 (class 1255 OID 16449)
-- Name: geometry(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box3d_extent) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.geometry(box3d_extent) OWNER TO postgres;

--
-- TOC entry 763 (class 1255 OID 16824)
-- Name: geometry(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(chip) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_to_LWGEOM';


ALTER FUNCTION public.geometry(chip) OWNER TO postgres;

--
-- TOC entry 1118 (class 1255 OID 17222)
-- Name: geometry(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(geography) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geometry_from_geography';


ALTER FUNCTION public.geometry(geography) OWNER TO postgres;

--
-- TOC entry 762 (class 1255 OID 16823)
-- Name: geometry(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.geometry(text) OWNER TO postgres;

--
-- TOC entry 518 (class 1255 OID 16523)
-- Name: geometry_above(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_above(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_above';


ALTER FUNCTION public.geometry_above(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 519 (class 1255 OID 16524)
-- Name: geometry_below(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_below(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_below';


ALTER FUNCTION public.geometry_below(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 492 (class 1255 OID 16484)
-- Name: geometry_cmp(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_cmp(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_cmp';


ALTER FUNCTION public.geometry_cmp(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 520 (class 1255 OID 16525)
-- Name: geometry_contain(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_contain(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_contain';


ALTER FUNCTION public.geometry_contain(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 521 (class 1255 OID 16526)
-- Name: geometry_contained(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_contained(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_contained';


ALTER FUNCTION public.geometry_contained(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 491 (class 1255 OID 16483)
-- Name: geometry_eq(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_eq(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_eq';


ALTER FUNCTION public.geometry_eq(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 490 (class 1255 OID 16482)
-- Name: geometry_ge(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_ge(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_ge';


ALTER FUNCTION public.geometry_ge(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 511 (class 1255 OID 16516)
-- Name: geometry_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.geometry_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 510 (class 1255 OID 16515)
-- Name: geometry_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.geometry_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 489 (class 1255 OID 16481)
-- Name: geometry_gt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_gt';


ALTER FUNCTION public.geometry_gt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 488 (class 1255 OID 16480)
-- Name: geometry_le(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_le(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_le';


ALTER FUNCTION public.geometry_le(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 516 (class 1255 OID 16521)
-- Name: geometry_left(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_left(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_left';


ALTER FUNCTION public.geometry_left(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 487 (class 1255 OID 16479)
-- Name: geometry_lt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_lt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_lt';


ALTER FUNCTION public.geometry_lt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 514 (class 1255 OID 16519)
-- Name: geometry_overabove(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overabove(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overabove';


ALTER FUNCTION public.geometry_overabove(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 515 (class 1255 OID 16520)
-- Name: geometry_overbelow(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overbelow(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overbelow';


ALTER FUNCTION public.geometry_overbelow(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 522 (class 1255 OID 16527)
-- Name: geometry_overlap(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overlap(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overlap';


ALTER FUNCTION public.geometry_overlap(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 512 (class 1255 OID 16517)
-- Name: geometry_overleft(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overleft(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overleft';


ALTER FUNCTION public.geometry_overleft(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 513 (class 1255 OID 16518)
-- Name: geometry_overright(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overright(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overright';


ALTER FUNCTION public.geometry_overright(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 517 (class 1255 OID 16522)
-- Name: geometry_right(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_right(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_right';


ALTER FUNCTION public.geometry_right(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 509 (class 1255 OID 16514)
-- Name: geometry_same(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_same(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.geometry_same(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 523 (class 1255 OID 16528)
-- Name: geometry_samebox(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_samebox(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.geometry_samebox(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 955 (class 1255 OID 17048)
-- Name: geometryfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.geometryfromtext(text) OWNER TO postgres;

--
-- TOC entry 957 (class 1255 OID 17050)
-- Name: geometryfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.geometryfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 913 (class 1255 OID 17006)
-- Name: geometryn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_geometryn_collection';


ALTER FUNCTION public.geometryn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 925 (class 1255 OID 17018)
-- Name: geometrytype(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometrytype(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_getTYPE';


ALTER FUNCTION public.geometrytype(geometry) OWNER TO postgres;

--
-- TOC entry 4738 (class 0 OID 0)
-- Dependencies: 925
-- Name: FUNCTION geometrytype(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION geometrytype(geometry) IS 'args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.';


--
-- TOC entry 638 (class 1255 OID 16676)
-- Name: geomfromewkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromewkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOMFromWKB';


ALTER FUNCTION public.geomfromewkb(bytea) OWNER TO postgres;

--
-- TOC entry 640 (class 1255 OID 16678)
-- Name: geomfromewkt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromewkt(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.geomfromewkt(text) OWNER TO postgres;

--
-- TOC entry 959 (class 1255 OID 17052)
-- Name: geomfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geometryfromtext($1)$_$;


ALTER FUNCTION public.geomfromtext(text) OWNER TO postgres;

--
-- TOC entry 961 (class 1255 OID 17054)
-- Name: geomfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geometryfromtext($1, $2)$_$;


ALTER FUNCTION public.geomfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1008 (class 1255 OID 17101)
-- Name: geomfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromwkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.geomfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1010 (class 1255 OID 17103)
-- Name: geomfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SetSRID(GeomFromWKB($1), $2)$_$;


ALTER FUNCTION public.geomfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 813 (class 1255 OID 16891)
-- Name: geomunion(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomunion(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geomunion';


ALTER FUNCTION public.geomunion(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 728 (class 1255 OID 16782)
-- Name: get_proj4_from_srid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_proj4_from_srid(integer) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$_$;


ALTER FUNCTION public.get_proj4_from_srid(integer) OWNER TO postgres;

--
-- TOC entry 536 (class 1255 OID 16574)
-- Name: getbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION getbbox(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.getbbox(geometry) OWNER TO postgres;

--
-- TOC entry 535 (class 1255 OID 16573)
-- Name: getsrid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION getsrid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.getsrid(geometry) OWNER TO postgres;

--
-- TOC entry 1081 (class 1255 OID 17174)
-- Name: gettransactionid(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gettransactionid() RETURNS xid
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'getTransactionID';


ALTER FUNCTION public.gettransactionid() OWNER TO postgres;

--
-- TOC entry 1226 (class 1255 OID 208555)
-- Name: guardar_permisos_rol(integer, integer, integer, integer, integer, integer, integer, integer, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION guardar_permisos_rol(p_cod_modulo_permiso integer, p_cod_modulo integer, p_cod_rol integer, p_insertar integer, p_editar integer, p_consultar integer, p_eliminar integer, p_estado integer, p_datos_session text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
v_cod_mp modulo_permiso.id_mp_pk%type;
result_sesion TEXT; 


BEGIN
	SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion;
	
	IF p_cod_modulo_permiso > 0 THEN
    	v_cod_mp := p_cod_modulo_permiso;
        UPDATE public.modulo_permiso 
        SET 
          estado_mp_fk = p_estado,
          insertar_mp = p_insertar,
          editar_mp = p_editar,
          consultar_mp = p_consultar,
          eliminar_mp = p_eliminar
        WHERE
        	id_mp_pk = v_cod_mp
        ;       
    ELSE
    	v_cod_mp := nextval('sq_modulo_permiso');
        INSERT INTO public.modulo_permiso
        (
          id_mp_pk,
          modulo_mp_fk,
          rol_mp_fk,
          fecha_creacion_mp,
          estado_mp_fk,
          insertar_mp,
          editar_mp,
          consultar_mp,
          eliminar_mp
        )
        VALUES (
          v_cod_mp,
          p_cod_modulo,
          p_cod_rol,
          now(),
          p_estado,
          p_insertar,
          p_editar,
          p_consultar,
          p_eliminar
        );    	
    END IF;
    

  	RETURN v_cod_mp;

  	EXCEPTION
  	WHEN OTHERS THEN
    	--GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
    	--ress := 'error|motivo error '||SQLERRM||'codigo error '||SQLSTATE||'detalles '||_c;
        v_cod_mp := -1;
    	RETURN v_cod_mp;
    
    

END;
$$;


ALTER FUNCTION public.guardar_permisos_rol(p_cod_modulo_permiso integer, p_cod_modulo integer, p_cod_rol integer, p_insertar integer, p_editar integer, p_consultar integer, p_eliminar integer, p_estado integer, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 1227 (class 1255 OID 208556)
-- Name: guardar_permisos_rol_campos(integer, integer, text); Type: FUNCTION; Schema: public; Owner: sibica
--

CREATE FUNCTION guardar_permisos_rol_campos(p_cod_modulo_permiso integer, p_cod_campo integer, p_datos_session text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_cod_mpc modulo_permiso_campo.id_mpc%type;
    result_sesion TEXT;
BEGIN
	v_cod_mpc := nextval('sq_modulo_permiso_campo');
    SELECT public.fn_set_session ('cadena_session',p_datos_session) into result_sesion;
	
	INSERT INTO public.modulo_permiso_campo
    (
      id_mpc,
      modulo_permiso_fk,
      campo_fk,
      fecha_creacion_mpc
    )
    VALUES (
      v_cod_mpc,
      p_cod_modulo_permiso,
      p_cod_campo,
      now()
    );    

  	RETURN v_cod_mpc;

  	EXCEPTION
  	WHEN OTHERS THEN
    	--GET STACKED DIAGNOSTICS _c = PG_EXCEPTION_CONTEXT;
    	--ress := 'error|motivo error '||SQLERRM||'codigo error '||SQLSTATE||'detalles '||_c;
        v_cod_mpc := -1;
    	RETURN v_cod_mpc;
    
    

END;
$$;


ALTER FUNCTION public.guardar_permisos_rol_campos(p_cod_modulo_permiso integer, p_cod_campo integer, p_datos_session text) OWNER TO sibica;

--
-- TOC entry 538 (class 1255 OID 16576)
-- Name: hasbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hasbbox(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_hasBBOX';


ALTER FUNCTION public.hasbbox(geometry) OWNER TO postgres;

--
-- TOC entry 542 (class 1255 OID 16580)
-- Name: height(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION height(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getHeight';


ALTER FUNCTION public.height(chip) OWNER TO postgres;

--
-- TOC entry 923 (class 1255 OID 17016)
-- Name: interiorringn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION interiorringn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_interiorringn_polygon';


ALTER FUNCTION public.interiorringn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 788 (class 1255 OID 16866)
-- Name: intersection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intersection(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'intersection';


ALTER FUNCTION public.intersection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 840 (class 1255 OID 16933)
-- Name: intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intersects(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'intersects';


ALTER FUNCTION public.intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 941 (class 1255 OID 17034)
-- Name: isclosed(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isclosed(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_isclosed_linestring';


ALTER FUNCTION public.isclosed(geometry) OWNER TO postgres;

--
-- TOC entry 943 (class 1255 OID 17036)
-- Name: isempty(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isempty(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_isempty';


ALTER FUNCTION public.isempty(geometry) OWNER TO postgres;

--
-- TOC entry 865 (class 1255 OID 16958)
-- Name: isring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isring(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'isring';


ALTER FUNCTION public.isring(geometry) OWNER TO postgres;

--
-- TOC entry 869 (class 1255 OID 16962)
-- Name: issimple(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION issimple(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'issimple';


ALTER FUNCTION public.issimple(geometry) OWNER TO postgres;

--
-- TOC entry 861 (class 1255 OID 16954)
-- Name: isvalid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isvalid(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'isvalid';


ALTER FUNCTION public.isvalid(geometry) OWNER TO postgres;

--
-- TOC entry 567 (class 1255 OID 16605)
-- Name: length(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.length(geometry) OWNER TO postgres;

--
-- TOC entry 565 (class 1255 OID 16603)
-- Name: length2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.length2d(geometry) OWNER TO postgres;

--
-- TOC entry 573 (class 1255 OID 16611)
-- Name: length2d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length2d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length2d_ellipsoid';


ALTER FUNCTION public.length2d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 563 (class 1255 OID 16601)
-- Name: length3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.length3d(geometry) OWNER TO postgres;

--
-- TOC entry 569 (class 1255 OID 16607)
-- Name: length3d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length3d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.length3d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 571 (class 1255 OID 16609)
-- Name: length_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.length_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 777 (class 1255 OID 16855)
-- Name: line_interpolate_point(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_interpolate_point(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_interpolate_point';


ALTER FUNCTION public.line_interpolate_point(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 781 (class 1255 OID 16859)
-- Name: line_locate_point(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_locate_point(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_locate_point';


ALTER FUNCTION public.line_locate_point(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 779 (class 1255 OID 16857)
-- Name: line_substring(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_substring(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_substring';


ALTER FUNCTION public.line_substring(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 658 (class 1255 OID 16696)
-- Name: linefrommultipoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefrommultipoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_from_mpoint';


ALTER FUNCTION public.linefrommultipoint(geometry) OWNER TO postgres;

--
-- TOC entry 967 (class 1255 OID 17060)
-- Name: linefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'LINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromtext(text) OWNER TO postgres;

--
-- TOC entry 969 (class 1255 OID 17062)
-- Name: linefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1018 (class 1255 OID 17111)
-- Name: linefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1016 (class 1255 OID 17109)
-- Name: linefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 680 (class 1255 OID 16718)
-- Name: linemerge(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linemerge(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'linemerge';


ALTER FUNCTION public.linemerge(geometry) OWNER TO postgres;

--
-- TOC entry 971 (class 1255 OID 17064)
-- Name: linestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT LineFromText($1)$_$;


ALTER FUNCTION public.linestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 972 (class 1255 OID 17065)
-- Name: linestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT LineFromText($1, $2)$_$;


ALTER FUNCTION public.linestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1022 (class 1255 OID 17115)
-- Name: linestringfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linestringfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1020 (class 1255 OID 17113)
-- Name: linestringfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linestringfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 785 (class 1255 OID 16863)
-- Name: locate_along_measure(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION locate_along_measure(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.locate_along_measure(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 783 (class 1255 OID 16861)
-- Name: locate_between_measures(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION locate_between_measures(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.locate_between_measures(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1076 (class 1255 OID 17168)
-- Name: lockrow(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text) OWNER TO postgres;

--
-- TOC entry 4739 (class 0 OID 0)
-- Dependencies: 1076
-- Name: FUNCTION lockrow(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text) IS 'args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table';


--
-- TOC entry 1075 (class 1255 OID 17167)
-- Name: lockrow(text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text, text) OWNER TO postgres;

--
-- TOC entry 1077 (class 1255 OID 17169)
-- Name: lockrow(text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $_$;


ALTER FUNCTION public.lockrow(text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 4740 (class 0 OID 0)
-- Dependencies: 1077
-- Name: FUNCTION lockrow(text, text, text, timestamp without time zone); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text, timestamp without time zone) IS 'args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';


--
-- TOC entry 1074 (class 1255 OID 17166)
-- Name: lockrow(text, text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.lockrow(text, text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 4741 (class 0 OID 0)
-- Dependencies: 1074
-- Name: FUNCTION lockrow(text, text, text, text, timestamp without time zone); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) IS 'args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';


--
-- TOC entry 1083 (class 1255 OID 17176)
-- Name: longtransactionsenabled(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION longtransactionsenabled() RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$$;


ALTER FUNCTION public.longtransactionsenabled() OWNER TO postgres;

--
-- TOC entry 525 (class 1255 OID 16542)
-- Name: lwgeom_gist_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_compress(internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_compress';


ALTER FUNCTION public.lwgeom_gist_compress(internal) OWNER TO postgres;

--
-- TOC entry 524 (class 1255 OID 16541)
-- Name: lwgeom_gist_consistent(internal, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_consistent(internal, geometry, integer) RETURNS boolean
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_consistent';


ALTER FUNCTION public.lwgeom_gist_consistent(internal, geometry, integer) OWNER TO postgres;

--
-- TOC entry 530 (class 1255 OID 16547)
-- Name: lwgeom_gist_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_decompress(internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_decompress';


ALTER FUNCTION public.lwgeom_gist_decompress(internal) OWNER TO postgres;

--
-- TOC entry 526 (class 1255 OID 16543)
-- Name: lwgeom_gist_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_penalty';


ALTER FUNCTION public.lwgeom_gist_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 527 (class 1255 OID 16544)
-- Name: lwgeom_gist_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_picksplit(internal, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_picksplit';


ALTER FUNCTION public.lwgeom_gist_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 529 (class 1255 OID 16546)
-- Name: lwgeom_gist_same(box2d, box2d, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_same(box2d, box2d, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_same';


ALTER FUNCTION public.lwgeom_gist_same(box2d, box2d, internal) OWNER TO postgres;

--
-- TOC entry 528 (class 1255 OID 16545)
-- Name: lwgeom_gist_union(bytea, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_union(bytea, internal) RETURNS internal
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_union';


ALTER FUNCTION public.lwgeom_gist_union(bytea, internal) OWNER TO postgres;

--
-- TOC entry 935 (class 1255 OID 17028)
-- Name: m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.m(geometry) OWNER TO postgres;

--
-- TOC entry 651 (class 1255 OID 16689)
-- Name: makebox2d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makebox2d(geometry, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_construct';


ALTER FUNCTION public.makebox2d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 653 (class 1255 OID 16691)
-- Name: makebox3d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makebox3d(geometry, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_construct';


ALTER FUNCTION public.makebox3d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 660 (class 1255 OID 16698)
-- Name: makeline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makeline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makeline';


ALTER FUNCTION public.makeline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 655 (class 1255 OID 16693)
-- Name: makeline_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makeline_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.makeline_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 643 (class 1255 OID 16681)
-- Name: makepoint(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 645 (class 1255 OID 16683)
-- Name: makepoint(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 647 (class 1255 OID 16685)
-- Name: makepoint(double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 649 (class 1255 OID 16687)
-- Name: makepointm(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepointm(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint3dm';


ALTER FUNCTION public.makepointm(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 673 (class 1255 OID 16711)
-- Name: makepolygon(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepolygon(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.makepolygon(geometry) OWNER TO postgres;

--
-- TOC entry 671 (class 1255 OID 16709)
-- Name: makepolygon(geometry, geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepolygon(geometry, geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.makepolygon(geometry, geometry[]) OWNER TO postgres;

--
-- TOC entry 1060 (class 1255 OID 17152)
-- Name: max_distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION max_distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_maxdistance2d_linestring';


ALTER FUNCTION public.max_distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 555 (class 1255 OID 16593)
-- Name: mem_size(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mem_size(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_mem_size';


ALTER FUNCTION public.mem_size(geometry) OWNER TO postgres;

--
-- TOC entry 983 (class 1255 OID 17076)
-- Name: mlinefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTILINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromtext(text) OWNER TO postgres;

--
-- TOC entry 981 (class 1255 OID 17074)
-- Name: mlinefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1046 (class 1255 OID 17138)
-- Name: mlinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1044 (class 1255 OID 17136)
-- Name: mlinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 991 (class 1255 OID 17084)
-- Name: mpointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromtext(text) OWNER TO postgres;

--
-- TOC entry 989 (class 1255 OID 17082)
-- Name: mpointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1,$2)) = 'MULTIPOINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1035 (class 1255 OID 17127)
-- Name: mpointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1032 (class 1255 OID 17125)
-- Name: mpointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 998 (class 1255 OID 17091)
-- Name: mpolyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromtext(text) OWNER TO postgres;

--
-- TOC entry 996 (class 1255 OID 17089)
-- Name: mpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1050 (class 1255 OID 17142)
-- Name: mpolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1048 (class 1255 OID 17140)
-- Name: mpolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 608 (class 1255 OID 16646)
-- Name: multi(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multi(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_multi';


ALTER FUNCTION public.multi(geometry) OWNER TO postgres;

--
-- TOC entry 1042 (class 1255 OID 17134)
-- Name: multilinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multilinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1041 (class 1255 OID 17133)
-- Name: multilinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multilinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 985 (class 1255 OID 17078)
-- Name: multilinestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MLineFromText($1)$_$;


ALTER FUNCTION public.multilinestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 987 (class 1255 OID 17080)
-- Name: multilinestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MLineFromText($1, $2)$_$;


ALTER FUNCTION public.multilinestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 994 (class 1255 OID 17087)
-- Name: multipointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1)$_$;


ALTER FUNCTION public.multipointfromtext(text) OWNER TO postgres;

--
-- TOC entry 993 (class 1255 OID 17086)
-- Name: multipointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1, $2)$_$;


ALTER FUNCTION public.multipointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1039 (class 1255 OID 17131)
-- Name: multipointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1037 (class 1255 OID 17129)
-- Name: multipointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1054 (class 1255 OID 17146)
-- Name: multipolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1052 (class 1255 OID 17144)
-- Name: multipolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1002 (class 1255 OID 17095)
-- Name: multipolygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1)$_$;


ALTER FUNCTION public.multipolygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 1000 (class 1255 OID 17093)
-- Name: multipolygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1, $2)$_$;


ALTER FUNCTION public.multipolygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 626 (class 1255 OID 16664)
-- Name: ndims(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ndims(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.ndims(geometry) OWNER TO postgres;

--
-- TOC entry 622 (class 1255 OID 16660)
-- Name: noop(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION noop(geometry) RETURNS geometry
    LANGUAGE c STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_noop';


ALTER FUNCTION public.noop(geometry) OWNER TO postgres;

--
-- TOC entry 559 (class 1255 OID 16597)
-- Name: npoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION npoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_npoints';


ALTER FUNCTION public.npoints(geometry) OWNER TO postgres;

--
-- TOC entry 561 (class 1255 OID 16599)
-- Name: nrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_nrings';


ALTER FUNCTION public.nrings(geometry) OWNER TO postgres;

--
-- TOC entry 911 (class 1255 OID 17004)
-- Name: numgeometries(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numgeometries(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numgeometries_collection';


ALTER FUNCTION public.numgeometries(geometry) OWNER TO postgres;

--
-- TOC entry 921 (class 1255 OID 17014)
-- Name: numinteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numinteriorring(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.numinteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 919 (class 1255 OID 17012)
-- Name: numinteriorrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numinteriorrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.numinteriorrings(geometry) OWNER TO postgres;

--
-- TOC entry 909 (class 1255 OID 17002)
-- Name: numpoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numpoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numpoints_linestring';


ALTER FUNCTION public.numpoints(geometry) OWNER TO postgres;

--
-- TOC entry 858 (class 1255 OID 16951)
-- Name: overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "overlaps"(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'overlaps';


ALTER FUNCTION public."overlaps"(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 579 (class 1255 OID 16617)
-- Name: perimeter(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.perimeter(geometry) OWNER TO postgres;

--
-- TOC entry 577 (class 1255 OID 16615)
-- Name: perimeter2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.perimeter2d(geometry) OWNER TO postgres;

--
-- TOC entry 575 (class 1255 OID 16613)
-- Name: perimeter3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.perimeter3d(geometry) OWNER TO postgres;

--
-- TOC entry 821 (class 1255 OID 16905)
-- Name: pgis_geometry_accum_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_accum_finalfn(pgis_abs) RETURNS geometry[]
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_accum_finalfn';


ALTER FUNCTION public.pgis_geometry_accum_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 820 (class 1255 OID 16904)
-- Name: pgis_geometry_accum_transfn(pgis_abs, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) RETURNS pgis_abs
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_accum_transfn';


ALTER FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry) OWNER TO postgres;

--
-- TOC entry 823 (class 1255 OID 16907)
-- Name: pgis_geometry_collect_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_collect_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_collect_finalfn';


ALTER FUNCTION public.pgis_geometry_collect_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 825 (class 1255 OID 16909)
-- Name: pgis_geometry_makeline_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_makeline_finalfn';


ALTER FUNCTION public.pgis_geometry_makeline_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 824 (class 1255 OID 16908)
-- Name: pgis_geometry_polygonize_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_polygonize_finalfn';


ALTER FUNCTION public.pgis_geometry_polygonize_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 822 (class 1255 OID 16906)
-- Name: pgis_geometry_union_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_union_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_geometry_union_finalfn';


ALTER FUNCTION public.pgis_geometry_union_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 591 (class 1255 OID 16629)
-- Name: point_inside_circle(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION point_inside_circle(geometry, double precision, double precision, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_inside_circle_point';


ALTER FUNCTION public.point_inside_circle(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 963 (class 1255 OID 17056)
-- Name: pointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromtext(text) OWNER TO postgres;

--
-- TOC entry 965 (class 1255 OID 17058)
-- Name: pointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1014 (class 1255 OID 17107)
-- Name: pointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1012 (class 1255 OID 17105)
-- Name: pointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 927 (class 1255 OID 17020)
-- Name: pointn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_pointn_linestring';


ALTER FUNCTION public.pointn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 867 (class 1255 OID 16960)
-- Name: pointonsurface(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointonsurface(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pointonsurface';


ALTER FUNCTION public.pointonsurface(geometry) OWNER TO postgres;

--
-- TOC entry 973 (class 1255 OID 17066)
-- Name: polyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromtext(text) OWNER TO postgres;

--
-- TOC entry 975 (class 1255 OID 17068)
-- Name: polyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1026 (class 1255 OID 17119)
-- Name: polyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1024 (class 1255 OID 17117)
-- Name: polyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 979 (class 1255 OID 17072)
-- Name: polygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1)$_$;


ALTER FUNCTION public.polygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 977 (class 1255 OID 17070)
-- Name: polygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1, $2)$_$;


ALTER FUNCTION public.polygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1030 (class 1255 OID 17123)
-- Name: polygonfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polygonfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1028 (class 1255 OID 17121)
-- Name: polygonfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polygonfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 677 (class 1255 OID 16715)
-- Name: polygonize_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonize_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.polygonize_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 706 (class 1255 OID 16765)
-- Name: populate_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	EXECUTE 'TRUNCATE geometry_columns';

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
	AND t.typname = 'geometry'
	AND a.attisdropped = false
	AND a.atttypid = t.oid
	AND a.attrelid = c.oid
	AND c.relnamespace = n.oid
	AND n.nspname NOT ILIKE 'pg_temp%';

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	-- Add views to geometry columns table
	RAISE DEBUG 'Processing Views.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	IF oldcount > inserted THEN
	stale = oldcount-inserted;
	ELSE
	stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted|| ' conflicts:'||probed-inserted|| ' deleted:'||stale;
END

$$;


ALTER FUNCTION public.populate_geometry_columns() OWNER TO postgres;

--
-- TOC entry 4742 (class 0 OID 0)
-- Dependencies: 706
-- Name: FUNCTION populate_geometry_columns(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION populate_geometry_columns() IS 'Ensures geometry columns have appropriate spatial constraints and exist in the geometry_columns table.';


--
-- TOC entry 707 (class 1255 OID 16766)
-- Name: populate_geometry_columns(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns(tbl_oid oid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

	RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;

	gc_is_valid := true;

	-- Try to find srid check from system tables (pg_constraint)
	gsrid :=
		(SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %');
	IF (gsrid IS NULL) THEN
		-- Try to find srid from the geometry itself
		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		-- Try to apply srid check to column
		IF (gsrid IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || '
						 CHECK (srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find ndims check from system tables (pg_constraint)
	gndims :=
		(SELECT replace(split_part(s.consrc, ' = ', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %');
	IF (gndims IS NULL) THEN
		-- Try to find ndims from the geometry itself
		EXECUTE 'SELECT st_ndims(' || quote_ident(gcs.attname) || ') As ndims
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		-- Try to apply ndims check to column
		IF (gndims IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
						 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find geotype check from system tables (pg_constraint)
	gtype :=
		(SELECT replace(split_part(s.consrc, '''', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %');
	IF (gtype IS NULL) THEN
		-- Try to find geotype from the geometry itself
		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ') As geometrytype
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;
		--IF (gtype IS NULL) THEN
		--    gtype := 'GEOMETRY';
		--END IF;

		-- Try to apply geometrytype check to column
		IF (gtype IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
				CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
			EXCEPTION
				WHEN check_violation THEN
					-- No geometry check can be applied. This column contains a number of geometry types.
					RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
			END;
		END IF;
	END IF;

	IF (gsrid IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gndims IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the number of dimensions', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gtype IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the geometry type', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSE
		-- Only insert into geometry_columns if table constraints could be applied.
		IF (gc_is_valid) THEN
			INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type)
			VALUES ('', gcs.nspname, gcs.relname, gcs.attname, gndims, gsrid, gtype);
			inserted := inserted + 1;
		END IF;
	END IF;
	END LOOP;

	-- Add views to geometry columns table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
		RAISE DEBUG 'Processing view %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;
	  
		EXECUTE 'SELECT st_ndims(' || quote_ident(gcs.attname) || ') As ndims
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		EXECUTE 'SELECT st_srid(' || quote_ident(gcs.attname) || ') As srid
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ') As geometrytype
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;

		IF (gndims IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine ndims', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gsrid IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gtype IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine gtype', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSE
			query := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) ' ||
					 'VALUES ('''', ' || quote_literal(gcs.nspname) || ',' || quote_literal(gcs.relname) || ',' || quote_literal(gcs.attname) || ',' || gndims || ',' || gsrid || ',' || quote_literal(gtype) || ')';
			EXECUTE query;
			inserted := inserted + 1;
		END IF;
	END LOOP;

	RETURN inserted;
END

$$;


ALTER FUNCTION public.populate_geometry_columns(tbl_oid oid) OWNER TO postgres;

--
-- TOC entry 4743 (class 0 OID 0)
-- Dependencies: 707
-- Name: FUNCTION populate_geometry_columns(tbl_oid oid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION populate_geometry_columns(tbl_oid oid) IS 'args: relation_oid - Ensures geometry columns have appropriate spatial constraints and exist in the geometry_columns table.';


--
-- TOC entry 532 (class 1255 OID 16570)
-- Name: postgis_addbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_addbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addBBOX';


ALTER FUNCTION public.postgis_addbbox(geometry) OWNER TO postgres;

--
-- TOC entry 4744 (class 0 OID 0)
-- Dependencies: 532
-- Name: FUNCTION postgis_addbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_addbbox(geometry) IS 'args: geomA - Add bounding box to the geometry.';


--
-- TOC entry 642 (class 1255 OID 16680)
-- Name: postgis_cache_bbox(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_cache_bbox() RETURNS trigger
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'cache_bbox';


ALTER FUNCTION public.postgis_cache_bbox() OWNER TO postgres;

--
-- TOC entry 534 (class 1255 OID 16572)
-- Name: postgis_dropbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_dropbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dropBBOX';


ALTER FUNCTION public.postgis_dropbbox(geometry) OWNER TO postgres;

--
-- TOC entry 4745 (class 0 OID 0)
-- Dependencies: 534
-- Name: FUNCTION postgis_dropbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_dropbbox(geometry) IS 'args: geomA - Drop the bounding box cache from the geometry.';


--
-- TOC entry 735 (class 1255 OID 16796)
-- Name: postgis_full_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_full_version() RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
	libver text;
	projver text;
	geosver text;
	libxmlver text;
	usestats bool;
	dbproc text;
	relproc text;
	fullver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_uses_stats() INTO usestats;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;

	fullver = 'POSTGIS="' || libver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF usestats THEN
		fullver = fullver || ' USE_STATS';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (procs from ' || dbproc || ' need upgrade)';
	END IF;

	RETURN fullver;
END
$$;


ALTER FUNCTION public.postgis_full_version() OWNER TO postgres;

--
-- TOC entry 4746 (class 0 OID 0)
-- Dependencies: 735
-- Name: FUNCTION postgis_full_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_full_version() IS 'Reports full postgis version and build configuration infos.';


--
-- TOC entry 713 (class 1255 OID 16792)
-- Name: postgis_geos_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_geos_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_geos_version';


ALTER FUNCTION public.postgis_geos_version() OWNER TO postgres;

--
-- TOC entry 4747 (class 0 OID 0)
-- Dependencies: 713
-- Name: FUNCTION postgis_geos_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_geos_version() IS 'Returns the version number of the GEOS library.';


--
-- TOC entry 537 (class 1255 OID 16575)
-- Name: postgis_getbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_getbbox(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.postgis_getbbox(geometry) OWNER TO postgres;

--
-- TOC entry 494 (class 1255 OID 16499)
-- Name: postgis_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.postgis_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 493 (class 1255 OID 16498)
-- Name: postgis_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.postgis_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 539 (class 1255 OID 16577)
-- Name: postgis_hasbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_hasbbox(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_hasBBOX';


ALTER FUNCTION public.postgis_hasbbox(geometry) OWNER TO postgres;

--
-- TOC entry 4748 (class 0 OID 0)
-- Dependencies: 539
-- Name: FUNCTION postgis_hasbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_hasbbox(geometry) IS 'args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.';


--
-- TOC entry 716 (class 1255 OID 16795)
-- Name: postgis_lib_build_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_lib_build_date() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_lib_build_date';


ALTER FUNCTION public.postgis_lib_build_date() OWNER TO postgres;

--
-- TOC entry 4749 (class 0 OID 0)
-- Dependencies: 716
-- Name: FUNCTION postgis_lib_build_date(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_lib_build_date() IS 'Returns build date of the PostGIS library.';


--
-- TOC entry 703 (class 1255 OID 16789)
-- Name: postgis_lib_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_lib_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_lib_version';


ALTER FUNCTION public.postgis_lib_version() OWNER TO postgres;

--
-- TOC entry 4750 (class 0 OID 0)
-- Dependencies: 703
-- Name: FUNCTION postgis_lib_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_lib_version() IS 'Returns the version number of the PostGIS library.';


--
-- TOC entry 714 (class 1255 OID 16793)
-- Name: postgis_libxml_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_libxml_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_libxml_version';


ALTER FUNCTION public.postgis_libxml_version() OWNER TO postgres;

--
-- TOC entry 4751 (class 0 OID 0)
-- Dependencies: 714
-- Name: FUNCTION postgis_libxml_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_libxml_version() IS 'Returns the version number of the libxml2 library.';


--
-- TOC entry 623 (class 1255 OID 16661)
-- Name: postgis_noop(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_noop(geometry) RETURNS geometry
    LANGUAGE c STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_noop';


ALTER FUNCTION public.postgis_noop(geometry) OWNER TO postgres;

--
-- TOC entry 733 (class 1255 OID 16787)
-- Name: postgis_proj_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_proj_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_proj_version';


ALTER FUNCTION public.postgis_proj_version() OWNER TO postgres;

--
-- TOC entry 4752 (class 0 OID 0)
-- Dependencies: 733
-- Name: FUNCTION postgis_proj_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_proj_version() IS 'Returns the version number of the PROJ4 library.';


--
-- TOC entry 715 (class 1255 OID 16794)
-- Name: postgis_scripts_build_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_build_date() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '2013-06-05 07:20:44'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_build_date() OWNER TO postgres;

--
-- TOC entry 4753 (class 0 OID 0)
-- Dependencies: 715
-- Name: FUNCTION postgis_scripts_build_date(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_build_date() IS 'Returns build date of the PostGIS scripts.';


--
-- TOC entry 734 (class 1255 OID 16788)
-- Name: postgis_scripts_installed(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_installed() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '1.5 r10612'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_installed() OWNER TO postgres;

--
-- TOC entry 4754 (class 0 OID 0)
-- Dependencies: 734
-- Name: FUNCTION postgis_scripts_installed(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_installed() IS 'Returns version of the postgis scripts installed in this database.';


--
-- TOC entry 704 (class 1255 OID 16790)
-- Name: postgis_scripts_released(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_released() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_scripts_released';


ALTER FUNCTION public.postgis_scripts_released() OWNER TO postgres;

--
-- TOC entry 4755 (class 0 OID 0)
-- Dependencies: 704
-- Name: FUNCTION postgis_scripts_released(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_released() IS 'Returns the version number of the postgis.sql script released with the installed postgis lib.';


--
-- TOC entry 729 (class 1255 OID 16783)
-- Name: postgis_transform_geometry(geometry, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_transform_geometry(geometry, text, text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'transform_geom';


ALTER FUNCTION public.postgis_transform_geometry(geometry, text, text, integer) OWNER TO postgres;

--
-- TOC entry 712 (class 1255 OID 16791)
-- Name: postgis_uses_stats(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_uses_stats() RETURNS boolean
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_uses_stats';


ALTER FUNCTION public.postgis_uses_stats() OWNER TO postgres;

--
-- TOC entry 4756 (class 0 OID 0)
-- Dependencies: 712
-- Name: FUNCTION postgis_uses_stats(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_uses_stats() IS 'Returns TRUE if STATS usage has been enabled.';


--
-- TOC entry 732 (class 1255 OID 16786)
-- Name: postgis_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'postgis_version';


ALTER FUNCTION public.postgis_version() OWNER TO postgres;

--
-- TOC entry 4757 (class 0 OID 0)
-- Dependencies: 732
-- Name: FUNCTION postgis_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_version() IS 'Returns PostGIS version number and compile-time options.';


--
-- TOC entry 708 (class 1255 OID 16768)
-- Name: probe_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION probe_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(%srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'
		;

	INSERT INTO geometry_columns SELECT
		''::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  ' =)' from
			replace(replace(split_part(
				sridcheck.consrc, ' = ', 2), ')', ''), '(', ''))::integer AS srid,
		trim(both ' =)''' from substr(typecheck.consrc,
			strpos(typecheck.consrc, '='),
			strpos(typecheck.consrc, '::')-
			strpos(typecheck.consrc, '=')
			))::varchar as type
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(st_srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount > probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:'||probed::text||
		' inserted:'||inserted::text||
		' conflicts:'||(probed-inserted)::text||
		' stale:'||stale::text;
END

$$;


ALTER FUNCTION public.probe_geometry_columns() OWNER TO postgres;

--
-- TOC entry 4758 (class 0 OID 0)
-- Dependencies: 708
-- Name: FUNCTION probe_geometry_columns(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION probe_geometry_columns() IS 'Scans all tables with PostGIS geometry constraints and adds them to the geometry_columns table if they are not there.';


--
-- TOC entry 829 (class 1255 OID 16922)
-- Name: relate(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION relate(geometry, geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'relate_full';


ALTER FUNCTION public.relate(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 831 (class 1255 OID 16924)
-- Name: relate(geometry, geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION relate(geometry, geometry, text) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'relate_pattern';


ALTER FUNCTION public.relate(geometry, geometry, text) OWNER TO postgres;

--
-- TOC entry 666 (class 1255 OID 16704)
-- Name: removepoint(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION removepoint(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_removepoint';


ALTER FUNCTION public.removepoint(geometry, integer) OWNER TO postgres;

--
-- TOC entry 702 (class 1255 OID 16763)
-- Name: rename_geometry_table_constraints(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rename_geometry_table_constraints() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$
SELECT 'rename_geometry_table_constraint() is obsoleted'::text
$$;


ALTER FUNCTION public.rename_geometry_table_constraints() OWNER TO postgres;

--
-- TOC entry 618 (class 1255 OID 16656)
-- Name: reverse(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reverse(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_reverse';


ALTER FUNCTION public.reverse(geometry) OWNER TO postgres;

--
-- TOC entry 434 (class 1255 OID 16418)
-- Name: rotate(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotate(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT rotateZ($1, $2)$_$;


ALTER FUNCTION public.rotate(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 436 (class 1255 OID 16420)
-- Name: rotatex(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatex(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$_$;


ALTER FUNCTION public.rotatex(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 438 (class 1255 OID 16422)
-- Name: rotatey(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatey(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$_$;


ALTER FUNCTION public.rotatey(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 432 (class 1255 OID 16416)
-- Name: rotatez(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatez(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$_$;


ALTER FUNCTION public.rotatez(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 446 (class 1255 OID 16430)
-- Name: scale(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION scale(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT scale($1, $2, $3, 1)$_$;


ALTER FUNCTION public.scale(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 444 (class 1255 OID 16428)
-- Name: scale(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION scale(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$_$;


ALTER FUNCTION public.scale(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1096 (class 1255 OID 17189)
-- Name: se_envelopesintersect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_envelopesintersect(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT $1 && $2
	$_$;


ALTER FUNCTION public.se_envelopesintersect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1090 (class 1255 OID 17183)
-- Name: se_is3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_is3d(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_hasz';


ALTER FUNCTION public.se_is3d(geometry) OWNER TO postgres;

--
-- TOC entry 1091 (class 1255 OID 17184)
-- Name: se_ismeasured(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_ismeasured(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_hasm';


ALTER FUNCTION public.se_ismeasured(geometry) OWNER TO postgres;

--
-- TOC entry 1097 (class 1255 OID 17190)
-- Name: se_locatealong(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_locatealong(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.se_locatealong(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1098 (class 1255 OID 17191)
-- Name: se_locatebetween(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_locatebetween(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.se_locatebetween(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1094 (class 1255 OID 17187)
-- Name: se_m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.se_m(geometry) OWNER TO postgres;

--
-- TOC entry 1093 (class 1255 OID 17186)
-- Name: se_z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.se_z(geometry) OWNER TO postgres;

--
-- TOC entry 775 (class 1255 OID 16853)
-- Name: segmentize(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION segmentize(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_segmentize2d';


ALTER FUNCTION public.segmentize(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 553 (class 1255 OID 16591)
-- Name: setfactor(chip, real); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setfactor(chip, real) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_setFactor';


ALTER FUNCTION public.setfactor(chip, real) OWNER TO postgres;

--
-- TOC entry 668 (class 1255 OID 16706)
-- Name: setpoint(geometry, integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setpoint(geometry, integer, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_setpoint_linestring';


ALTER FUNCTION public.setpoint(geometry, integer, geometry) OWNER TO postgres;

--
-- TOC entry 552 (class 1255 OID 16590)
-- Name: setsrid(chip, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setsrid(chip, integer) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_setSRID';


ALTER FUNCTION public.setsrid(chip, integer) OWNER TO postgres;

--
-- TOC entry 947 (class 1255 OID 17040)
-- Name: setsrid(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setsrid(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_setSRID';


ALTER FUNCTION public.setsrid(geometry, integer) OWNER TO postgres;

--
-- TOC entry 450 (class 1255 OID 16434)
-- Name: shift_longitude(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION shift_longitude(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_longitude_shift';


ALTER FUNCTION public.shift_longitude(geometry) OWNER TO postgres;

--
-- TOC entry 766 (class 1255 OID 16843)
-- Name: simplify(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION simplify(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_simplify2d';


ALTER FUNCTION public.simplify(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 771 (class 1255 OID 16849)
-- Name: snaptogrid(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT SnapToGrid($1, 0, 0, $2, $2)$_$;


ALTER FUNCTION public.snaptogrid(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 769 (class 1255 OID 16847)
-- Name: snaptogrid(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT SnapToGrid($1, 0, 0, $2, $3)$_$;


ALTER FUNCTION public.snaptogrid(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 767 (class 1255 OID 16845)
-- Name: snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_snaptogrid';


ALTER FUNCTION public.snaptogrid(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 773 (class 1255 OID 16851)
-- Name: snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_snaptogrid_pointoff';


ALTER FUNCTION public.snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1210 (class 1255 OID 196863)
-- Name: sp_ascii(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sp_ascii(character varying) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT TRANSLATE($1, 'áéíóúÁÉÍÓÚçÇ','aeiouAEIOUcC');
$_$;


ALTER FUNCTION public.sp_ascii(character varying) OWNER TO postgres;

--
-- TOC entry 4759 (class 0 OID 0)
-- Dependencies: 1210
-- Name: FUNCTION sp_ascii(character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION sp_ascii(character varying) IS 'Función que reemplaza caracteres acentuados por sus equivalentes no acentuados y se usa para comparación en lugar de TO_ASCII, ya que esta no funciona correctamente cuando la base de datos está codificada con UTF8.
2019-03-07: Adicionada por Julio Muñoz para resolver el inconveniente en las búsquedas con acentuación en el Geovisor IDESC.';


--
-- TOC entry 540 (class 1255 OID 16578)
-- Name: srid(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION srid(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getSRID';


ALTER FUNCTION public.srid(chip) OWNER TO postgres;

--
-- TOC entry 945 (class 1255 OID 17038)
-- Name: srid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION srid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.srid(geometry) OWNER TO postgres;

--
-- TOC entry 1196 (class 1255 OID 154375)
-- Name: srid_test(); Type: FUNCTION; Schema: public; Owner: topografia
--

CREATE FUNCTION srid_test(OUT bad_srid integer, OUT error text) RETURNS SETOF record
    LANGUAGE plpgsql STABLE
    AS $$
 DECLARE
     geom  geometry := GeomFromEWKT('SRID=4326;POINT(-100 40)');
     rec   record;
 BEGIN
     FOR rec IN SELECT srid FROM spatial_ref_sys LOOP
         BEGIN
             PERFORM transform(geom, rec.srid);
        EXCEPTION
                   WHEN others THEN
             bad_srid := rec.srid;
             error := SQLERRM;
             RETURN NEXT;
         END;
     END LOOP;
 END;
 $$;


ALTER FUNCTION public.srid_test(OUT bad_srid integer, OUT error text) OWNER TO topografia;

--
-- TOC entry 787 (class 1255 OID 16865)
-- Name: st_addmeasure(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addmeasure(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_AddMeasure';


ALTER FUNCTION public.st_addmeasure(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4760 (class 0 OID 0)
-- Dependencies: 787
-- Name: FUNCTION st_addmeasure(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addmeasure(geometry, double precision, double precision) IS 'args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.';


--
-- TOC entry 663 (class 1255 OID 16701)
-- Name: st_addpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.st_addpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4761 (class 0 OID 0)
-- Dependencies: 663
-- Name: FUNCTION st_addpoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addpoint(geometry, geometry) IS 'args: linestring, point - Adds a point to a LineString before point <position> (0-based index).';


--
-- TOC entry 665 (class 1255 OID 16703)
-- Name: st_addpoint(geometry, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addpoint(geometry, geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.st_addpoint(geometry, geometry, integer) OWNER TO postgres;

--
-- TOC entry 4762 (class 0 OID 0)
-- Dependencies: 665
-- Name: FUNCTION st_addpoint(geometry, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addpoint(geometry, geometry, integer) IS 'args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).';


--
-- TOC entry 431 (class 1255 OID 16415)
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$_$;


ALTER FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4763 (class 0 OID 0)
-- Dependencies: 431
-- Name: FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) IS 'args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';


--
-- TOC entry 429 (class 1255 OID 16413)
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_affine';


ALTER FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4764 (class 0 OID 0)
-- Dependencies: 429
-- Name: FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) IS 'args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';


--
-- TOC entry 1171 (class 1255 OID 17300)
-- Name: st_area(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_Area($1, true)$_$;


ALTER FUNCTION public.st_area(geography) OWNER TO postgres;

--
-- TOC entry 4765 (class 0 OID 0)
-- Dependencies: 1171
-- Name: FUNCTION st_area(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geography) IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 584 (class 1255 OID 16622)
-- Name: st_area(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.st_area(geometry) OWNER TO postgres;

--
-- TOC entry 4766 (class 0 OID 0)
-- Dependencies: 584
-- Name: FUNCTION st_area(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geometry) IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 1172 (class 1255 OID 17301)
-- Name: st_area(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Area($1::geometry);  $_$;


ALTER FUNCTION public.st_area(text) OWNER TO postgres;

--
-- TOC entry 1170 (class 1255 OID 17299)
-- Name: st_area(geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geography, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_area';


ALTER FUNCTION public.st_area(geography, boolean) OWNER TO postgres;

--
-- TOC entry 4767 (class 0 OID 0)
-- Dependencies: 1170
-- Name: FUNCTION st_area(geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geography, boolean) IS 'args: g1, use_spheroid - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 582 (class 1255 OID 16620)
-- Name: st_area2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.st_area2d(geometry) OWNER TO postgres;

--
-- TOC entry 1111 (class 1255 OID 17209)
-- Name: st_asbinary(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geography) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_binary';


ALTER FUNCTION public.st_asbinary(geography) OWNER TO postgres;

--
-- TOC entry 4768 (class 0 OID 0)
-- Dependencies: 1111
-- Name: FUNCTION st_asbinary(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geography) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 950 (class 1255 OID 17043)
-- Name: st_asbinary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.st_asbinary(geometry) OWNER TO postgres;

--
-- TOC entry 4769 (class 0 OID 0)
-- Dependencies: 950
-- Name: FUNCTION st_asbinary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geometry) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 1112 (class 1255 OID 17210)
-- Name: st_asbinary(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(text) RETURNS bytea
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsBinary($1::geometry);  $_$;


ALTER FUNCTION public.st_asbinary(text) OWNER TO postgres;

--
-- TOC entry 952 (class 1255 OID 17045)
-- Name: st_asbinary(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.st_asbinary(geometry, text) OWNER TO postgres;

--
-- TOC entry 4770 (class 0 OID 0)
-- Dependencies: 952
-- Name: FUNCTION st_asbinary(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geometry, text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 631 (class 1255 OID 16669)
-- Name: st_asewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkb(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.st_asewkb(geometry) OWNER TO postgres;

--
-- TOC entry 4771 (class 0 OID 0)
-- Dependencies: 631
-- Name: FUNCTION st_asewkb(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkb(geometry) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';


--
-- TOC entry 637 (class 1255 OID 16675)
-- Name: st_asewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkb(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.st_asewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 4772 (class 0 OID 0)
-- Dependencies: 637
-- Name: FUNCTION st_asewkb(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkb(geometry, text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';


--
-- TOC entry 629 (class 1255 OID 16667)
-- Name: st_asewkt(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkt(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asEWKT';


ALTER FUNCTION public.st_asewkt(geometry) OWNER TO postgres;

--
-- TOC entry 4773 (class 0 OID 0)
-- Dependencies: 629
-- Name: FUNCTION st_asewkt(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkt(geometry) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';


--
-- TOC entry 1155 (class 1255 OID 17284)
-- Name: st_asgeojson(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geography) OWNER TO postgres;

--
-- TOC entry 4774 (class 0 OID 0)
-- Dependencies: 1155
-- Name: FUNCTION st_asgeojson(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography) IS 'args: g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 902 (class 1255 OID 16995)
-- Name: st_asgeojson(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geometry) OWNER TO postgres;

--
-- TOC entry 4775 (class 0 OID 0)
-- Dependencies: 902
-- Name: FUNCTION st_asgeojson(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry) IS 'args: g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1156 (class 1255 OID 17285)
-- Name: st_asgeojson(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGeoJson($1::geometry);  $_$;


ALTER FUNCTION public.st_asgeojson(text) OWNER TO postgres;

--
-- TOC entry 1157 (class 1255 OID 17286)
-- Name: st_asgeojson(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography) OWNER TO postgres;

--
-- TOC entry 4776 (class 0 OID 0)
-- Dependencies: 1157
-- Name: FUNCTION st_asgeojson(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography) IS 'args: gj_version, g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 903 (class 1255 OID 16996)
-- Name: st_asgeojson(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry) OWNER TO postgres;

--
-- TOC entry 4777 (class 0 OID 0)
-- Dependencies: 903
-- Name: FUNCTION st_asgeojson(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry) IS 'args: gj_version, g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1154 (class 1255 OID 17283)
-- Name: st_asgeojson(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geography, integer) OWNER TO postgres;

--
-- TOC entry 4778 (class 0 OID 0)
-- Dependencies: 1154
-- Name: FUNCTION st_asgeojson(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography, integer) IS 'args: g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 901 (class 1255 OID 16994)
-- Name: st_asgeojson(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4779 (class 0 OID 0)
-- Dependencies: 901
-- Name: FUNCTION st_asgeojson(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry, integer) IS 'args: g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1158 (class 1255 OID 17287)
-- Name: st_asgeojson(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 4780 (class 0 OID 0)
-- Dependencies: 1158
-- Name: FUNCTION st_asgeojson(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography, integer) IS 'args: gj_version, g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 904 (class 1255 OID 16997)
-- Name: st_asgeojson(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 4781 (class 0 OID 0)
-- Dependencies: 904
-- Name: FUNCTION st_asgeojson(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry, integer) IS 'args: gj_version, g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1159 (class 1255 OID 17288)
-- Name: st_asgeojson(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgeojson(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 4782 (class 0 OID 0)
-- Dependencies: 1159
-- Name: FUNCTION st_asgeojson(geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography, integer, integer) IS 'args: g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 905 (class 1255 OID 16998)
-- Name: st_asgeojson(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgeojson(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 4783 (class 0 OID 0)
-- Dependencies: 905
-- Name: FUNCTION st_asgeojson(geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry, integer, integer) IS 'args: g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1160 (class 1255 OID 17289)
-- Name: st_asgeojson(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 4784 (class 0 OID 0)
-- Dependencies: 1160
-- Name: FUNCTION st_asgeojson(integer, geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography, integer, integer) IS 'args: gj_version, g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 906 (class 1255 OID 16999)
-- Name: st_asgeojson(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 4785 (class 0 OID 0)
-- Dependencies: 906
-- Name: FUNCTION st_asgeojson(integer, geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry, integer, integer) IS 'args: gj_version, g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1141 (class 1255 OID 17270)
-- Name: st_asgml(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgml(geography) OWNER TO postgres;

--
-- TOC entry 4786 (class 0 OID 0)
-- Dependencies: 1141
-- Name: FUNCTION st_asgml(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geography) IS 'args: g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 887 (class 1255 OID 16980)
-- Name: st_asgml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgml(geometry) OWNER TO postgres;

--
-- TOC entry 4787 (class 0 OID 0)
-- Dependencies: 887
-- Name: FUNCTION st_asgml(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geometry) IS 'args: g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1142 (class 1255 OID 17271)
-- Name: st_asgml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGML($1::geometry);  $_$;


ALTER FUNCTION public.st_asgml(text) OWNER TO postgres;

--
-- TOC entry 1143 (class 1255 OID 17272)
-- Name: st_asgml(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgml(integer, geography) OWNER TO postgres;

--
-- TOC entry 4788 (class 0 OID 0)
-- Dependencies: 1143
-- Name: FUNCTION st_asgml(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography) IS 'args: version, g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 888 (class 1255 OID 16981)
-- Name: st_asgml(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry) OWNER TO postgres;

--
-- TOC entry 4789 (class 0 OID 0)
-- Dependencies: 888
-- Name: FUNCTION st_asgml(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry) IS 'args: version, g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1140 (class 1255 OID 17269)
-- Name: st_asgml(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgml(geography, integer) OWNER TO postgres;

--
-- TOC entry 4790 (class 0 OID 0)
-- Dependencies: 1140
-- Name: FUNCTION st_asgml(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geography, integer) IS 'args: g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 885 (class 1255 OID 16978)
-- Name: st_asgml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4791 (class 0 OID 0)
-- Dependencies: 885
-- Name: FUNCTION st_asgml(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geometry, integer) IS 'args: g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1144 (class 1255 OID 17273)
-- Name: st_asgml(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgml(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 4792 (class 0 OID 0)
-- Dependencies: 1144
-- Name: FUNCTION st_asgml(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography, integer) IS 'args: version, g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 889 (class 1255 OID 16982)
-- Name: st_asgml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 4793 (class 0 OID 0)
-- Dependencies: 889
-- Name: FUNCTION st_asgml(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry, integer) IS 'args: version, g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1145 (class 1255 OID 17274)
-- Name: st_asgml(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgml(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 890 (class 1255 OID 16983)
-- Name: st_asgml(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgml(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 1146 (class 1255 OID 17275)
-- Name: st_asgml(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgml(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 4794 (class 0 OID 0)
-- Dependencies: 1146
-- Name: FUNCTION st_asgml(integer, geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography, integer, integer) IS 'args: version, g1, precision, options - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 891 (class 1255 OID 16984)
-- Name: st_asgml(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 4795 (class 0 OID 0)
-- Dependencies: 891
-- Name: FUNCTION st_asgml(integer, geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry, integer, integer) IS 'args: version, g1, precision, options - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 633 (class 1255 OID 16671)
-- Name: st_ashexewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ashexewkb(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.st_ashexewkb(geometry) OWNER TO postgres;

--
-- TOC entry 4796 (class 0 OID 0)
-- Dependencies: 633
-- Name: FUNCTION st_ashexewkb(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ashexewkb(geometry) IS 'args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';


--
-- TOC entry 635 (class 1255 OID 16673)
-- Name: st_ashexewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ashexewkb(geometry, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.st_ashexewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 4797 (class 0 OID 0)
-- Dependencies: 635
-- Name: FUNCTION st_ashexewkb(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ashexewkb(geometry, text) IS 'args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';


--
-- TOC entry 1149 (class 1255 OID 17278)
-- Name: st_askml(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, $1, 15)$_$;


ALTER FUNCTION public.st_askml(geography) OWNER TO postgres;

--
-- TOC entry 4798 (class 0 OID 0)
-- Dependencies: 1149
-- Name: FUNCTION st_askml(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geography) IS 'args: g1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 897 (class 1255 OID 16990)
-- Name: st_askml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, ST_Transform($1,4326), 15)$_$;


ALTER FUNCTION public.st_askml(geometry) OWNER TO postgres;

--
-- TOC entry 4799 (class 0 OID 0)
-- Dependencies: 897
-- Name: FUNCTION st_askml(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geometry) IS 'args: g1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1150 (class 1255 OID 17279)
-- Name: st_askml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsKML($1::geometry);  $_$;


ALTER FUNCTION public.st_askml(text) OWNER TO postgres;

--
-- TOC entry 1151 (class 1255 OID 17280)
-- Name: st_askml(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, $2, 15)$_$;


ALTER FUNCTION public.st_askml(integer, geography) OWNER TO postgres;

--
-- TOC entry 4800 (class 0 OID 0)
-- Dependencies: 1151
-- Name: FUNCTION st_askml(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geography) IS 'args: version, geom1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 898 (class 1255 OID 16991)
-- Name: st_askml(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, ST_Transform($2,4326), 15)$_$;


ALTER FUNCTION public.st_askml(integer, geometry) OWNER TO postgres;

--
-- TOC entry 4801 (class 0 OID 0)
-- Dependencies: 898
-- Name: FUNCTION st_askml(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geometry) IS 'args: version, geom1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1148 (class 1255 OID 17277)
-- Name: st_askml(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, $1, $2)$_$;


ALTER FUNCTION public.st_askml(geography, integer) OWNER TO postgres;

--
-- TOC entry 4802 (class 0 OID 0)
-- Dependencies: 1148
-- Name: FUNCTION st_askml(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geography, integer) IS 'args: g1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 894 (class 1255 OID 16987)
-- Name: st_askml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, ST_Transform($1,4326), $2)$_$;


ALTER FUNCTION public.st_askml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4803 (class 0 OID 0)
-- Dependencies: 894
-- Name: FUNCTION st_askml(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geometry, integer) IS 'args: g1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1152 (class 1255 OID 17281)
-- Name: st_askml(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, $2, $3)$_$;


ALTER FUNCTION public.st_askml(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 4804 (class 0 OID 0)
-- Dependencies: 1152
-- Name: FUNCTION st_askml(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geography, integer) IS 'args: version, geom1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 899 (class 1255 OID 16992)
-- Name: st_askml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, ST_Transform($2,4326), $3)$_$;


ALTER FUNCTION public.st_askml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 4805 (class 0 OID 0)
-- Dependencies: 899
-- Name: FUNCTION st_askml(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geometry, integer) IS 'args: version, geom1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1137 (class 1255 OID 17266)
-- Name: st_assvg(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography) OWNER TO postgres;

--
-- TOC entry 4806 (class 0 OID 0)
-- Dependencies: 1137
-- Name: FUNCTION st_assvg(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography) IS 'args: g1 - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 882 (class 1255 OID 16975)
-- Name: st_assvg(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.st_assvg(geometry) OWNER TO postgres;

--
-- TOC entry 4807 (class 0 OID 0)
-- Dependencies: 882
-- Name: FUNCTION st_assvg(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geometry) IS 'args: g1 - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1138 (class 1255 OID 17267)
-- Name: st_assvg(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsSVG($1::geometry);  $_$;


ALTER FUNCTION public.st_assvg(text) OWNER TO postgres;

--
-- TOC entry 1136 (class 1255 OID 17265)
-- Name: st_assvg(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography, integer) OWNER TO postgres;

--
-- TOC entry 4808 (class 0 OID 0)
-- Dependencies: 1136
-- Name: FUNCTION st_assvg(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography, integer) IS 'args: g1, rel - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 880 (class 1255 OID 16973)
-- Name: st_assvg(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geometry, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.st_assvg(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4809 (class 0 OID 0)
-- Dependencies: 880
-- Name: FUNCTION st_assvg(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geometry, integer) IS 'args: g1, rel - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1135 (class 1255 OID 17264)
-- Name: st_assvg(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 4810 (class 0 OID 0)
-- Dependencies: 1135
-- Name: FUNCTION st_assvg(geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography, integer, integer) IS 'args: g1, rel, maxdecimaldigits - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 878 (class 1255 OID 16971)
-- Name: st_assvg(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geometry, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'assvg_geometry';


ALTER FUNCTION public.st_assvg(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 4811 (class 0 OID 0)
-- Dependencies: 878
-- Name: FUNCTION st_assvg(geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geometry, integer, integer) IS 'args: g1, rel, maxdecimaldigits - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1107 (class 1255 OID 17205)
-- Name: st_astext(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(geography) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_as_text';


ALTER FUNCTION public.st_astext(geography) OWNER TO postgres;

--
-- TOC entry 4812 (class 0 OID 0)
-- Dependencies: 1107
-- Name: FUNCTION st_astext(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_astext(geography) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';


--
-- TOC entry 954 (class 1255 OID 17047)
-- Name: st_astext(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_asText';


ALTER FUNCTION public.st_astext(geometry) OWNER TO postgres;

--
-- TOC entry 4813 (class 0 OID 0)
-- Dependencies: 954
-- Name: FUNCTION st_astext(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_astext(geometry) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';


--
-- TOC entry 1108 (class 1255 OID 17206)
-- Name: st_astext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsText($1::geometry);  $_$;


ALTER FUNCTION public.st_astext(text) OWNER TO postgres;

--
-- TOC entry 594 (class 1255 OID 16632)
-- Name: st_azimuth(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_azimuth(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_azimuth';


ALTER FUNCTION public.st_azimuth(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4814 (class 0 OID 0)
-- Dependencies: 594
-- Name: FUNCTION st_azimuth(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_azimuth(geometry, geometry) IS 'args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB';


--
-- TOC entry 1072 (class 1255 OID 17164)
-- Name: st_bdmpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bdmpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(ST_BuildArea(mline));

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.st_bdmpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4815 (class 0 OID 0)
-- Dependencies: 1072
-- Name: FUNCTION st_bdmpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_bdmpolyfromtext(text, integer) IS 'args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.';


--
-- TOC entry 1070 (class 1255 OID 17162)
-- Name: st_bdpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bdpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.st_bdpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4816 (class 0 OID 0)
-- Dependencies: 1070
-- Name: FUNCTION st_bdpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_bdpolyfromtext(text, integer) IS 'args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.';


--
-- TOC entry 808 (class 1255 OID 16886)
-- Name: st_boundary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_boundary(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'boundary';


ALTER FUNCTION public.st_boundary(geometry) OWNER TO postgres;

--
-- TOC entry 4817 (class 0 OID 0)
-- Dependencies: 808
-- Name: FUNCTION st_boundary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_boundary(geometry) IS 'args: geomA - Returns the closure of the combinatorial boundary of this Geometry.';


--
-- TOC entry 741 (class 1255 OID 16802)
-- Name: st_box(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box(box3d) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX';


ALTER FUNCTION public.st_box(box3d) OWNER TO postgres;

--
-- TOC entry 738 (class 1255 OID 16799)
-- Name: st_box(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box(geometry) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX';


ALTER FUNCTION public.st_box(geometry) OWNER TO postgres;

--
-- TOC entry 739 (class 1255 OID 16800)
-- Name: st_box2d(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(box3d) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(box3d) OWNER TO postgres;

--
-- TOC entry 750 (class 1255 OID 16811)
-- Name: st_box2d(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(box3d_extent) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(box3d_extent) OWNER TO postgres;

--
-- TOC entry 736 (class 1255 OID 16797)
-- Name: st_box2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(geometry) OWNER TO postgres;

--
-- TOC entry 477 (class 1255 OID 16468)
-- Name: st_box2d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d_in(cstring) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_in';


ALTER FUNCTION public.st_box2d_in(cstring) OWNER TO postgres;

--
-- TOC entry 478 (class 1255 OID 16469)
-- Name: st_box2d_out(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d_out(box2d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_out';


ALTER FUNCTION public.st_box2d_out(box2d) OWNER TO postgres;

--
-- TOC entry 740 (class 1255 OID 16801)
-- Name: st_box3d(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d(box2d) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_to_BOX3D';


ALTER FUNCTION public.st_box3d(box2d) OWNER TO postgres;

--
-- TOC entry 737 (class 1255 OID 16798)
-- Name: st_box3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d(geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_BOX3D';


ALTER FUNCTION public.st_box3d(geometry) OWNER TO postgres;

--
-- TOC entry 749 (class 1255 OID 16810)
-- Name: st_box3d_extent(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_extent(box3d_extent) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_extent_to_BOX3D';


ALTER FUNCTION public.st_box3d_extent(box3d_extent) OWNER TO postgres;

--
-- TOC entry 452 (class 1255 OID 16437)
-- Name: st_box3d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_in(cstring) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.st_box3d_in(cstring) OWNER TO postgres;

--
-- TOC entry 453 (class 1255 OID 16438)
-- Name: st_box3d_out(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_out(box3d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_out';


ALTER FUNCTION public.st_box3d_out(box3d) OWNER TO postgres;

--
-- TOC entry 1186 (class 1255 OID 17315)
-- Name: st_buffer(geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geography, double precision) RETURNS geography
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$_$;


ALTER FUNCTION public.st_buffer(geography, double precision) OWNER TO postgres;

--
-- TOC entry 4818 (class 0 OID 0)
-- Dependencies: 1186
-- Name: FUNCTION st_buffer(geography, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geography, double precision) IS 'args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 791 (class 1255 OID 16869)
-- Name: st_buffer(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'buffer';


ALTER FUNCTION public.st_buffer(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4819 (class 0 OID 0)
-- Dependencies: 791
-- Name: FUNCTION st_buffer(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision) IS 'args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 1187 (class 1255 OID 17316)
-- Name: st_buffer(text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(text, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Buffer($1::geometry, $2);  $_$;


ALTER FUNCTION public.st_buffer(text, double precision) OWNER TO postgres;

--
-- TOC entry 793 (class 1255 OID 16871)
-- Name: st_buffer(geometry, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $_$;


ALTER FUNCTION public.st_buffer(geometry, double precision, integer) OWNER TO postgres;

--
-- TOC entry 4820 (class 0 OID 0)
-- Dependencies: 793
-- Name: FUNCTION st_buffer(geometry, double precision, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision, integer) IS 'args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 794 (class 1255 OID 16872)
-- Name: st_buffer(geometry, double precision, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision, text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $_$;


ALTER FUNCTION public.st_buffer(geometry, double precision, text) OWNER TO postgres;

--
-- TOC entry 4821 (class 0 OID 0)
-- Dependencies: 794
-- Name: FUNCTION st_buffer(geometry, double precision, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision, text) IS 'args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 676 (class 1255 OID 16714)
-- Name: st_buildarea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buildarea(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_buildarea';


ALTER FUNCTION public.st_buildarea(geometry) OWNER TO postgres;

--
-- TOC entry 4822 (class 0 OID 0)
-- Dependencies: 676
-- Name: FUNCTION st_buildarea(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buildarea(geometry) IS 'args: A - Creates an areal geometry formed by the constituent linework of given geometry';


--
-- TOC entry 748 (class 1255 OID 16809)
-- Name: st_bytea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bytea(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_bytea';


ALTER FUNCTION public.st_bytea(geometry) OWNER TO postgres;

--
-- TOC entry 864 (class 1255 OID 16957)
-- Name: st_centroid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_centroid(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'centroid';


ALTER FUNCTION public.st_centroid(geometry) OWNER TO postgres;

--
-- TOC entry 4823 (class 0 OID 0)
-- Dependencies: 864
-- Name: FUNCTION st_centroid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_centroid(geometry) IS 'args: g1 - Returns the geometric center of a geometry.';


--
-- TOC entry 475 (class 1255 OID 16465)
-- Name: st_chip_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_chip_in(cstring) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_in';


ALTER FUNCTION public.st_chip_in(cstring) OWNER TO postgres;

--
-- TOC entry 476 (class 1255 OID 16466)
-- Name: st_chip_out(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_chip_out(chip) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_out';


ALTER FUNCTION public.st_chip_out(chip) OWNER TO postgres;

--
-- TOC entry 1063 (class 1255 OID 17155)
-- Name: st_closestpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_closestpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_closestpoint';


ALTER FUNCTION public.st_closestpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4824 (class 0 OID 0)
-- Dependencies: 1063
-- Name: FUNCTION st_closestpoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_closestpoint(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.';


--
-- TOC entry 817 (class 1255 OID 16897)
-- Name: st_collect(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collect(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_collect_garray';


ALTER FUNCTION public.st_collect(geometry[]) OWNER TO postgres;

--
-- TOC entry 4825 (class 0 OID 0)
-- Dependencies: 817
-- Name: FUNCTION st_collect(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collect(geometry[]) IS 'args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 816 (class 1255 OID 16894)
-- Name: st_collect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collect(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_collect';


ALTER FUNCTION public.st_collect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4826 (class 0 OID 0)
-- Dependencies: 816
-- Name: FUNCTION st_collect(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collect(geometry, geometry) IS 'args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 607 (class 1255 OID 16645)
-- Name: st_collectionextract(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collectionextract(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_CollectionExtract';


ALTER FUNCTION public.st_collectionextract(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4827 (class 0 OID 0)
-- Dependencies: 607
-- Name: FUNCTION st_collectionextract(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collectionextract(geometry, integer) IS 'args: collection, type - Given a GEOMETRYCOLLECTION, returns a MULTI* geometry consisting only of the specified type. Sub-geometries that are not the specified type are ignored. If there are no sub-geometries of the right type, an EMPTY collection will be returned. Only points, lines and polygons are supported. Type numbers are 1 == POINT, 2 == LINESTRING, 3 == POLYGON.';


--
-- TOC entry 689 (class 1255 OID 16730)
-- Name: st_combine_bbox(box2d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box2d, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_combine';


ALTER FUNCTION public.st_combine_bbox(box2d, geometry) OWNER TO postgres;

--
-- TOC entry 693 (class 1255 OID 16736)
-- Name: st_combine_bbox(box3d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box3d, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.st_combine_bbox(box3d, geometry) OWNER TO postgres;

--
-- TOC entry 691 (class 1255 OID 16732)
-- Name: st_combine_bbox(box3d_extent, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box3d_extent, geometry) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.st_combine_bbox(box3d_extent, geometry) OWNER TO postgres;

--
-- TOC entry 551 (class 1255 OID 16589)
-- Name: st_compression(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_compression(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getCompression';


ALTER FUNCTION public.st_compression(chip) OWNER TO postgres;

--
-- TOC entry 851 (class 1255 OID 16944)
-- Name: st_contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_contains(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Contains($1,$2)$_$;


ALTER FUNCTION public.st_contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4828 (class 0 OID 0)
-- Dependencies: 851
-- Name: FUNCTION st_contains(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_contains(geometry, geometry) IS 'args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.';


--
-- TOC entry 857 (class 1255 OID 16950)
-- Name: st_containsproperly(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_containsproperly(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$_$;


ALTER FUNCTION public.st_containsproperly(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4829 (class 0 OID 0)
-- Dependencies: 857
-- Name: FUNCTION st_containsproperly(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_containsproperly(geometry, geometry) IS 'args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.';


--
-- TOC entry 797 (class 1255 OID 16875)
-- Name: st_convexhull(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_convexhull(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'convexhull';


ALTER FUNCTION public.st_convexhull(geometry) OWNER TO postgres;

--
-- TOC entry 4830 (class 0 OID 0)
-- Dependencies: 797
-- Name: FUNCTION st_convexhull(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_convexhull(geometry) IS 'args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.';


--
-- TOC entry 1087 (class 1255 OID 17180)
-- Name: st_coorddim(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coorddim(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.st_coorddim(geometry) OWNER TO postgres;

--
-- TOC entry 4831 (class 0 OID 0)
-- Dependencies: 1087
-- Name: FUNCTION st_coorddim(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coorddim(geometry) IS 'args: geomA - Return the coordinate dimension of the ST_Geometry value.';


--
-- TOC entry 1180 (class 1255 OID 17309)
-- Name: st_coveredby(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Covers($2, $1)$_$;


ALTER FUNCTION public.st_coveredby(geography, geography) OWNER TO postgres;

--
-- TOC entry 4832 (class 0 OID 0)
-- Dependencies: 1180
-- Name: FUNCTION st_coveredby(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coveredby(geography, geography) IS 'args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';


--
-- TOC entry 853 (class 1255 OID 16946)
-- Name: st_coveredby(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$_$;


ALTER FUNCTION public.st_coveredby(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4833 (class 0 OID 0)
-- Dependencies: 853
-- Name: FUNCTION st_coveredby(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coveredby(geometry, geometry) IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';


--
-- TOC entry 1181 (class 1255 OID 17310)
-- Name: st_coveredby(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_coveredby(text, text) OWNER TO postgres;

--
-- TOC entry 1178 (class 1255 OID 17307)
-- Name: st_covers(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT $1 && $2 AND _ST_Covers($1, $2)$_$;


ALTER FUNCTION public.st_covers(geography, geography) OWNER TO postgres;

--
-- TOC entry 4834 (class 0 OID 0)
-- Dependencies: 1178
-- Name: FUNCTION st_covers(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_covers(geography, geography) IS 'args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A. For geography: if geography point B is not outside Polygon Geography A';


--
-- TOC entry 855 (class 1255 OID 16948)
-- Name: st_covers(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Covers($1,$2)$_$;


ALTER FUNCTION public.st_covers(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4835 (class 0 OID 0)
-- Dependencies: 855
-- Name: FUNCTION st_covers(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_covers(geometry, geometry) IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A. For geography: if geography point B is not outside Polygon Geography A';


--
-- TOC entry 1179 (class 1255 OID 17308)
-- Name: st_covers(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Covers($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_covers(text, text) OWNER TO postgres;

--
-- TOC entry 845 (class 1255 OID 16938)
-- Name: st_crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_crosses(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Crosses($1,$2)$_$;


ALTER FUNCTION public.st_crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4836 (class 0 OID 0)
-- Dependencies: 845
-- Name: FUNCTION st_crosses(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_crosses(geometry, geometry) IS 'args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.';


--
-- TOC entry 1191 (class 1255 OID 17320)
-- Name: st_curvetoline(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_curvetoline(geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_CurveToLine($1, 32)$_$;


ALTER FUNCTION public.st_curvetoline(geometry) OWNER TO postgres;

--
-- TOC entry 4837 (class 0 OID 0)
-- Dependencies: 1191
-- Name: FUNCTION st_curvetoline(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_curvetoline(geometry) IS 'args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';


--
-- TOC entry 1190 (class 1255 OID 17319)
-- Name: st_curvetoline(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_curvetoline(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_curve_segmentize';


ALTER FUNCTION public.st_curvetoline(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4838 (class 0 OID 0)
-- Dependencies: 1190
-- Name: FUNCTION st_curvetoline(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_curvetoline(geometry, integer) IS 'args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';


--
-- TOC entry 549 (class 1255 OID 16587)
-- Name: st_datatype(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_datatype(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getDatatype';


ALTER FUNCTION public.st_datatype(chip) OWNER TO postgres;

--
-- TOC entry 1068 (class 1255 OID 17160)
-- Name: st_dfullywithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dfullywithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$_$;


ALTER FUNCTION public.st_dfullywithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4839 (class 0 OID 0)
-- Dependencies: 1068
-- Name: FUNCTION st_dfullywithin(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dfullywithin(geometry, geometry, double precision) IS 'args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another';


--
-- TOC entry 806 (class 1255 OID 16884)
-- Name: st_difference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_difference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'difference';


ALTER FUNCTION public.st_difference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4840 (class 0 OID 0)
-- Dependencies: 806
-- Name: FUNCTION st_difference(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_difference(geometry, geometry) IS 'args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.';


--
-- TOC entry 916 (class 1255 OID 17009)
-- Name: st_dimension(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dimension(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dimension';


ALTER FUNCTION public.st_dimension(geometry) OWNER TO postgres;

--
-- TOC entry 4841 (class 0 OID 0)
-- Dependencies: 916
-- Name: FUNCTION st_dimension(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dimension(geometry) IS 'args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.';


--
-- TOC entry 834 (class 1255 OID 16927)
-- Name: st_disjoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_disjoint(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'disjoint';


ALTER FUNCTION public.st_disjoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4842 (class 0 OID 0)
-- Dependencies: 834
-- Name: FUNCTION st_disjoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_disjoint(geometry, geometry) IS 'args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.';


--
-- TOC entry 1164 (class 1255 OID 17293)
-- Name: st_distance(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geography, geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_Distance($1, $2, 0.0, true)$_$;


ALTER FUNCTION public.st_distance(geography, geography) OWNER TO postgres;

--
-- TOC entry 4843 (class 0 OID 0)
-- Dependencies: 1164
-- Name: FUNCTION st_distance(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geography, geography) IS 'args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 590 (class 1255 OID 16628)
-- Name: st_distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_mindistance2d';


ALTER FUNCTION public.st_distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4844 (class 0 OID 0)
-- Dependencies: 590
-- Name: FUNCTION st_distance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geometry, geometry) IS 'args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 1165 (class 1255 OID 17294)
-- Name: st_distance(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(text, text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Distance($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_distance(text, text) OWNER TO postgres;

--
-- TOC entry 1163 (class 1255 OID 17292)
-- Name: st_distance(geography, geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geography, geography, boolean) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_Distance($1, $2, 0.0, $3)$_$;


ALTER FUNCTION public.st_distance(geography, geography, boolean) OWNER TO postgres;

--
-- TOC entry 4845 (class 0 OID 0)
-- Dependencies: 1163
-- Name: FUNCTION st_distance(geography, geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geography, geography, boolean) IS 'args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 588 (class 1255 OID 16626)
-- Name: st_distance_sphere(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance_sphere(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_distance_sphere';


ALTER FUNCTION public.st_distance_sphere(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4846 (class 0 OID 0)
-- Dependencies: 588
-- Name: FUNCTION st_distance_sphere(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance_sphere(geometry, geometry) IS 'args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid, but less accurate. PostGIS versions prior to 1.5 only implemented for points.';


--
-- TOC entry 586 (class 1255 OID 16624)
-- Name: st_distance_spheroid(geometry, geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance_spheroid(geometry, geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_distance_ellipsoid';


ALTER FUNCTION public.st_distance_spheroid(geometry, geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 4847 (class 0 OID 0)
-- Dependencies: 586
-- Name: FUNCTION st_distance_spheroid(geometry, geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance_spheroid(geometry, geometry, spheroid) IS 'args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.';


--
-- TOC entry 683 (class 1255 OID 16724)
-- Name: st_dump(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dump(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dump';


ALTER FUNCTION public.st_dump(geometry) OWNER TO postgres;

--
-- TOC entry 4848 (class 0 OID 0)
-- Dependencies: 683
-- Name: FUNCTION st_dump(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dump(geometry) IS 'args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.';


--
-- TOC entry 687 (class 1255 OID 16728)
-- Name: st_dumppoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dumppoints(geometry) RETURNS SETOF geometry_dump
    LANGUAGE sql STRICT
    AS $_$
  SELECT * FROM _ST_DumpPoints($1, NULL);
$_$;


ALTER FUNCTION public.st_dumppoints(geometry) OWNER TO postgres;

--
-- TOC entry 4849 (class 0 OID 0)
-- Dependencies: 687
-- Name: FUNCTION st_dumppoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dumppoints(geometry) IS 'args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.';


--
-- TOC entry 685 (class 1255 OID 16726)
-- Name: st_dumprings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dumprings(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_dump_rings';


ALTER FUNCTION public.st_dumprings(geometry) OWNER TO postgres;

--
-- TOC entry 4850 (class 0 OID 0)
-- Dependencies: 685
-- Name: FUNCTION st_dumprings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dumprings(geometry) IS 'args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.';


--
-- TOC entry 1168 (class 1255 OID 17297)
-- Name: st_dwithin(geography, geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geography, geography, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$_$;


ALTER FUNCTION public.st_dwithin(geography, geography, double precision) OWNER TO postgres;

--
-- TOC entry 4851 (class 0 OID 0)
-- Dependencies: 1168
-- Name: FUNCTION st_dwithin(geography, geography, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geography, geography, double precision) IS 'args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 839 (class 1255 OID 16932)
-- Name: st_dwithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$_$;


ALTER FUNCTION public.st_dwithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4852 (class 0 OID 0)
-- Dependencies: 839
-- Name: FUNCTION st_dwithin(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geometry, geometry, double precision) IS 'args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 1169 (class 1255 OID 17298)
-- Name: st_dwithin(text, text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(text, text, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $_$;


ALTER FUNCTION public.st_dwithin(text, text, double precision) OWNER TO postgres;

--
-- TOC entry 1167 (class 1255 OID 17296)
-- Name: st_dwithin(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geography, geography, double precision, boolean) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_dwithin(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 4853 (class 0 OID 0)
-- Dependencies: 1167
-- Name: FUNCTION st_dwithin(geography, geography, double precision, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geography, geography, double precision, boolean) IS 'args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 940 (class 1255 OID 17033)
-- Name: st_endpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_endpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_endpoint_linestring';


ALTER FUNCTION public.st_endpoint(geometry) OWNER TO postgres;

--
-- TOC entry 4854 (class 0 OID 0)
-- Dependencies: 940
-- Name: FUNCTION st_endpoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_endpoint(geometry) IS 'args: g - Returns the last point of a LINESTRING geometry as a POINT.';


--
-- TOC entry 617 (class 1255 OID 16655)
-- Name: st_envelope(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_envelope(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_envelope';


ALTER FUNCTION public.st_envelope(geometry) OWNER TO postgres;

--
-- TOC entry 4855 (class 0 OID 0)
-- Dependencies: 617
-- Name: FUNCTION st_envelope(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_envelope(geometry) IS 'args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.';


--
-- TOC entry 873 (class 1255 OID 16966)
-- Name: st_equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_equals(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Equals($1,$2)$_$;


ALTER FUNCTION public.st_equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4856 (class 0 OID 0)
-- Dependencies: 873
-- Name: FUNCTION st_equals(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_equals(geometry, geometry) IS 'args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.';


--
-- TOC entry 697 (class 1255 OID 16742)
-- Name: st_estimated_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_estimated_extent(text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.st_estimated_extent(text, text) OWNER TO postgres;

--
-- TOC entry 4857 (class 0 OID 0)
-- Dependencies: 697
-- Name: FUNCTION st_estimated_extent(text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_estimated_extent(text, text) IS 'args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';


--
-- TOC entry 695 (class 1255 OID 16740)
-- Name: st_estimated_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_estimated_extent(text, text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.st_estimated_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 4858 (class 0 OID 0)
-- Dependencies: 695
-- Name: FUNCTION st_estimated_extent(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_estimated_extent(text, text, text) IS 'args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';


--
-- TOC entry 613 (class 1255 OID 16651)
-- Name: st_expand(box2d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(box2d, double precision) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_expand';


ALTER FUNCTION public.st_expand(box2d, double precision) OWNER TO postgres;

--
-- TOC entry 4859 (class 0 OID 0)
-- Dependencies: 613
-- Name: FUNCTION st_expand(box2d, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(box2d, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 611 (class 1255 OID 16649)
-- Name: st_expand(box3d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(box3d, double precision) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_expand';


ALTER FUNCTION public.st_expand(box3d, double precision) OWNER TO postgres;

--
-- TOC entry 4860 (class 0 OID 0)
-- Dependencies: 611
-- Name: FUNCTION st_expand(box3d, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(box3d, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 615 (class 1255 OID 16653)
-- Name: st_expand(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_expand';


ALTER FUNCTION public.st_expand(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4861 (class 0 OID 0)
-- Dependencies: 615
-- Name: FUNCTION st_expand(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(geometry, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 918 (class 1255 OID 17011)
-- Name: st_exteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_exteriorring(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_exteriorring_polygon';


ALTER FUNCTION public.st_exteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 4862 (class 0 OID 0)
-- Dependencies: 918
-- Name: FUNCTION st_exteriorring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_exteriorring(geometry) IS 'args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON';


--
-- TOC entry 545 (class 1255 OID 16583)
-- Name: st_factor(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_factor(chip) RETURNS real
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getFactor';


ALTER FUNCTION public.st_factor(chip) OWNER TO postgres;

--
-- TOC entry 701 (class 1255 OID 16746)
-- Name: st_find_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_find_extent(text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.st_find_extent(text, text) OWNER TO postgres;

--
-- TOC entry 699 (class 1255 OID 16744)
-- Name: st_find_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_find_extent(text, text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.st_find_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 596 (class 1255 OID 16634)
-- Name: st_force_2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_2d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_2d';


ALTER FUNCTION public.st_force_2d(geometry) OWNER TO postgres;

--
-- TOC entry 4863 (class 0 OID 0)
-- Dependencies: 596
-- Name: FUNCTION st_force_2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_2d(geometry) IS 'args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.';


--
-- TOC entry 600 (class 1255 OID 16638)
-- Name: st_force_3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.st_force_3d(geometry) OWNER TO postgres;

--
-- TOC entry 4864 (class 0 OID 0)
-- Dependencies: 600
-- Name: FUNCTION st_force_3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3d(geometry) IS 'args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force_3DZ.';


--
-- TOC entry 602 (class 1255 OID 16640)
-- Name: st_force_3dm(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3dm(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dm';


ALTER FUNCTION public.st_force_3dm(geometry) OWNER TO postgres;

--
-- TOC entry 4865 (class 0 OID 0)
-- Dependencies: 602
-- Name: FUNCTION st_force_3dm(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3dm(geometry) IS 'args: geomA - Forces the geometries into XYM mode.';


--
-- TOC entry 598 (class 1255 OID 16636)
-- Name: st_force_3dz(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3dz(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.st_force_3dz(geometry) OWNER TO postgres;

--
-- TOC entry 4866 (class 0 OID 0)
-- Dependencies: 598
-- Name: FUNCTION st_force_3dz(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3dz(geometry) IS 'args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force_3D.';


--
-- TOC entry 604 (class 1255 OID 16642)
-- Name: st_force_4d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_4d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_4d';


ALTER FUNCTION public.st_force_4d(geometry) OWNER TO postgres;

--
-- TOC entry 4867 (class 0 OID 0)
-- Dependencies: 604
-- Name: FUNCTION st_force_4d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_4d(geometry) IS 'args: geomA - Forces the geometries into XYZM mode.';


--
-- TOC entry 606 (class 1255 OID 16644)
-- Name: st_force_collection(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_collection(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_collection';


ALTER FUNCTION public.st_force_collection(geometry) OWNER TO postgres;

--
-- TOC entry 4868 (class 0 OID 0)
-- Dependencies: 606
-- Name: FUNCTION st_force_collection(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_collection(geometry) IS 'args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.';


--
-- TOC entry 621 (class 1255 OID 16659)
-- Name: st_forcerhr(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_forcerhr(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_forceRHR_poly';


ALTER FUNCTION public.st_forcerhr(geometry) OWNER TO postgres;

--
-- TOC entry 4869 (class 0 OID 0)
-- Dependencies: 621
-- Name: FUNCTION st_forcerhr(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_forcerhr(geometry) IS 'args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.';


--
-- TOC entry 1110 (class 1255 OID 17208)
-- Name: st_geogfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geogfromtext(text) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_from_text';


ALTER FUNCTION public.st_geogfromtext(text) OWNER TO postgres;

--
-- TOC entry 4870 (class 0 OID 0)
-- Dependencies: 1110
-- Name: FUNCTION st_geogfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geogfromtext(text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';


--
-- TOC entry 1113 (class 1255 OID 17211)
-- Name: st_geogfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geogfromwkb(bytea) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_from_binary';


ALTER FUNCTION public.st_geogfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 4871 (class 0 OID 0)
-- Dependencies: 1113
-- Name: FUNCTION st_geogfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geogfromwkb(bytea) IS 'args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).';


--
-- TOC entry 1109 (class 1255 OID 17207)
-- Name: st_geographyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geographyfromtext(text) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_from_text';


ALTER FUNCTION public.st_geographyfromtext(text) OWNER TO postgres;

--
-- TOC entry 4872 (class 0 OID 0)
-- Dependencies: 1109
-- Name: FUNCTION st_geographyfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geographyfromtext(text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';


--
-- TOC entry 908 (class 1255 OID 17001)
-- Name: st_geohash(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geohash(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_GeoHash($1, 0)$_$;


ALTER FUNCTION public.st_geohash(geometry) OWNER TO postgres;

--
-- TOC entry 4873 (class 0 OID 0)
-- Dependencies: 908
-- Name: FUNCTION st_geohash(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geohash(geometry) IS 'args: g1 - Return a GeoHash representation (geohash.org) of the geometry.';


--
-- TOC entry 907 (class 1255 OID 17000)
-- Name: st_geohash(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geohash(geometry, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_GeoHash';


ALTER FUNCTION public.st_geohash(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4874 (class 0 OID 0)
-- Dependencies: 907
-- Name: FUNCTION st_geohash(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geohash(geometry, integer) IS 'args: g1, precision - Return a GeoHash representation (geohash.org) of the geometry.';


--
-- TOC entry 1007 (class 1255 OID 17100)
-- Name: st_geomcollfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromtext(text) OWNER TO postgres;

--
-- TOC entry 4875 (class 0 OID 0)
-- Dependencies: 1007
-- Name: FUNCTION st_geomcollfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomcollfromtext(text) IS 'args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1005 (class 1255 OID 17098)
-- Name: st_geomcollfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4876 (class 0 OID 0)
-- Dependencies: 1005
-- Name: FUNCTION st_geomcollfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomcollfromtext(text, integer) IS 'args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1059 (class 1255 OID 17151)
-- Name: st_geomcollfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1057 (class 1255 OID 17149)
-- Name: st_geomcollfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 747 (class 1255 OID 16808)
-- Name: st_geometry(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_bytea';


ALTER FUNCTION public.st_geometry(bytea) OWNER TO postgres;

--
-- TOC entry 743 (class 1255 OID 16804)
-- Name: st_geometry(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box2d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box2d) OWNER TO postgres;

--
-- TOC entry 744 (class 1255 OID 16805)
-- Name: st_geometry(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box3d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box3d) OWNER TO postgres;

--
-- TOC entry 751 (class 1255 OID 16812)
-- Name: st_geometry(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box3d_extent) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box3d_extent) OWNER TO postgres;

--
-- TOC entry 746 (class 1255 OID 16807)
-- Name: st_geometry(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(chip) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_to_LWGEOM';


ALTER FUNCTION public.st_geometry(chip) OWNER TO postgres;

--
-- TOC entry 745 (class 1255 OID 16806)
-- Name: st_geometry(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.st_geometry(text) OWNER TO postgres;

--
-- TOC entry 503 (class 1255 OID 16508)
-- Name: st_geometry_above(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_above(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_above';


ALTER FUNCTION public.st_geometry_above(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 420 (class 1255 OID 16403)
-- Name: st_geometry_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_analyze';


ALTER FUNCTION public.st_geometry_analyze(internal) OWNER TO postgres;

--
-- TOC entry 504 (class 1255 OID 16509)
-- Name: st_geometry_below(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_below(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_below';


ALTER FUNCTION public.st_geometry_below(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 486 (class 1255 OID 16478)
-- Name: st_geometry_cmp(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_cmp(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_cmp';


ALTER FUNCTION public.st_geometry_cmp(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 505 (class 1255 OID 16510)
-- Name: st_geometry_contain(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_contain(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_contain';


ALTER FUNCTION public.st_geometry_contain(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 506 (class 1255 OID 16511)
-- Name: st_geometry_contained(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_contained(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_contained';


ALTER FUNCTION public.st_geometry_contained(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 485 (class 1255 OID 16477)
-- Name: st_geometry_eq(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_eq(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_eq';


ALTER FUNCTION public.st_geometry_eq(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 484 (class 1255 OID 16476)
-- Name: st_geometry_ge(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_ge(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_ge';


ALTER FUNCTION public.st_geometry_ge(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 483 (class 1255 OID 16475)
-- Name: st_geometry_gt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_gt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_gt';


ALTER FUNCTION public.st_geometry_gt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 418 (class 1255 OID 16401)
-- Name: st_geometry_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_in(cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_in';


ALTER FUNCTION public.st_geometry_in(cstring) OWNER TO postgres;

--
-- TOC entry 482 (class 1255 OID 16474)
-- Name: st_geometry_le(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_le(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_le';


ALTER FUNCTION public.st_geometry_le(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 501 (class 1255 OID 16506)
-- Name: st_geometry_left(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_left(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_left';


ALTER FUNCTION public.st_geometry_left(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 481 (class 1255 OID 16473)
-- Name: st_geometry_lt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_lt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'lwgeom_lt';


ALTER FUNCTION public.st_geometry_lt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 419 (class 1255 OID 16402)
-- Name: st_geometry_out(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_out(geometry) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_out';


ALTER FUNCTION public.st_geometry_out(geometry) OWNER TO postgres;

--
-- TOC entry 499 (class 1255 OID 16504)
-- Name: st_geometry_overabove(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overabove(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overabove';


ALTER FUNCTION public.st_geometry_overabove(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 500 (class 1255 OID 16505)
-- Name: st_geometry_overbelow(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overbelow(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overbelow';


ALTER FUNCTION public.st_geometry_overbelow(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 507 (class 1255 OID 16512)
-- Name: st_geometry_overlap(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overlap(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overlap';


ALTER FUNCTION public.st_geometry_overlap(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 497 (class 1255 OID 16502)
-- Name: st_geometry_overleft(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overleft(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overleft';


ALTER FUNCTION public.st_geometry_overleft(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 498 (class 1255 OID 16503)
-- Name: st_geometry_overright(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overright(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_overright';


ALTER FUNCTION public.st_geometry_overright(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 421 (class 1255 OID 16404)
-- Name: st_geometry_recv(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_recv(internal) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_recv';


ALTER FUNCTION public.st_geometry_recv(internal) OWNER TO postgres;

--
-- TOC entry 502 (class 1255 OID 16507)
-- Name: st_geometry_right(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_right(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_right';


ALTER FUNCTION public.st_geometry_right(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 508 (class 1255 OID 16513)
-- Name: st_geometry_same(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_same(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.st_geometry_same(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 422 (class 1255 OID 16405)
-- Name: st_geometry_send(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_send(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_send';


ALTER FUNCTION public.st_geometry_send(geometry) OWNER TO postgres;

--
-- TOC entry 956 (class 1255 OID 17049)
-- Name: st_geometryfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geometryfromtext(text) OWNER TO postgres;

--
-- TOC entry 4877 (class 0 OID 0)
-- Dependencies: 956
-- Name: FUNCTION st_geometryfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryfromtext(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 958 (class 1255 OID 17051)
-- Name: st_geometryfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geometryfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4878 (class 0 OID 0)
-- Dependencies: 958
-- Name: FUNCTION st_geometryfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryfromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 914 (class 1255 OID 17007)
-- Name: st_geometryn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_geometryn_collection';


ALTER FUNCTION public.st_geometryn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4879 (class 0 OID 0)
-- Dependencies: 914
-- Name: FUNCTION st_geometryn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryn(geometry, integer) IS 'args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, MULTIPOINT, MULTILINESTRING, MULTICURVE or MULTIPOLYGON. Otherwise, return NULL.';


--
-- TOC entry 926 (class 1255 OID 17019)
-- Name: st_geometrytype(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometrytype(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geometry_geometrytype';


ALTER FUNCTION public.st_geometrytype(geometry) OWNER TO postgres;

--
-- TOC entry 4880 (class 0 OID 0)
-- Dependencies: 926
-- Name: FUNCTION st_geometrytype(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometrytype(geometry) IS 'args: g1 - Return the geometry type of the ST_Geometry value.';


--
-- TOC entry 639 (class 1255 OID 16677)
-- Name: st_geomfromewkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromewkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOMFromWKB';


ALTER FUNCTION public.st_geomfromewkb(bytea) OWNER TO postgres;

--
-- TOC entry 4881 (class 0 OID 0)
-- Dependencies: 639
-- Name: FUNCTION st_geomfromewkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromewkb(bytea) IS 'args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).';


--
-- TOC entry 641 (class 1255 OID 16679)
-- Name: st_geomfromewkt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromewkt(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.st_geomfromewkt(text) OWNER TO postgres;

--
-- TOC entry 4882 (class 0 OID 0)
-- Dependencies: 641
-- Name: FUNCTION st_geomfromewkt(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromewkt(text) IS 'args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).';


--
-- TOC entry 874 (class 1255 OID 16967)
-- Name: st_geomfromgml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromgml(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geom_from_gml';


ALTER FUNCTION public.st_geomfromgml(text) OWNER TO postgres;

--
-- TOC entry 4883 (class 0 OID 0)
-- Dependencies: 874
-- Name: FUNCTION st_geomfromgml(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromgml(text) IS 'args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object';


--
-- TOC entry 876 (class 1255 OID 16969)
-- Name: st_geomfromkml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromkml(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geom_from_kml';


ALTER FUNCTION public.st_geomfromkml(text) OWNER TO postgres;

--
-- TOC entry 4884 (class 0 OID 0)
-- Dependencies: 876
-- Name: FUNCTION st_geomfromkml(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromkml(text) IS 'args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object';


--
-- TOC entry 960 (class 1255 OID 17053)
-- Name: st_geomfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geomfromtext(text) OWNER TO postgres;

--
-- TOC entry 4885 (class 0 OID 0)
-- Dependencies: 960
-- Name: FUNCTION st_geomfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromtext(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';


--
-- TOC entry 962 (class 1255 OID 17055)
-- Name: st_geomfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geomfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4886 (class 0 OID 0)
-- Dependencies: 962
-- Name: FUNCTION st_geomfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';


--
-- TOC entry 1009 (class 1255 OID 17102)
-- Name: st_geomfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromwkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.st_geomfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 4887 (class 0 OID 0)
-- Dependencies: 1009
-- Name: FUNCTION st_geomfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromwkb(bytea) IS 'args: geom - Makes a geometry from WKB with the given SRID';


--
-- TOC entry 1011 (class 1255 OID 17104)
-- Name: st_geomfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$_$;


ALTER FUNCTION public.st_geomfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 4888 (class 0 OID 0)
-- Dependencies: 1011
-- Name: FUNCTION st_geomfromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromwkb(bytea, integer) IS 'args: geom, srid - Makes a geometry from WKB with the given SRID';


--
-- TOC entry 875 (class 1255 OID 16968)
-- Name: st_gmltosql(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_gmltosql(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geom_from_gml';


ALTER FUNCTION public.st_gmltosql(text) OWNER TO postgres;

--
-- TOC entry 4889 (class 0 OID 0)
-- Dependencies: 875
-- Name: FUNCTION st_gmltosql(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_gmltosql(text) IS 'args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';


--
-- TOC entry 1192 (class 1255 OID 17321)
-- Name: st_hasarc(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hasarc(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_has_arc';


ALTER FUNCTION public.st_hasarc(geometry) OWNER TO postgres;

--
-- TOC entry 4890 (class 0 OID 0)
-- Dependencies: 1192
-- Name: FUNCTION st_hasarc(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hasarc(geometry) IS 'args: geomA - Returns true if a geometry or geometry collection contains a circular string';


--
-- TOC entry 803 (class 1255 OID 16881)
-- Name: st_hausdorffdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hausdorffdistance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'hausdorffdistance';


ALTER FUNCTION public.st_hausdorffdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4891 (class 0 OID 0)
-- Dependencies: 803
-- Name: FUNCTION st_hausdorffdistance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hausdorffdistance(geometry, geometry) IS 'args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';


--
-- TOC entry 804 (class 1255 OID 16882)
-- Name: st_hausdorffdistance(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hausdorffdistance(geometry, geometry, double precision) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'hausdorffdistancedensify';


ALTER FUNCTION public.st_hausdorffdistance(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4892 (class 0 OID 0)
-- Dependencies: 804
-- Name: FUNCTION st_hausdorffdistance(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hausdorffdistance(geometry, geometry, double precision) IS 'args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';


--
-- TOC entry 543 (class 1255 OID 16581)
-- Name: st_height(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_height(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getHeight';


ALTER FUNCTION public.st_height(chip) OWNER TO postgres;

--
-- TOC entry 924 (class 1255 OID 17017)
-- Name: st_interiorringn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_interiorringn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_interiorringn_polygon';


ALTER FUNCTION public.st_interiorringn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4893 (class 0 OID 0)
-- Dependencies: 924
-- Name: FUNCTION st_interiorringn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_interiorringn(geometry, integer) IS 'args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.';


--
-- TOC entry 1188 (class 1255 OID 17317)
-- Name: st_intersection(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(geography, geography) RETURNS geography
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$_$;


ALTER FUNCTION public.st_intersection(geography, geography) OWNER TO postgres;

--
-- TOC entry 4894 (class 0 OID 0)
-- Dependencies: 1188
-- Name: FUNCTION st_intersection(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersection(geography, geography) IS 'args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';


--
-- TOC entry 789 (class 1255 OID 16867)
-- Name: st_intersection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'intersection';


ALTER FUNCTION public.st_intersection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4895 (class 0 OID 0)
-- Dependencies: 789
-- Name: FUNCTION st_intersection(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersection(geometry, geometry) IS 'args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';


--
-- TOC entry 1189 (class 1255 OID 17318)
-- Name: st_intersection(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(text, text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Intersection($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_intersection(text, text) OWNER TO postgres;

--
-- TOC entry 1182 (class 1255 OID 17311)
-- Name: st_intersects(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$_$;


ALTER FUNCTION public.st_intersects(geography, geography) OWNER TO postgres;

--
-- TOC entry 4896 (class 0 OID 0)
-- Dependencies: 1182
-- Name: FUNCTION st_intersects(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersects(geography, geography) IS 'args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';


--
-- TOC entry 842 (class 1255 OID 16935)
-- Name: st_intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Intersects($1,$2)$_$;


ALTER FUNCTION public.st_intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4897 (class 0 OID 0)
-- Dependencies: 842
-- Name: FUNCTION st_intersects(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersects(geometry, geometry) IS 'args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';


--
-- TOC entry 1183 (class 1255 OID 17312)
-- Name: st_intersects(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Intersects($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_intersects(text, text) OWNER TO postgres;

--
-- TOC entry 942 (class 1255 OID 17035)
-- Name: st_isclosed(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isclosed(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_isclosed_linestring';


ALTER FUNCTION public.st_isclosed(geometry) OWNER TO postgres;

--
-- TOC entry 4898 (class 0 OID 0)
-- Dependencies: 942
-- Name: FUNCTION st_isclosed(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isclosed(geometry) IS 'args: g - Returns TRUE if the LINESTRINGs start and end points are coincident.';


--
-- TOC entry 944 (class 1255 OID 17037)
-- Name: st_isempty(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isempty(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_isempty';


ALTER FUNCTION public.st_isempty(geometry) OWNER TO postgres;

--
-- TOC entry 4899 (class 0 OID 0)
-- Dependencies: 944
-- Name: FUNCTION st_isempty(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isempty(geometry) IS 'args: geomA - Returns true if this Geometry is an empty geometry . If true, then this Geometry represents the empty point set - i.e. GEOMETRYCOLLECTION(EMPTY).';


--
-- TOC entry 866 (class 1255 OID 16959)
-- Name: st_isring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isring(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'isring';


ALTER FUNCTION public.st_isring(geometry) OWNER TO postgres;

--
-- TOC entry 4900 (class 0 OID 0)
-- Dependencies: 866
-- Name: FUNCTION st_isring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isring(geometry) IS 'args: g - Returns TRUE if this LINESTRING is both closed and simple.';


--
-- TOC entry 870 (class 1255 OID 16963)
-- Name: st_issimple(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_issimple(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'issimple';


ALTER FUNCTION public.st_issimple(geometry) OWNER TO postgres;

--
-- TOC entry 4901 (class 0 OID 0)
-- Dependencies: 870
-- Name: FUNCTION st_issimple(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_issimple(geometry) IS 'args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.';


--
-- TOC entry 862 (class 1255 OID 16955)
-- Name: st_isvalid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isvalid(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'isvalid';


ALTER FUNCTION public.st_isvalid(geometry) OWNER TO postgres;

--
-- TOC entry 4902 (class 0 OID 0)
-- Dependencies: 862
-- Name: FUNCTION st_isvalid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isvalid(geometry) IS 'args: g - Returns true if the ST_Geometry is well formed.';


--
-- TOC entry 802 (class 1255 OID 16880)
-- Name: st_isvalidreason(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isvalidreason(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'isvalidreason';


ALTER FUNCTION public.st_isvalidreason(geometry) OWNER TO postgres;

--
-- TOC entry 4903 (class 0 OID 0)
-- Dependencies: 802
-- Name: FUNCTION st_isvalidreason(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isvalidreason(geometry) IS 'args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.';


--
-- TOC entry 1174 (class 1255 OID 17303)
-- Name: st_length(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT ST_Length($1, true)$_$;


ALTER FUNCTION public.st_length(geography) OWNER TO postgres;

--
-- TOC entry 4904 (class 0 OID 0)
-- Dependencies: 1174
-- Name: FUNCTION st_length(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geography) IS 'args: gg - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 568 (class 1255 OID 16606)
-- Name: st_length(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.st_length(geometry) OWNER TO postgres;

--
-- TOC entry 4905 (class 0 OID 0)
-- Dependencies: 568
-- Name: FUNCTION st_length(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geometry) IS 'args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 1175 (class 1255 OID 17304)
-- Name: st_length(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Length($1::geometry);  $_$;


ALTER FUNCTION public.st_length(text) OWNER TO postgres;

--
-- TOC entry 1173 (class 1255 OID 17302)
-- Name: st_length(geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geography, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geography_length';


ALTER FUNCTION public.st_length(geography, boolean) OWNER TO postgres;

--
-- TOC entry 4906 (class 0 OID 0)
-- Dependencies: 1173
-- Name: FUNCTION st_length(geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geography, boolean) IS 'args: gg, use_spheroid - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 566 (class 1255 OID 16604)
-- Name: st_length2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.st_length2d(geometry) OWNER TO postgres;

--
-- TOC entry 4907 (class 0 OID 0)
-- Dependencies: 566
-- Name: FUNCTION st_length2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length2d(geometry) IS 'args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length';


--
-- TOC entry 574 (class 1255 OID 16612)
-- Name: st_length2d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length2d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length2d_ellipsoid';


ALTER FUNCTION public.st_length2d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 4908 (class 0 OID 0)
-- Dependencies: 574
-- Name: FUNCTION st_length2d_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length2d_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';


--
-- TOC entry 564 (class 1255 OID 16602)
-- Name: st_length3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.st_length3d(geometry) OWNER TO postgres;

--
-- TOC entry 4909 (class 0 OID 0)
-- Dependencies: 564
-- Name: FUNCTION st_length3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length3d(geometry) IS 'args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.';


--
-- TOC entry 570 (class 1255 OID 16608)
-- Name: st_length3d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length3d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.st_length3d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 4910 (class 0 OID 0)
-- Dependencies: 570
-- Name: FUNCTION st_length3d_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length3d_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.';


--
-- TOC entry 572 (class 1255 OID 16610)
-- Name: st_length_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.st_length_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 4911 (class 0 OID 0)
-- Dependencies: 572
-- Name: FUNCTION st_length_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';


--
-- TOC entry 778 (class 1255 OID 16856)
-- Name: st_line_interpolate_point(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_interpolate_point(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_interpolate_point';


ALTER FUNCTION public.st_line_interpolate_point(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4912 (class 0 OID 0)
-- Dependencies: 778
-- Name: FUNCTION st_line_interpolate_point(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_interpolate_point(geometry, double precision) IS 'args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.';


--
-- TOC entry 782 (class 1255 OID 16860)
-- Name: st_line_locate_point(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_locate_point(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_locate_point';


ALTER FUNCTION public.st_line_locate_point(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4913 (class 0 OID 0)
-- Dependencies: 782
-- Name: FUNCTION st_line_locate_point(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_locate_point(geometry, geometry) IS 'args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.';


--
-- TOC entry 780 (class 1255 OID 16858)
-- Name: st_line_substring(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_substring(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_substring';


ALTER FUNCTION public.st_line_substring(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4914 (class 0 OID 0)
-- Dependencies: 780
-- Name: FUNCTION st_line_substring(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_substring(geometry, double precision, double precision) IS 'args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.';


--
-- TOC entry 799 (class 1255 OID 16877)
-- Name: st_linecrossingdirection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linecrossingdirection(geometry, geometry) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $_$;


ALTER FUNCTION public.st_linecrossingdirection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4915 (class 0 OID 0)
-- Dependencies: 799
-- Name: FUNCTION st_linecrossingdirection(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linecrossingdirection(geometry, geometry) IS 'args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.';


--
-- TOC entry 659 (class 1255 OID 16697)
-- Name: st_linefrommultipoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefrommultipoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_from_mpoint';


ALTER FUNCTION public.st_linefrommultipoint(geometry) OWNER TO postgres;

--
-- TOC entry 4916 (class 0 OID 0)
-- Dependencies: 659
-- Name: FUNCTION st_linefrommultipoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefrommultipoint(geometry) IS 'args: aMultiPoint - Creates a LineString from a MultiPoint geometry.';


--
-- TOC entry 968 (class 1255 OID 17061)
-- Name: st_linefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromtext(text) OWNER TO postgres;

--
-- TOC entry 4917 (class 0 OID 0)
-- Dependencies: 968
-- Name: FUNCTION st_linefromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromtext(text) IS 'args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';


--
-- TOC entry 970 (class 1255 OID 17063)
-- Name: st_linefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4918 (class 0 OID 0)
-- Dependencies: 970
-- Name: FUNCTION st_linefromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';


--
-- TOC entry 1019 (class 1255 OID 17112)
-- Name: st_linefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 4919 (class 0 OID 0)
-- Dependencies: 1019
-- Name: FUNCTION st_linefromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromwkb(bytea) IS 'args: WKB - Makes a LINESTRING from WKB with the given SRID';


--
-- TOC entry 1017 (class 1255 OID 17110)
-- Name: st_linefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 4920 (class 0 OID 0)
-- Dependencies: 1017
-- Name: FUNCTION st_linefromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromwkb(bytea, integer) IS 'args: WKB, srid - Makes a LINESTRING from WKB with the given SRID';


--
-- TOC entry 681 (class 1255 OID 16719)
-- Name: st_linemerge(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linemerge(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'linemerge';


ALTER FUNCTION public.st_linemerge(geometry) OWNER TO postgres;

--
-- TOC entry 4921 (class 0 OID 0)
-- Dependencies: 681
-- Name: FUNCTION st_linemerge(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linemerge(geometry) IS 'args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.';


--
-- TOC entry 1023 (class 1255 OID 17116)
-- Name: st_linestringfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linestringfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linestringfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 4922 (class 0 OID 0)
-- Dependencies: 1023
-- Name: FUNCTION st_linestringfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linestringfromwkb(bytea) IS 'args: WKB - Makes a geometry from WKB with the given SRID.';


--
-- TOC entry 1021 (class 1255 OID 17114)
-- Name: st_linestringfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linestringfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linestringfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 4923 (class 0 OID 0)
-- Dependencies: 1021
-- Name: FUNCTION st_linestringfromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linestringfromwkb(bytea, integer) IS 'args: WKB, srid - Makes a geometry from WKB with the given SRID.';


--
-- TOC entry 1193 (class 1255 OID 17322)
-- Name: st_linetocurve(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linetocurve(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_line_desegmentize';


ALTER FUNCTION public.st_linetocurve(geometry) OWNER TO postgres;

--
-- TOC entry 4924 (class 0 OID 0)
-- Dependencies: 1193
-- Name: FUNCTION st_linetocurve(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linetocurve(geometry) IS 'args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON';


--
-- TOC entry 786 (class 1255 OID 16864)
-- Name: st_locate_along_measure(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locate_along_measure(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.st_locate_along_measure(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4925 (class 0 OID 0)
-- Dependencies: 786
-- Name: FUNCTION st_locate_along_measure(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locate_along_measure(geometry, double precision) IS 'args: ageom_with_measure, a_measure - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.';


--
-- TOC entry 784 (class 1255 OID 16862)
-- Name: st_locate_between_measures(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locate_between_measures(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.st_locate_between_measures(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4926 (class 0 OID 0)
-- Dependencies: 784
-- Name: FUNCTION st_locate_between_measures(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) IS 'args: geomA, measure_start, measure_end - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.';


--
-- TOC entry 800 (class 1255 OID 16878)
-- Name: st_locatebetweenelevations(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locatebetweenelevations(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_LocateBetweenElevations';


ALTER FUNCTION public.st_locatebetweenelevations(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4927 (class 0 OID 0)
-- Dependencies: 800
-- Name: FUNCTION st_locatebetweenelevations(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locatebetweenelevations(geometry, double precision, double precision) IS 'args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.';


--
-- TOC entry 1066 (class 1255 OID 17158)
-- Name: st_longestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_longestline(geometry, geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$_$;


ALTER FUNCTION public.st_longestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4928 (class 0 OID 0)
-- Dependencies: 1066
-- Name: FUNCTION st_longestline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_longestline(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.';


--
-- TOC entry 936 (class 1255 OID 17029)
-- Name: st_m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.st_m(geometry) OWNER TO postgres;

--
-- TOC entry 4929 (class 0 OID 0)
-- Dependencies: 936
-- Name: FUNCTION st_m(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_m(geometry) IS 'args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 652 (class 1255 OID 16690)
-- Name: st_makebox2d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makebox2d(geometry, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX2DFLOAT4_construct';


ALTER FUNCTION public.st_makebox2d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4930 (class 0 OID 0)
-- Dependencies: 652
-- Name: FUNCTION st_makebox2d(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makebox2d(geometry, geometry) IS 'args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.';


--
-- TOC entry 654 (class 1255 OID 16692)
-- Name: st_makebox3d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makebox3d(geometry, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_construct';


ALTER FUNCTION public.st_makebox3d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4931 (class 0 OID 0)
-- Dependencies: 654
-- Name: FUNCTION st_makebox3d(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makebox3d(geometry, geometry) IS 'args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.';


--
-- TOC entry 670 (class 1255 OID 16708)
-- Name: st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ST_MakeEnvelope';


ALTER FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer) OWNER TO postgres;

--
-- TOC entry 4932 (class 0 OID 0)
-- Dependencies: 670
-- Name: FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) IS 'args: xmin, ymin, xmax, ymax, srid - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.';


--
-- TOC entry 657 (class 1255 OID 16695)
-- Name: st_makeline(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.st_makeline(geometry[]) OWNER TO postgres;

--
-- TOC entry 4933 (class 0 OID 0)
-- Dependencies: 657
-- Name: FUNCTION st_makeline(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeline(geometry[]) IS 'args: point_array - Creates a Linestring from point geometries.';


--
-- TOC entry 661 (class 1255 OID 16699)
-- Name: st_makeline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makeline';


ALTER FUNCTION public.st_makeline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4934 (class 0 OID 0)
-- Dependencies: 661
-- Name: FUNCTION st_makeline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeline(geometry, geometry) IS 'args: point1, point2 - Creates a Linestring from point geometries.';


--
-- TOC entry 656 (class 1255 OID 16694)
-- Name: st_makeline_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.st_makeline_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 644 (class 1255 OID 16682)
-- Name: st_makepoint(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4935 (class 0 OID 0)
-- Dependencies: 644
-- Name: FUNCTION st_makepoint(double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision) IS 'args: x, y - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 646 (class 1255 OID 16684)
-- Name: st_makepoint(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4936 (class 0 OID 0)
-- Dependencies: 646
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision, double precision) IS 'args: x, y, z - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 648 (class 1255 OID 16686)
-- Name: st_makepoint(double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4937 (class 0 OID 0)
-- Dependencies: 648
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) IS 'args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 650 (class 1255 OID 16688)
-- Name: st_makepointm(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepointm(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint3dm';


ALTER FUNCTION public.st_makepointm(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4938 (class 0 OID 0)
-- Dependencies: 650
-- Name: FUNCTION st_makepointm(double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepointm(double precision, double precision, double precision) IS 'args: x, y, m - Creates a point geometry with an x y and m coordinate.';


--
-- TOC entry 674 (class 1255 OID 16712)
-- Name: st_makepolygon(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepolygon(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.st_makepolygon(geometry) OWNER TO postgres;

--
-- TOC entry 4939 (class 0 OID 0)
-- Dependencies: 674
-- Name: FUNCTION st_makepolygon(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepolygon(geometry) IS 'args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';


--
-- TOC entry 672 (class 1255 OID 16710)
-- Name: st_makepolygon(geometry, geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepolygon(geometry, geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.st_makepolygon(geometry, geometry[]) OWNER TO postgres;

--
-- TOC entry 4940 (class 0 OID 0)
-- Dependencies: 672
-- Name: FUNCTION st_makepolygon(geometry, geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepolygon(geometry, geometry[]) IS 'args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';


--
-- TOC entry 1062 (class 1255 OID 17154)
-- Name: st_maxdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_maxdistance(geometry, geometry) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$_$;


ALTER FUNCTION public.st_maxdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4941 (class 0 OID 0)
-- Dependencies: 1062
-- Name: FUNCTION st_maxdistance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_maxdistance(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.';


--
-- TOC entry 556 (class 1255 OID 16594)
-- Name: st_mem_size(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mem_size(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_mem_size';


ALTER FUNCTION public.st_mem_size(geometry) OWNER TO postgres;

--
-- TOC entry 4942 (class 0 OID 0)
-- Dependencies: 556
-- Name: FUNCTION st_mem_size(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mem_size(geometry) IS 'args: geomA - Returns the amount of space (in bytes) the geometry takes.';


--
-- TOC entry 1195 (class 1255 OID 17325)
-- Name: st_minimumboundingcircle(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_minimumboundingcircle(geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MinimumBoundingCircle($1, 48)$_$;


ALTER FUNCTION public.st_minimumboundingcircle(geometry) OWNER TO postgres;

--
-- TOC entry 4943 (class 0 OID 0)
-- Dependencies: 1195
-- Name: FUNCTION st_minimumboundingcircle(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_minimumboundingcircle(geometry) IS 'args: geomA - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';


--
-- TOC entry 1194 (class 1255 OID 17323)
-- Name: st_minimumboundingcircle(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;


	BEGIN

	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;

	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;

	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN MakeLine(PointN(ring,idx1),PointN(ring,idx2));

	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.

	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_Line_interpolate_point(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);

	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.

				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_line_interpolate_point(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Translate(ST_Rotate(ST_Translate(l1,-X(p1),-Y(p1)),pi()/2),X(p1),Y(p1));
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,2))+sin(a1)*dist,Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,1))-sin(a1)*dist,Y(ST_PointN(l1,1))-cos(a1)*dist),0);

				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_Line_interpolate_point(l2,0.5);
				l2 = ST_Translate(ST_Rotate(ST_Translate(l2,-X(p2),-Y(p2)),pi()/2),X(p2),Y(p2));
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,2))+sin(a2)*dist,Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,1))-sin(a2)*dist,Y(ST_PointN(l2,1))-cos(a2)*dist),0);

				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);

	END;
$$;


ALTER FUNCTION public.st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) OWNER TO postgres;

--
-- TOC entry 4944 (class 0 OID 0)
-- Dependencies: 1194
-- Name: FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) IS 'args: geomA, num_segs_per_qt_circ - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';


--
-- TOC entry 984 (class 1255 OID 17077)
-- Name: st_mlinefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromtext(text) OWNER TO postgres;

--
-- TOC entry 4945 (class 0 OID 0)
-- Dependencies: 984
-- Name: FUNCTION st_mlinefromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mlinefromtext(text) IS 'args: WKT - Return a specified ST_MultiLineString value from WKT representation.';


--
-- TOC entry 982 (class 1255 OID 17075)
-- Name: st_mlinefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4946 (class 0 OID 0)
-- Dependencies: 982
-- Name: FUNCTION st_mlinefromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mlinefromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.';


--
-- TOC entry 1047 (class 1255 OID 17139)
-- Name: st_mlinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1045 (class 1255 OID 17137)
-- Name: st_mlinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 992 (class 1255 OID 17085)
-- Name: st_mpointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromtext(text) OWNER TO postgres;

--
-- TOC entry 4947 (class 0 OID 0)
-- Dependencies: 992
-- Name: FUNCTION st_mpointfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpointfromtext(text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 990 (class 1255 OID 17083)
-- Name: st_mpointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4948 (class 0 OID 0)
-- Dependencies: 990
-- Name: FUNCTION st_mpointfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpointfromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1036 (class 1255 OID 17128)
-- Name: st_mpointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1034 (class 1255 OID 17126)
-- Name: st_mpointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 999 (class 1255 OID 17092)
-- Name: st_mpolyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromtext(text) OWNER TO postgres;

--
-- TOC entry 4949 (class 0 OID 0)
-- Dependencies: 999
-- Name: FUNCTION st_mpolyfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpolyfromtext(text) IS 'args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 997 (class 1255 OID 17090)
-- Name: st_mpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4950 (class 0 OID 0)
-- Dependencies: 997
-- Name: FUNCTION st_mpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpolyfromtext(text, integer) IS 'args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1051 (class 1255 OID 17143)
-- Name: st_mpolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1049 (class 1255 OID 17141)
-- Name: st_mpolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 609 (class 1255 OID 16647)
-- Name: st_multi(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multi(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_force_multi';


ALTER FUNCTION public.st_multi(geometry) OWNER TO postgres;

--
-- TOC entry 4951 (class 0 OID 0)
-- Dependencies: 609
-- Name: FUNCTION st_multi(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_multi(geometry) IS 'args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.';


--
-- TOC entry 1043 (class 1255 OID 17135)
-- Name: st_multilinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multilinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 986 (class 1255 OID 17079)
-- Name: st_multilinestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MLineFromText($1)$_$;


ALTER FUNCTION public.st_multilinestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 988 (class 1255 OID 17081)
-- Name: st_multilinestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MLineFromText($1, $2)$_$;


ALTER FUNCTION public.st_multilinestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 995 (class 1255 OID 17088)
-- Name: st_multipointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1)$_$;


ALTER FUNCTION public.st_multipointfromtext(text) OWNER TO postgres;

--
-- TOC entry 1040 (class 1255 OID 17132)
-- Name: st_multipointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1038 (class 1255 OID 17130)
-- Name: st_multipointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1055 (class 1255 OID 17147)
-- Name: st_multipolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1053 (class 1255 OID 17145)
-- Name: st_multipolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1003 (class 1255 OID 17096)
-- Name: st_multipolygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1)$_$;


ALTER FUNCTION public.st_multipolygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 1001 (class 1255 OID 17094)
-- Name: st_multipolygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1, $2)$_$;


ALTER FUNCTION public.st_multipolygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 627 (class 1255 OID 16665)
-- Name: st_ndims(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ndims(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.st_ndims(geometry) OWNER TO postgres;

--
-- TOC entry 4952 (class 0 OID 0)
-- Dependencies: 627
-- Name: FUNCTION st_ndims(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ndims(geometry) IS 'args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.';


--
-- TOC entry 560 (class 1255 OID 16598)
-- Name: st_npoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_npoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_npoints';


ALTER FUNCTION public.st_npoints(geometry) OWNER TO postgres;

--
-- TOC entry 4953 (class 0 OID 0)
-- Dependencies: 560
-- Name: FUNCTION st_npoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_npoints(geometry) IS 'args: g1 - Return the number of points (vertexes) in a geometry.';


--
-- TOC entry 562 (class 1255 OID 16600)
-- Name: st_nrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_nrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_nrings';


ALTER FUNCTION public.st_nrings(geometry) OWNER TO postgres;

--
-- TOC entry 4954 (class 0 OID 0)
-- Dependencies: 562
-- Name: FUNCTION st_nrings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_nrings(geometry) IS 'args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.';


--
-- TOC entry 912 (class 1255 OID 17005)
-- Name: st_numgeometries(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numgeometries(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numgeometries_collection';


ALTER FUNCTION public.st_numgeometries(geometry) OWNER TO postgres;

--
-- TOC entry 4955 (class 0 OID 0)
-- Dependencies: 912
-- Name: FUNCTION st_numgeometries(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numgeometries(geometry) IS 'args: a_multi_or_geomcollection - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, otherwise return NULL.';


--
-- TOC entry 922 (class 1255 OID 17015)
-- Name: st_numinteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numinteriorring(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.st_numinteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 4956 (class 0 OID 0)
-- Dependencies: 922
-- Name: FUNCTION st_numinteriorring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numinteriorring(geometry) IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.';


--
-- TOC entry 920 (class 1255 OID 17013)
-- Name: st_numinteriorrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numinteriorrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.st_numinteriorrings(geometry) OWNER TO postgres;

--
-- TOC entry 4957 (class 0 OID 0)
-- Dependencies: 920
-- Name: FUNCTION st_numinteriorrings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numinteriorrings(geometry) IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. This will work with both POLYGON and MULTIPOLYGON types but only looks at the first polygon. Return NULL if there is no polygon in the geometry.';


--
-- TOC entry 910 (class 1255 OID 17003)
-- Name: st_numpoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numpoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_numpoints_linestring';


ALTER FUNCTION public.st_numpoints(geometry) OWNER TO postgres;

--
-- TOC entry 4958 (class 0 OID 0)
-- Dependencies: 910
-- Name: FUNCTION st_numpoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numpoints(geometry) IS 'args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.';


--
-- TOC entry 1089 (class 1255 OID 17182)
-- Name: st_orderingequals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_orderingequals(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$_$;


ALTER FUNCTION public.st_orderingequals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4959 (class 0 OID 0)
-- Dependencies: 1089
-- Name: FUNCTION st_orderingequals(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_orderingequals(geometry, geometry) IS 'args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.';


--
-- TOC entry 860 (class 1255 OID 16953)
-- Name: st_overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_overlaps(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$_$;


ALTER FUNCTION public.st_overlaps(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4960 (class 0 OID 0)
-- Dependencies: 860
-- Name: FUNCTION st_overlaps(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_overlaps(geometry, geometry) IS 'args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.';


--
-- TOC entry 580 (class 1255 OID 16618)
-- Name: st_perimeter(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.st_perimeter(geometry) OWNER TO postgres;

--
-- TOC entry 4961 (class 0 OID 0)
-- Dependencies: 580
-- Name: FUNCTION st_perimeter(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter(geometry) IS 'args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface value. (Polygon, Multipolygon)';


--
-- TOC entry 578 (class 1255 OID 16616)
-- Name: st_perimeter2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.st_perimeter2d(geometry) OWNER TO postgres;

--
-- TOC entry 4962 (class 0 OID 0)
-- Dependencies: 578
-- Name: FUNCTION st_perimeter2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter2d(geometry) IS 'args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.';


--
-- TOC entry 576 (class 1255 OID 16614)
-- Name: st_perimeter3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.st_perimeter3d(geometry) OWNER TO postgres;

--
-- TOC entry 4963 (class 0 OID 0)
-- Dependencies: 576
-- Name: FUNCTION st_perimeter3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter3d(geometry) IS 'args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.';


--
-- TOC entry 1092 (class 1255 OID 17185)
-- Name: st_point(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_point(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_point(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4964 (class 0 OID 0)
-- Dependencies: 1092
-- Name: FUNCTION st_point(double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_point(double precision, double precision) IS 'args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.';


--
-- TOC entry 592 (class 1255 OID 16630)
-- Name: st_point_inside_circle(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_inside_circle_point';


ALTER FUNCTION public.st_point_inside_circle(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4965 (class 0 OID 0)
-- Dependencies: 592
-- Name: FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) IS 'args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y , radius';


--
-- TOC entry 964 (class 1255 OID 17057)
-- Name: st_pointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromtext(text) OWNER TO postgres;

--
-- TOC entry 4966 (class 0 OID 0)
-- Dependencies: 964
-- Name: FUNCTION st_pointfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointfromtext(text) IS 'args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';


--
-- TOC entry 966 (class 1255 OID 17059)
-- Name: st_pointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4967 (class 0 OID 0)
-- Dependencies: 966
-- Name: FUNCTION st_pointfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointfromtext(text, integer) IS 'args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';


--
-- TOC entry 1015 (class 1255 OID 17108)
-- Name: st_pointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1013 (class 1255 OID 17106)
-- Name: st_pointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 928 (class 1255 OID 17021)
-- Name: st_pointn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_pointn_linestring';


ALTER FUNCTION public.st_pointn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4968 (class 0 OID 0)
-- Dependencies: 928
-- Name: FUNCTION st_pointn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointn(geometry, integer) IS 'args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.';


--
-- TOC entry 868 (class 1255 OID 16961)
-- Name: st_pointonsurface(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointonsurface(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pointonsurface';


ALTER FUNCTION public.st_pointonsurface(geometry) OWNER TO postgres;

--
-- TOC entry 4969 (class 0 OID 0)
-- Dependencies: 868
-- Name: FUNCTION st_pointonsurface(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointonsurface(geometry) IS 'args: g1 - Returns a POINT guaranteed to lie on the surface.';


--
-- TOC entry 974 (class 1255 OID 17067)
-- Name: st_polyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromtext(text) OWNER TO postgres;

--
-- TOC entry 976 (class 1255 OID 17069)
-- Name: st_polyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1027 (class 1255 OID 17120)
-- Name: st_polyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1025 (class 1255 OID 17118)
-- Name: st_polyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1095 (class 1255 OID 17188)
-- Name: st_polygon(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygon(geometry, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT setSRID(makepolygon($1), $2)
	$_$;


ALTER FUNCTION public.st_polygon(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4970 (class 0 OID 0)
-- Dependencies: 1095
-- Name: FUNCTION st_polygon(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygon(geometry, integer) IS 'args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.';


--
-- TOC entry 980 (class 1255 OID 17073)
-- Name: st_polygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_PolyFromText($1)$_$;


ALTER FUNCTION public.st_polygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 4971 (class 0 OID 0)
-- Dependencies: 980
-- Name: FUNCTION st_polygonfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonfromtext(text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 978 (class 1255 OID 17071)
-- Name: st_polygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1, $2)$_$;


ALTER FUNCTION public.st_polygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 4972 (class 0 OID 0)
-- Dependencies: 978
-- Name: FUNCTION st_polygonfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonfromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1031 (class 1255 OID 17124)
-- Name: st_polygonfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polygonfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1029 (class 1255 OID 17122)
-- Name: st_polygonfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polygonfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 679 (class 1255 OID 16717)
-- Name: st_polygonize(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonize(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.st_polygonize(geometry[]) OWNER TO postgres;

--
-- TOC entry 4973 (class 0 OID 0)
-- Dependencies: 679
-- Name: FUNCTION st_polygonize(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonize(geometry[]) IS 'args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';


--
-- TOC entry 678 (class 1255 OID 16716)
-- Name: st_polygonize_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonize_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.st_polygonize_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 496 (class 1255 OID 16501)
-- Name: st_postgis_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_postgis_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.st_postgis_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 495 (class 1255 OID 16500)
-- Name: st_postgis_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_postgis_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.st_postgis_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 830 (class 1255 OID 16923)
-- Name: st_relate(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_relate(geometry, geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'relate_full';


ALTER FUNCTION public.st_relate(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4974 (class 0 OID 0)
-- Dependencies: 830
-- Name: FUNCTION st_relate(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_relate(geometry, geometry) IS 'args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';


--
-- TOC entry 832 (class 1255 OID 16925)
-- Name: st_relate(geometry, geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_relate(geometry, geometry, text) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'relate_pattern';


ALTER FUNCTION public.st_relate(geometry, geometry, text) OWNER TO postgres;

--
-- TOC entry 4975 (class 0 OID 0)
-- Dependencies: 832
-- Name: FUNCTION st_relate(geometry, geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_relate(geometry, geometry, text) IS 'args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';


--
-- TOC entry 667 (class 1255 OID 16705)
-- Name: st_removepoint(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_removepoint(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_removepoint';


ALTER FUNCTION public.st_removepoint(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4976 (class 0 OID 0)
-- Dependencies: 667
-- Name: FUNCTION st_removepoint(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_removepoint(geometry, integer) IS 'args: linestring, offset - Removes point from a linestring. Offset is 0-based.';


--
-- TOC entry 619 (class 1255 OID 16657)
-- Name: st_reverse(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_reverse(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_reverse';


ALTER FUNCTION public.st_reverse(geometry) OWNER TO postgres;

--
-- TOC entry 4977 (class 0 OID 0)
-- Dependencies: 619
-- Name: FUNCTION st_reverse(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_reverse(geometry) IS 'args: g1 - Returns the geometry with vertex order reversed.';


--
-- TOC entry 435 (class 1255 OID 16419)
-- Name: st_rotate(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotate(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT rotateZ($1, $2)$_$;


ALTER FUNCTION public.st_rotate(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4978 (class 0 OID 0)
-- Dependencies: 435
-- Name: FUNCTION st_rotate(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotate(geometry, double precision) IS 'args: geomA, rotZRadians - This is a synonym for ST_RotateZ';


--
-- TOC entry 437 (class 1255 OID 16421)
-- Name: st_rotatex(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatex(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$_$;


ALTER FUNCTION public.st_rotatex(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4979 (class 0 OID 0)
-- Dependencies: 437
-- Name: FUNCTION st_rotatex(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatex(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.';


--
-- TOC entry 439 (class 1255 OID 16423)
-- Name: st_rotatey(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatey(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$_$;


ALTER FUNCTION public.st_rotatey(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4980 (class 0 OID 0)
-- Dependencies: 439
-- Name: FUNCTION st_rotatey(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatey(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.';


--
-- TOC entry 433 (class 1255 OID 16417)
-- Name: st_rotatez(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatez(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$_$;


ALTER FUNCTION public.st_rotatez(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4981 (class 0 OID 0)
-- Dependencies: 433
-- Name: FUNCTION st_rotatez(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatez(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.';


--
-- TOC entry 447 (class 1255 OID 16431)
-- Name: st_scale(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_scale(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT scale($1, $2, $3, 1)$_$;


ALTER FUNCTION public.st_scale(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4982 (class 0 OID 0)
-- Dependencies: 447
-- Name: FUNCTION st_scale(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_scale(geometry, double precision, double precision) IS 'args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';


--
-- TOC entry 445 (class 1255 OID 16429)
-- Name: st_scale(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_scale(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$_$;


ALTER FUNCTION public.st_scale(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4983 (class 0 OID 0)
-- Dependencies: 445
-- Name: FUNCTION st_scale(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_scale(geometry, double precision, double precision, double precision) IS 'args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';


--
-- TOC entry 776 (class 1255 OID 16854)
-- Name: st_segmentize(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_segmentize(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_segmentize2d';


ALTER FUNCTION public.st_segmentize(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4984 (class 0 OID 0)
-- Dependencies: 776
-- Name: FUNCTION st_segmentize(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_segmentize(geometry, double precision) IS 'args: geomA, max_length - Return a modified geometry having no segment longer than the given distance. Distance computation is performed in 2d only.';


--
-- TOC entry 554 (class 1255 OID 16592)
-- Name: st_setfactor(chip, real); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setfactor(chip, real) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_setFactor';


ALTER FUNCTION public.st_setfactor(chip, real) OWNER TO postgres;

--
-- TOC entry 669 (class 1255 OID 16707)
-- Name: st_setpoint(geometry, integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setpoint(geometry, integer, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_setpoint_linestring';


ALTER FUNCTION public.st_setpoint(geometry, integer, geometry) OWNER TO postgres;

--
-- TOC entry 4985 (class 0 OID 0)
-- Dependencies: 669
-- Name: FUNCTION st_setpoint(geometry, integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_setpoint(geometry, integer, geometry) IS 'args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.';


--
-- TOC entry 948 (class 1255 OID 17041)
-- Name: st_setsrid(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setsrid(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_setSRID';


ALTER FUNCTION public.st_setsrid(geometry, integer) OWNER TO postgres;

--
-- TOC entry 4986 (class 0 OID 0)
-- Dependencies: 948
-- Name: FUNCTION st_setsrid(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_setsrid(geometry, integer) IS 'args: geom, srid - Sets the SRID on a geometry to a particular integer value.';


--
-- TOC entry 451 (class 1255 OID 16435)
-- Name: st_shift_longitude(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_shift_longitude(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_longitude_shift';


ALTER FUNCTION public.st_shift_longitude(geometry) OWNER TO postgres;

--
-- TOC entry 4987 (class 0 OID 0)
-- Dependencies: 451
-- Name: FUNCTION st_shift_longitude(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_shift_longitude(geometry) IS 'args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map';


--
-- TOC entry 1064 (class 1255 OID 17156)
-- Name: st_shortestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_shortestline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_shortestline2d';


ALTER FUNCTION public.st_shortestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4988 (class 0 OID 0)
-- Dependencies: 1064
-- Name: FUNCTION st_shortestline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_shortestline(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional shortest line between two geometries';


--
-- TOC entry 717 (class 1255 OID 16844)
-- Name: st_simplify(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_simplify(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_simplify2d';


ALTER FUNCTION public.st_simplify(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4989 (class 0 OID 0)
-- Dependencies: 717
-- Name: FUNCTION st_simplify(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_simplify(geometry, double precision) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.';


--
-- TOC entry 801 (class 1255 OID 16879)
-- Name: st_simplifypreservetopology(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_simplifypreservetopology(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'topologypreservesimplify';


ALTER FUNCTION public.st_simplifypreservetopology(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4990 (class 0 OID 0)
-- Dependencies: 801
-- Name: FUNCTION st_simplifypreservetopology(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_simplifypreservetopology(geometry, double precision) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.';


--
-- TOC entry 772 (class 1255 OID 16850)
-- Name: st_snaptogrid(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$_$;


ALTER FUNCTION public.st_snaptogrid(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 4991 (class 0 OID 0)
-- Dependencies: 772
-- Name: FUNCTION st_snaptogrid(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision) IS 'args: geomA, size - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 770 (class 1255 OID 16848)
-- Name: st_snaptogrid(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$_$;


ALTER FUNCTION public.st_snaptogrid(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4992 (class 0 OID 0)
-- Dependencies: 770
-- Name: FUNCTION st_snaptogrid(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision, double precision) IS 'args: geomA, sizeX, sizeY - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 768 (class 1255 OID 16846)
-- Name: st_snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_snaptogrid';


ALTER FUNCTION public.st_snaptogrid(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4993 (class 0 OID 0)
-- Dependencies: 768
-- Name: FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 774 (class 1255 OID 16852)
-- Name: st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_snaptogrid_pointoff';


ALTER FUNCTION public.st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 4994 (class 0 OID 0)
-- Dependencies: 774
-- Name: FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 403 (class 1255 OID 16395)
-- Name: st_spheroid_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_spheroid_in(cstring) RETURNS spheroid
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ellipsoid_in';


ALTER FUNCTION public.st_spheroid_in(cstring) OWNER TO postgres;

--
-- TOC entry 407 (class 1255 OID 16396)
-- Name: st_spheroid_out(spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_spheroid_out(spheroid) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'ellipsoid_out';


ALTER FUNCTION public.st_spheroid_out(spheroid) OWNER TO postgres;

--
-- TOC entry 541 (class 1255 OID 16579)
-- Name: st_srid(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_srid(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getSRID';


ALTER FUNCTION public.st_srid(chip) OWNER TO postgres;

--
-- TOC entry 946 (class 1255 OID 17039)
-- Name: st_srid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_srid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.st_srid(geometry) OWNER TO postgres;

--
-- TOC entry 4995 (class 0 OID 0)
-- Dependencies: 946
-- Name: FUNCTION st_srid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_srid(geometry) IS 'args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.';


--
-- TOC entry 938 (class 1255 OID 17031)
-- Name: st_startpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_startpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_startpoint_linestring';


ALTER FUNCTION public.st_startpoint(geometry) OWNER TO postgres;

--
-- TOC entry 4996 (class 0 OID 0)
-- Dependencies: 938
-- Name: FUNCTION st_startpoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_startpoint(geometry) IS 'args: geomA - Returns the first point of a LINESTRING geometry as a POINT.';


--
-- TOC entry 558 (class 1255 OID 16596)
-- Name: st_summary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_summary(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_summary';


ALTER FUNCTION public.st_summary(geometry) OWNER TO postgres;

--
-- TOC entry 4997 (class 0 OID 0)
-- Dependencies: 558
-- Name: FUNCTION st_summary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_summary(geometry) IS 'args: g - Returns a text summary of the contents of the ST_Geometry.';


--
-- TOC entry 810 (class 1255 OID 16888)
-- Name: st_symdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_symdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'symdifference';


ALTER FUNCTION public.st_symdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4998 (class 0 OID 0)
-- Dependencies: 810
-- Name: FUNCTION st_symdifference(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_symdifference(geometry, geometry) IS 'args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).';


--
-- TOC entry 812 (class 1255 OID 16890)
-- Name: st_symmetricdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_symmetricdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'symdifference';


ALTER FUNCTION public.st_symmetricdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 742 (class 1255 OID 16803)
-- Name: st_text(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_text(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_text';


ALTER FUNCTION public.st_text(geometry) OWNER TO postgres;

--
-- TOC entry 837 (class 1255 OID 16930)
-- Name: st_touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_touches(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Touches($1,$2)$_$;


ALTER FUNCTION public.st_touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 4999 (class 0 OID 0)
-- Dependencies: 837
-- Name: FUNCTION st_touches(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_touches(geometry, geometry) IS 'args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.';


--
-- TOC entry 731 (class 1255 OID 16785)
-- Name: st_transform(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_transform(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'transform';


ALTER FUNCTION public.st_transform(geometry, integer) OWNER TO postgres;

--
-- TOC entry 5000 (class 0 OID 0)
-- Dependencies: 731
-- Name: FUNCTION st_transform(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_transform(geometry, integer) IS 'args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.';


--
-- TOC entry 443 (class 1255 OID 16427)
-- Name: st_translate(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_translate(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT translate($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_translate(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 5001 (class 0 OID 0)
-- Dependencies: 443
-- Name: FUNCTION st_translate(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_translate(geometry, double precision, double precision) IS 'args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';


--
-- TOC entry 441 (class 1255 OID 16425)
-- Name: st_translate(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_translate(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_translate(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 5002 (class 0 OID 0)
-- Dependencies: 441
-- Name: FUNCTION st_translate(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_translate(geometry, double precision, double precision, double precision) IS 'args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';


--
-- TOC entry 449 (class 1255 OID 16433)
-- Name: st_transscale(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$_$;


ALTER FUNCTION public.st_transscale(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 5003 (class 0 OID 0)
-- Dependencies: 449
-- Name: FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.';


--
-- TOC entry 828 (class 1255 OID 16914)
-- Name: st_union(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_union(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.st_union(geometry[]) OWNER TO postgres;

--
-- TOC entry 5004 (class 0 OID 0)
-- Dependencies: 828
-- Name: FUNCTION st_union(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_union(geometry[]) IS 'args: g1_array - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 814 (class 1255 OID 16892)
-- Name: st_union(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_union(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'geomunion';


ALTER FUNCTION public.st_union(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 5005 (class 0 OID 0)
-- Dependencies: 814
-- Name: FUNCTION st_union(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_union(geometry, geometry) IS 'args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 827 (class 1255 OID 16913)
-- Name: st_unite_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_unite_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.st_unite_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 547 (class 1255 OID 16585)
-- Name: st_width(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_width(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getWidth';


ALTER FUNCTION public.st_width(chip) OWNER TO postgres;

--
-- TOC entry 848 (class 1255 OID 16941)
-- Name: st_within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_within(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Within($1,$2)$_$;


ALTER FUNCTION public.st_within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 5006 (class 0 OID 0)
-- Dependencies: 848
-- Name: FUNCTION st_within(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_within(geometry, geometry) IS 'args: A, B - Returns true if the geometry A is completely inside geometry B';


--
-- TOC entry 1086 (class 1255 OID 17179)
-- Name: st_wkbtosql(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_wkbtosql(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.st_wkbtosql(bytea) OWNER TO postgres;

--
-- TOC entry 5007 (class 0 OID 0)
-- Dependencies: 1086
-- Name: FUNCTION st_wkbtosql(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_wkbtosql(bytea) IS 'args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid';


--
-- TOC entry 1085 (class 1255 OID 17178)
-- Name: st_wkttosql(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_wkttosql(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_wkttosql(text) OWNER TO postgres;

--
-- TOC entry 5008 (class 0 OID 0)
-- Dependencies: 1085
-- Name: FUNCTION st_wkttosql(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_wkttosql(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 930 (class 1255 OID 17023)
-- Name: st_x(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_x(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_x_point';


ALTER FUNCTION public.st_x(geometry) OWNER TO postgres;

--
-- TOC entry 5009 (class 0 OID 0)
-- Dependencies: 930
-- Name: FUNCTION st_x(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_x(geometry) IS 'args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 468 (class 1255 OID 16457)
-- Name: st_xmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_xmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_xmax';


ALTER FUNCTION public.st_xmax(box3d) OWNER TO postgres;

--
-- TOC entry 5010 (class 0 OID 0)
-- Dependencies: 468
-- Name: FUNCTION st_xmax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_xmax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 462 (class 1255 OID 16451)
-- Name: st_xmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_xmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_xmin';


ALTER FUNCTION public.st_xmin(box3d) OWNER TO postgres;

--
-- TOC entry 5011 (class 0 OID 0)
-- Dependencies: 462
-- Name: FUNCTION st_xmin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_xmin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 932 (class 1255 OID 17025)
-- Name: st_y(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_y(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_y_point';


ALTER FUNCTION public.st_y(geometry) OWNER TO postgres;

--
-- TOC entry 5012 (class 0 OID 0)
-- Dependencies: 932
-- Name: FUNCTION st_y(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_y(geometry) IS 'args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 470 (class 1255 OID 16459)
-- Name: st_ymax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ymax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_ymax';


ALTER FUNCTION public.st_ymax(box3d) OWNER TO postgres;

--
-- TOC entry 5013 (class 0 OID 0)
-- Dependencies: 470
-- Name: FUNCTION st_ymax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ymax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 464 (class 1255 OID 16453)
-- Name: st_ymin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ymin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_ymin';


ALTER FUNCTION public.st_ymin(box3d) OWNER TO postgres;

--
-- TOC entry 5014 (class 0 OID 0)
-- Dependencies: 464
-- Name: FUNCTION st_ymin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ymin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 934 (class 1255 OID 17027)
-- Name: st_z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.st_z(geometry) OWNER TO postgres;

--
-- TOC entry 5015 (class 0 OID 0)
-- Dependencies: 934
-- Name: FUNCTION st_z(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_z(geometry) IS 'args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 472 (class 1255 OID 16461)
-- Name: st_zmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_zmax';


ALTER FUNCTION public.st_zmax(box3d) OWNER TO postgres;

--
-- TOC entry 5016 (class 0 OID 0)
-- Dependencies: 472
-- Name: FUNCTION st_zmax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 625 (class 1255 OID 16663)
-- Name: st_zmflag(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmflag(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_zmflag';


ALTER FUNCTION public.st_zmflag(geometry) OWNER TO postgres;

--
-- TOC entry 5017 (class 0 OID 0)
-- Dependencies: 625
-- Name: FUNCTION st_zmflag(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmflag(geometry) IS 'args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.';


--
-- TOC entry 466 (class 1255 OID 16455)
-- Name: st_zmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_zmin';


ALTER FUNCTION public.st_zmin(box3d) OWNER TO postgres;

--
-- TOC entry 5018 (class 0 OID 0)
-- Dependencies: 466
-- Name: FUNCTION st_zmin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 937 (class 1255 OID 17030)
-- Name: startpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION startpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_startpoint_linestring';


ALTER FUNCTION public.startpoint(geometry) OWNER TO postgres;

--
-- TOC entry 557 (class 1255 OID 16595)
-- Name: summary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION summary(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_summary';


ALTER FUNCTION public.summary(geometry) OWNER TO postgres;

--
-- TOC entry 809 (class 1255 OID 16887)
-- Name: symdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION symdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'symdifference';


ALTER FUNCTION public.symdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 811 (class 1255 OID 16889)
-- Name: symmetricdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION symmetricdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'symdifference';


ALTER FUNCTION public.symmetricdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1214 (class 1255 OID 190546)
-- Name: tabla_atributos(character varying); Type: FUNCTION; Schema: public; Owner: sistemas
--

CREATE FUNCTION tabla_atributos(tabla character varying, OUT columna1 character varying, OUT columna2 character varying, OUT columna3 character varying, OUT columna4 character varying) RETURNS SETOF record
    LANGUAGE sql
    AS $_$

SELECT c.column_name , c.data_type, c.is_nullable , c.table_name
FROM information_schema.columns c
LEFT JOIN information_schema.element_types e ON
c.table_catalog = e.object_catalog AND
c.table_name = e. object_schema AND
c.table_name = e.object_name AND
$1 = e.object_type
WHERE UPPER (c.table_name) = upper($1);

$_$;


ALTER FUNCTION public.tabla_atributos(tabla character varying, OUT columna1 character varying, OUT columna2 character varying, OUT columna3 character varying, OUT columna4 character varying) OWNER TO sistemas;

--
-- TOC entry 758 (class 1255 OID 16819)
-- Name: text(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION text(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_to_text';


ALTER FUNCTION public.text(geometry) OWNER TO postgres;

--
-- TOC entry 835 (class 1255 OID 16928)
-- Name: touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION touches(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'touches';


ALTER FUNCTION public.touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 730 (class 1255 OID 16784)
-- Name: transform(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transform(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'transform';


ALTER FUNCTION public.transform(geometry, integer) OWNER TO postgres;

--
-- TOC entry 442 (class 1255 OID 16426)
-- Name: translate(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT translate($1, $2, $3, 0)$_$;


ALTER FUNCTION public.translate(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 440 (class 1255 OID 16424)
-- Name: translate(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$_$;


ALTER FUNCTION public.translate(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 448 (class 1255 OID 16432)
-- Name: transscale(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transscale(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$_$;


ALTER FUNCTION public.transscale(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 826 (class 1255 OID 16912)
-- Name: unite_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION unite_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.unite_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1073 (class 1255 OID 17165)
-- Name: unlockrows(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION unlockrows(text) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.unlockrows(text) OWNER TO postgres;

--
-- TOC entry 5019 (class 0 OID 0)
-- Dependencies: 1073
-- Name: FUNCTION unlockrows(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION unlockrows(text) IS 'args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.';


--
-- TOC entry 726 (class 1255 OID 16780)
-- Name: updategeometrysrid(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 5020 (class 0 OID 0)
-- Dependencies: 726
-- Name: FUNCTION updategeometrysrid(character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, integer) IS 'args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 725 (class 1255 OID 16779)
-- Name: updategeometrysrid(character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 5021 (class 0 OID 0)
-- Dependencies: 725
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) IS 'args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 724 (class 1255 OID 16778)
-- Name: updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid != -1 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	END IF;

	-- Update ref from geometry_columns table
	EXECUTE 'UPDATE geometry_columns SET SRID = ' || new_srid::text ||
		' where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Make up constraint name
	cname = 'enforce_srid_'  || column_name;

	-- Drop enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' DROP constraint ' || quote_ident(cname);

	-- Update geometries SRID
	EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' SET ' || quote_ident(column_name) ||
		' = ST_SetSRID(' || quote_ident(column_name) ||
		', ' || new_srid::text || ')';

	-- Reset enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' ADD constraint ' || quote_ident(cname) ||
		' CHECK (st_srid(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')';

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 5022 (class 0 OID 0)
-- Dependencies: 724
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer) IS 'args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 546 (class 1255 OID 16584)
-- Name: width(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION width(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'CHIP_getWidth';


ALTER FUNCTION public.width(chip) OWNER TO postgres;

--
-- TOC entry 846 (class 1255 OID 16939)
-- Name: within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION within(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'within';


ALTER FUNCTION public.within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 929 (class 1255 OID 17022)
-- Name: x(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION x(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_x_point';


ALTER FUNCTION public.x(geometry) OWNER TO postgres;

--
-- TOC entry 467 (class 1255 OID 16456)
-- Name: xmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION xmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_xmax';


ALTER FUNCTION public.xmax(box3d) OWNER TO postgres;

--
-- TOC entry 461 (class 1255 OID 16450)
-- Name: xmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION xmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_xmin';


ALTER FUNCTION public.xmin(box3d) OWNER TO postgres;

--
-- TOC entry 931 (class 1255 OID 17024)
-- Name: y(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION y(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_y_point';


ALTER FUNCTION public.y(geometry) OWNER TO postgres;

--
-- TOC entry 469 (class 1255 OID 16458)
-- Name: ymax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ymax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_ymax';


ALTER FUNCTION public.ymax(box3d) OWNER TO postgres;

--
-- TOC entry 463 (class 1255 OID 16452)
-- Name: ymin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ymin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_ymin';


ALTER FUNCTION public.ymin(box3d) OWNER TO postgres;

--
-- TOC entry 933 (class 1255 OID 17026)
-- Name: z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.z(geometry) OWNER TO postgres;

--
-- TOC entry 471 (class 1255 OID 16460)
-- Name: zmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_zmax';


ALTER FUNCTION public.zmax(box3d) OWNER TO postgres;

--
-- TOC entry 624 (class 1255 OID 16662)
-- Name: zmflag(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmflag(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'LWGEOM_zmflag';


ALTER FUNCTION public.zmflag(geometry) OWNER TO postgres;

--
-- TOC entry 465 (class 1255 OID 16454)
-- Name: zmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '/opt/PostgreSQL/9.1/lib/postgis-1.5', 'BOX3D_zmin';


ALTER FUNCTION public.zmin(box3d) OWNER TO postgres;

--
-- TOC entry 2082 (class 1255 OID 16910)
-- Name: accum(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE accum(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_accum_finalfn
);


ALTER AGGREGATE public.accum(geometry) OWNER TO postgres;

--
-- TOC entry 2085 (class 1255 OID 16916)
-- Name: collect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE collect(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_collect_finalfn
);


ALTER AGGREGATE public.collect(geometry) OWNER TO postgres;

--
-- TOC entry 2073 (class 1255 OID 16733)
-- Name: extent(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE extent(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d_extent
);


ALTER AGGREGATE public.extent(geometry) OWNER TO postgres;

--
-- TOC entry 2075 (class 1255 OID 16737)
-- Name: extent3d(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE extent3d(geometry) (
    SFUNC = public.combine_bbox,
    STYPE = box3d
);


ALTER AGGREGATE public.extent3d(geometry) OWNER TO postgres;

--
-- TOC entry 2088 (class 1255 OID 190206)
-- Name: list(text); Type: AGGREGATE; Schema: public; Owner: sistemas
--

CREATE AGGREGATE list(text) (
    SFUNC = comma_cat,
    STYPE = text,
    INITCOND = ''
);


ALTER AGGREGATE public.list(text) OWNER TO sistemas;

--
-- TOC entry 2072 (class 1255 OID 16920)
-- Name: makeline(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE makeline(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_makeline_finalfn
);


ALTER AGGREGATE public.makeline(geometry) OWNER TO postgres;

--
-- TOC entry 2078 (class 1255 OID 16895)
-- Name: memcollect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE memcollect(geometry) (
    SFUNC = public.st_collect,
    STYPE = geometry
);


ALTER AGGREGATE public.memcollect(geometry) OWNER TO postgres;

--
-- TOC entry 2080 (class 1255 OID 16898)
-- Name: memgeomunion(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE memgeomunion(geometry) (
    SFUNC = geomunion,
    STYPE = geometry
);


ALTER AGGREGATE public.memgeomunion(geometry) OWNER TO postgres;

--
-- TOC entry 2077 (class 1255 OID 16918)
-- Name: polygonize(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE polygonize(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_polygonize_finalfn
);


ALTER AGGREGATE public.polygonize(geometry) OWNER TO postgres;

--
-- TOC entry 2083 (class 1255 OID 16911)
-- Name: st_accum(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_accum(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_accum_finalfn
);


ALTER AGGREGATE public.st_accum(geometry) OWNER TO postgres;

--
-- TOC entry 5023 (class 0 OID 0)
-- Dependencies: 2083
-- Name: AGGREGATE st_accum(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_accum(geometry) IS 'args: geomfield - Aggregate. Constructs an array of geometries.';


--
-- TOC entry 2086 (class 1255 OID 16917)
-- Name: st_collect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_collect(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_collect_finalfn
);


ALTER AGGREGATE public.st_collect(geometry) OWNER TO postgres;

--
-- TOC entry 5024 (class 0 OID 0)
-- Dependencies: 2086
-- Name: AGGREGATE st_collect(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_collect(geometry) IS 'args: g1field - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 2074 (class 1255 OID 16734)
-- Name: st_extent(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_extent(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d_extent
);


ALTER AGGREGATE public.st_extent(geometry) OWNER TO postgres;

--
-- TOC entry 5025 (class 0 OID 0)
-- Dependencies: 2074
-- Name: AGGREGATE st_extent(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_extent(geometry) IS 'args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.';


--
-- TOC entry 2076 (class 1255 OID 16738)
-- Name: st_extent3d(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_extent3d(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d
);


ALTER AGGREGATE public.st_extent3d(geometry) OWNER TO postgres;

--
-- TOC entry 5026 (class 0 OID 0)
-- Dependencies: 2076
-- Name: AGGREGATE st_extent3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_extent3d(geometry) IS 'args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.';


--
-- TOC entry 2087 (class 1255 OID 16921)
-- Name: st_makeline(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_makeline(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_makeline_finalfn
);


ALTER AGGREGATE public.st_makeline(geometry) OWNER TO postgres;

--
-- TOC entry 5027 (class 0 OID 0)
-- Dependencies: 2087
-- Name: AGGREGATE st_makeline(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_makeline(geometry) IS 'args: pointfield - Creates a Linestring from point geometries.';


--
-- TOC entry 2079 (class 1255 OID 16896)
-- Name: st_memcollect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_memcollect(geometry) (
    SFUNC = public.st_collect,
    STYPE = geometry
);


ALTER AGGREGATE public.st_memcollect(geometry) OWNER TO postgres;

--
-- TOC entry 2081 (class 1255 OID 16899)
-- Name: st_memunion(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_memunion(geometry) (
    SFUNC = public.st_union,
    STYPE = geometry
);


ALTER AGGREGATE public.st_memunion(geometry) OWNER TO postgres;

--
-- TOC entry 5028 (class 0 OID 0)
-- Dependencies: 2081
-- Name: AGGREGATE st_memunion(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_memunion(geometry) IS 'args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).';


--
-- TOC entry 2071 (class 1255 OID 16919)
-- Name: st_polygonize(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_polygonize(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_polygonize_finalfn
);


ALTER AGGREGATE public.st_polygonize(geometry) OWNER TO postgres;

--
-- TOC entry 5029 (class 0 OID 0)
-- Dependencies: 2071
-- Name: AGGREGATE st_polygonize(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_polygonize(geometry) IS 'args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';


--
-- TOC entry 2084 (class 1255 OID 16915)
-- Name: st_union(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_union(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_union_finalfn
);


ALTER AGGREGATE public.st_union(geometry) OWNER TO postgres;

--
-- TOC entry 5030 (class 0 OID 0)
-- Dependencies: 2084
-- Name: AGGREGATE st_union(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_union(geometry) IS 'args: g1field - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 2804 (class 2617 OID 16537)
-- Name: &&; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR && (
    PROCEDURE = geometry_overlap,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &&,
    RESTRICT = geometry_gist_sel,
    JOIN = geometry_gist_joinsel
);


ALTER OPERATOR public.&& (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2812 (class 2617 OID 17234)
-- Name: &&; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR && (
    PROCEDURE = geography_overlaps,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = &&,
    RESTRICT = geography_gist_selectivity,
    JOIN = geography_gist_join_selectivity
);


ALTER OPERATOR public.&& (geography, geography) OWNER TO postgres;

--
-- TOC entry 2801 (class 2617 OID 16532)
-- Name: &<; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &< (
    PROCEDURE = geometry_overleft,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2803 (class 2617 OID 16536)
-- Name: &<|; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &<| (
    PROCEDURE = geometry_overbelow,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = |&>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&<| (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2805 (class 2617 OID 16531)
-- Name: &>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &> (
    PROCEDURE = geometry_overright,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &<,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2795 (class 2617 OID 16487)
-- Name: <; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR < (
    PROCEDURE = geometry_lt,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2813 (class 2617 OID 17253)
-- Name: <; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR < (
    PROCEDURE = geography_lt,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (geography, geography) OWNER TO postgres;

--
-- TOC entry 2800 (class 2617 OID 16530)
-- Name: <<; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR << (
    PROCEDURE = geometry_left,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.<< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2802 (class 2617 OID 16534)
-- Name: <<|; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <<| (
    PROCEDURE = geometry_below,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = |>>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.<<| (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2796 (class 2617 OID 16488)
-- Name: <=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <= (
    PROCEDURE = geometry_le,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2814 (class 2617 OID 17254)
-- Name: <=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <= (
    PROCEDURE = geography_le,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (geography, geography) OWNER TO postgres;

--
-- TOC entry 2797 (class 2617 OID 16489)
-- Name: =; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR = (
    PROCEDURE = geometry_eq,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = =,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2815 (class 2617 OID 17255)
-- Name: =; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR = (
    PROCEDURE = geography_eq,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = =,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.= (geography, geography) OWNER TO postgres;

--
-- TOC entry 2799 (class 2617 OID 16485)
-- Name: >; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR > (
    PROCEDURE = geometry_gt,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2817 (class 2617 OID 17251)
-- Name: >; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR > (
    PROCEDURE = geography_gt,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (geography, geography) OWNER TO postgres;

--
-- TOC entry 2798 (class 2617 OID 16486)
-- Name: >=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >= (
    PROCEDURE = geometry_ge,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2816 (class 2617 OID 17252)
-- Name: >=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >= (
    PROCEDURE = geography_ge,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (geography, geography) OWNER TO postgres;

--
-- TOC entry 2806 (class 2617 OID 16529)
-- Name: >>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >> (
    PROCEDURE = geometry_right,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <<,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.>> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2810 (class 2617 OID 16540)
-- Name: @; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR @ (
    PROCEDURE = geometry_contained,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = ~,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@ (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2807 (class 2617 OID 16535)
-- Name: |&>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR |&> (
    PROCEDURE = geometry_overabove,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &<|,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.|&> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2808 (class 2617 OID 16533)
-- Name: |>>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR |>> (
    PROCEDURE = geometry_above,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <<|,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.|>> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2811 (class 2617 OID 16539)
-- Name: ~; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~ (
    PROCEDURE = geometry_contain,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = @,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.~ (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2809 (class 2617 OID 16538)
-- Name: ~=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~= (
    PROCEDURE = geometry_samebox,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = ~=,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR public.~= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 2934 (class 2616 OID 17257)
-- Name: btree_geography_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS btree_geography_ops
    DEFAULT FOR TYPE geography USING btree AS
    OPERATOR 1 <(geography,geography) ,
    OPERATOR 2 <=(geography,geography) ,
    OPERATOR 3 =(geography,geography) ,
    OPERATOR 4 >=(geography,geography) ,
    OPERATOR 5 >(geography,geography) ,
    FUNCTION 1 (geography, geography) geography_cmp(geography,geography);


ALTER OPERATOR CLASS public.btree_geography_ops USING btree OWNER TO postgres;

--
-- TOC entry 2931 (class 2616 OID 16491)
-- Name: btree_geometry_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS btree_geometry_ops
    DEFAULT FOR TYPE geometry USING btree AS
    OPERATOR 1 <(geometry,geometry) ,
    OPERATOR 2 <=(geometry,geometry) ,
    OPERATOR 3 =(geometry,geometry) ,
    OPERATOR 4 >=(geometry,geometry) ,
    OPERATOR 5 >(geometry,geometry) ,
    FUNCTION 1 (geometry, geometry) geometry_cmp(geometry,geometry);


ALTER OPERATOR CLASS public.btree_geometry_ops USING btree OWNER TO postgres;

--
-- TOC entry 2933 (class 2616 OID 17236)
-- Name: gist_geography_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist_geography_ops
    DEFAULT FOR TYPE geography USING gist AS
    STORAGE gidx ,
    OPERATOR 3 &&(geography,geography) ,
    FUNCTION 1 (geography, geography) geography_gist_consistent(internal,geometry,integer) ,
    FUNCTION 2 (geography, geography) geography_gist_union(bytea,internal) ,
    FUNCTION 3 (geography, geography) geography_gist_compress(internal) ,
    FUNCTION 4 (geography, geography) geography_gist_decompress(internal) ,
    FUNCTION 5 (geography, geography) geography_gist_penalty(internal,internal,internal) ,
    FUNCTION 6 (geography, geography) geography_gist_picksplit(internal,internal) ,
    FUNCTION 7 (geography, geography) geography_gist_same(box2d,box2d,internal);


ALTER OPERATOR CLASS public.gist_geography_ops USING gist OWNER TO postgres;

--
-- TOC entry 2932 (class 2616 OID 16549)
-- Name: gist_geometry_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist_geometry_ops
    DEFAULT FOR TYPE geometry USING gist AS
    STORAGE box2d ,
    OPERATOR 1 <<(geometry,geometry) ,
    OPERATOR 2 &<(geometry,geometry) ,
    OPERATOR 3 &&(geometry,geometry) ,
    OPERATOR 4 &>(geometry,geometry) ,
    OPERATOR 5 >>(geometry,geometry) ,
    OPERATOR 6 ~=(geometry,geometry) ,
    OPERATOR 7 ~(geometry,geometry) ,
    OPERATOR 8 @(geometry,geometry) ,
    OPERATOR 9 &<|(geometry,geometry) ,
    OPERATOR 10 <<|(geometry,geometry) ,
    OPERATOR 11 |>>(geometry,geometry) ,
    OPERATOR 12 |&>(geometry,geometry) ,
    FUNCTION 1 (geometry, geometry) lwgeom_gist_consistent(internal,geometry,integer) ,
    FUNCTION 2 (geometry, geometry) lwgeom_gist_union(bytea,internal) ,
    FUNCTION 3 (geometry, geometry) lwgeom_gist_compress(internal) ,
    FUNCTION 4 (geometry, geometry) lwgeom_gist_decompress(internal) ,
    FUNCTION 5 (geometry, geometry) lwgeom_gist_penalty(internal,internal,internal) ,
    FUNCTION 6 (geometry, geometry) lwgeom_gist_picksplit(internal,internal) ,
    FUNCTION 7 (geometry, geometry) lwgeom_gist_same(box2d,box2d,internal);


ALTER OPERATOR CLASS public.gist_geometry_ops USING gist OWNER TO postgres;

SET search_path = pg_catalog;

--
-- TOC entry 3992 (class 2605 OID 16831)
-- Name: CAST (public.box2d AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box2d AS public.box3d) WITH FUNCTION public.box3d(public.box2d) AS IMPLICIT;


--
-- TOC entry 3991 (class 2605 OID 16832)
-- Name: CAST (public.box2d AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box2d AS public.geometry) WITH FUNCTION public.geometry(public.box2d) AS IMPLICIT;


--
-- TOC entry 3985 (class 2605 OID 16833)
-- Name: CAST (public.box3d AS box); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS box) WITH FUNCTION public.box(public.box3d) AS IMPLICIT;


--
-- TOC entry 3987 (class 2605 OID 16830)
-- Name: CAST (public.box3d AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS public.box2d) WITH FUNCTION public.box2d(public.box3d) AS IMPLICIT;


--
-- TOC entry 3986 (class 2605 OID 16834)
-- Name: CAST (public.box3d AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS public.geometry) WITH FUNCTION public.geometry(public.box3d) AS IMPLICIT;


--
-- TOC entry 3990 (class 2605 OID 16841)
-- Name: CAST (public.box3d_extent AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.box2d) WITH FUNCTION public.box2d(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 3989 (class 2605 OID 16840)
-- Name: CAST (public.box3d_extent AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.box3d) WITH FUNCTION public.box3d_extent(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 3988 (class 2605 OID 16842)
-- Name: CAST (public.box3d_extent AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.geometry) WITH FUNCTION public.geometry(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 3785 (class 2605 OID 16838)
-- Name: CAST (bytea AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (bytea AS public.geometry) WITH FUNCTION public.geometry(bytea) AS IMPLICIT;


--
-- TOC entry 3993 (class 2605 OID 16837)
-- Name: CAST (public.chip AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.chip AS public.geometry) WITH FUNCTION public.geometry(public.chip) AS IMPLICIT;


--
-- TOC entry 3995 (class 2605 OID 17204)
-- Name: CAST (public.geography AS public.geography); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geography AS public.geography) WITH FUNCTION public.geography(public.geography, integer, boolean) AS IMPLICIT;


--
-- TOC entry 3994 (class 2605 OID 17223)
-- Name: CAST (public.geography AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geography AS public.geometry) WITH FUNCTION public.geometry(public.geography);


--
-- TOC entry 3981 (class 2605 OID 16829)
-- Name: CAST (public.geometry AS box); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS box) WITH FUNCTION public.box(public.geometry) AS IMPLICIT;


--
-- TOC entry 3983 (class 2605 OID 16827)
-- Name: CAST (public.geometry AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.box2d) WITH FUNCTION public.box2d(public.geometry) AS IMPLICIT;


--
-- TOC entry 3982 (class 2605 OID 16828)
-- Name: CAST (public.geometry AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.box3d) WITH FUNCTION public.box3d(public.geometry) AS IMPLICIT;


--
-- TOC entry 3979 (class 2605 OID 16839)
-- Name: CAST (public.geometry AS bytea); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS bytea) WITH FUNCTION public.bytea(public.geometry) AS IMPLICIT;


--
-- TOC entry 3984 (class 2605 OID 17221)
-- Name: CAST (public.geometry AS public.geography); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.geography) WITH FUNCTION public.geography(public.geometry) AS IMPLICIT;


--
-- TOC entry 3980 (class 2605 OID 16836)
-- Name: CAST (public.geometry AS text); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS text) WITH FUNCTION public.text(public.geometry) AS IMPLICIT;


--
-- TOC entry 3853 (class 2605 OID 16835)
-- Name: CAST (text AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (text AS public.geometry) WITH FUNCTION public.geometry(text) AS IMPLICIT;


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 227 (class 1259 OID 154376)
-- Name: calidad_bien; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE calidad_bien (
    id_cb integer NOT NULL,
    nombre_cb character varying(20) NOT NULL
);


ALTER TABLE calidad_bien OWNER TO sistemas;

--
-- TOC entry 5031 (class 0 OID 0)
-- Dependencies: 227
-- Name: TABLE calidad_bien; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE calidad_bien IS 'Almacena información que  Identifica la calidad de predio (Uso público o bien fiscal)
';


--
-- TOC entry 5032 (class 0 OID 0)
-- Dependencies: 227
-- Name: COLUMN calidad_bien.id_cb; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calidad_bien.id_cb IS 'Llave primaria que identifica de forma unica y consecutiva a cada tipo de predio';


--
-- TOC entry 5033 (class 0 OID 0)
-- Dependencies: 227
-- Name: COLUMN calidad_bien.nombre_cb; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calidad_bien.nombre_cb IS 'Nombre del tipo de predio';


--
-- TOC entry 354 (class 1259 OID 196978)
-- Name: gid_geo_predio; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE gid_geo_predio
    START WITH 1728
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gid_geo_predio OWNER TO sistemas;

SET default_with_oids = true;

--
-- TOC entry 228 (class 1259 OID 154379)
-- Name: geo_predio_mc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geo_predio_mc (
    gid integer DEFAULT nextval('gid_geo_predio'::regclass) NOT NULL,
    id_shp character varying(30) NOT NULL,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE geo_predio_mc OWNER TO sistemas;

--
-- TOC entry 229 (class 1259 OID 154388)
-- Name: secuencia_id_p; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE secuencia_id_p
    START WITH 434
    INCREMENT BY 1
    MINVALUE 0
    NO MAXVALUE
    CACHE 1;


ALTER TABLE secuencia_id_p OWNER TO sistemas;

SET default_with_oids = false;

--
-- TOC entry 230 (class 1259 OID 154390)
-- Name: prediomunicipio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE prediomunicipio (
    id_p integer DEFAULT nextval('secuencia_id_p'::regclass) NOT NULL,
    cedula_ppal_p character varying(2),
    id_catastro_p integer,
    identifica_p character varying(30) NOT NULL,
    proyecto_p character varying(100),
    codigounico_p character varying(30),
    codigonal_p character varying(30),
    id_cb_fk integer,
    clase_inmueble_p integer,
    id_tb_fk integer,
    id_tu_fk integer,
    direccion_p character varying(90),
    direccioncatastro_p character varying(80),
    zona_p character varying(7),
    id_barrio character varying(254),
    pais_p character varying(3),
    ciudad_p character varying(4),
    afecta_pot_p character varying(2),
    asegurado_p character varying(2),
    matricula_ppal_p character varying(2),
    mat_inmob_p character varying(25),
    id_madq_fk integer,
    lind_norte_p character varying(200),
    lind_sur_p character varying(200),
    lind_este_p character varying(200),
    lind_oeste_p character varying(200),
    lind_adic_p character varying(400),
    suscep_vta_p character varying(2),
    id_depen_fk integer,
    nombrecomun_p character varying(100),
    ubica_archivo_p character varying(60),
    derecho_p double precision,
    nombre_areacedida_p character varying(90),
    nit_cede_fk integer,
    area_cesion_p double precision,
    area_actual_p double precision,
    area_sicat_p double precision,
    area_terreno_p double precision,
    num_activofijo_p character varying(20),
    codigo_zhg_p character varying(12),
    cuenta_terreno_p character varying(12),
    nombre_cuenta_p character varying(90),
    propietario_antes_p integer,
    impto_predial_p character varying(20),
    id_shp_p character varying(30),
    fecha_levantamiento_p character varying(15),
    id_estado_fk integer,
    fecha_estudio_titulo_p date,
    fecha_creacion_p date DEFAULT now(),
    actualiza_sap date,
    id_capa integer,
    url1 character varying(250),
    mensaje_p character varying(120),
    orfeo_cb_p character varying(30),
    doc_calidad_bien character varying(150),
    url3 character varying(150),
    migracion_siga date,
    documento_p character varying(150),
    foto_p character varying(150),
    id_proyecto_p integer,
    fecha_modifica_p date,
    fecha_expedicion_cb_p date
);


ALTER TABLE prediomunicipio OWNER TO sistemas;

--
-- TOC entry 5037 (class 0 OID 0)
-- Dependencies: 230
-- Name: TABLE prediomunicipio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE prediomunicipio IS 'Almacena información del Bien Raíz O Bien Inmueble (Terrenos) de PROPIEDAD DEL MUNICIPIO DE SANTIAGO DE CALI, DESTINADOS AL USO PÚBLICO O FISCAL';


--
-- TOC entry 5038 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_p IS 'Llave primaria que identifica de forma unica y consecutiva cada predio que se almacena en la Base de Datos';


--
-- TOC entry 5039 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.cedula_ppal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.cedula_ppal_p IS 'Indica si  la cédula catastral es la principal o no.
(CISA-SIGA)';


--
-- TOC entry 5040 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_catastro_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_catastro_p IS 'Código asignado al Bien Inmueble por la Oficina de Catastro Municipal';


--
-- TOC entry 5041 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.identifica_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.identifica_p IS 'Identificación o codigo propio del predio (registro catastral)';


--
-- TOC entry 5042 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.proyecto_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.proyecto_p IS 'Nombre del proyecto que realiza la cesión como parte de sus obligaciones urbanísticas.';


--
-- TOC entry 5043 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.codigounico_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.codigounico_p IS 'Número que identifica de forma única a cada predio.';


--
-- TOC entry 5044 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.codigonal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.codigonal_p IS 'Número que identifica de forma única a cada predio a nivel nacional.';


--
-- TOC entry 5045 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_cb_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_cb_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Calidad de Bien.';


--
-- TOC entry 5046 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.clase_inmueble_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.clase_inmueble_p IS 'Indica la Clase de Bien Inmueble respecto a si es Tereno, Terreno y Construcción, o Sometido al regimen de prop. horizontal.';


--
-- TOC entry 5047 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_tb_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_tb_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Tipo de Bien.';


--
-- TOC entry 5048 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_tu_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_tu_fk IS 'Llave foránea que relaciona esta tabla con la tabla uso predio.';


--
-- TOC entry 5049 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.direccion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.direccion_p IS 'Dirección del predio';


--
-- TOC entry 5050 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.direccioncatastro_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.direccioncatastro_p IS 'Dirección del predio tal como aparece en catastro.';


--
-- TOC entry 5051 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.zona_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.zona_p IS 'Zona en la que está ubicado el predio: Urbana o Rural.';


--
-- TOC entry 5052 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_barrio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_barrio IS 'Llave foránea que relaciona esta tabla con la tabla Barrios. A través de la tabla barrios se puede saber la comuna y el estrato de un predio.';


--
-- TOC entry 5053 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.pais_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.pais_p IS 'Código segun el DANE del pais del Bien Inmueble.';


--
-- TOC entry 5054 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.ciudad_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.ciudad_p IS 'Código según el DANE de la Ciudad del Bien Inmueble.';


--
-- TOC entry 5055 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.afecta_pot_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.afecta_pot_p IS 'Indica si el Bien Inmueble tiene Afectaciones POT';


--
-- TOC entry 5056 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.asegurado_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.asegurado_p IS 'Indica si el Bien Inmueble esta Asegurado o No.';


--
-- TOC entry 5057 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.matricula_ppal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.matricula_ppal_p IS 'Indica si la Matricula Inmobiliaria es la Principal o No.';


--
-- TOC entry 5058 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.mat_inmob_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.mat_inmob_p IS 'Numero de matricula inmobiliaria del predio. Número de registro, asignado al certificado de tradición, que  determina la propiedad de un bien inmueble y su situación jurídica 
';


--
-- TOC entry 5059 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_madq_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_madq_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Modo_adq (Modo de Adquisición del predio)';


--
-- TOC entry 5060 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.lind_norte_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.lind_norte_p IS 'Limite norte del predio 
';


--
-- TOC entry 5061 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.lind_sur_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.lind_sur_p IS 'Limite sur del predio 
';


--
-- TOC entry 5062 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.lind_este_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.lind_este_p IS 'Limite este del predio 
';


--
-- TOC entry 5063 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.lind_oeste_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.lind_oeste_p IS 'Limite oeste del predio 
';


--
-- TOC entry 5064 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.lind_adic_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.lind_adic_p IS 'Describe los linderos adicionales que para algunos predios, figuren registrados en la escritura de cesión
';


--
-- TOC entry 5065 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.suscep_vta_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.suscep_vta_p IS 'Indica si el predio es susceptible para la venta.
';


--
-- TOC entry 5066 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_depen_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_depen_fk IS 'Llave foránea que relaciona esta tabla con la Tabla Dependencia.';


--
-- TOC entry 5067 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.nombrecomun_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.nombrecomun_p IS 'Nombre común del predio, tal como se le conoce entre los habitantes del sector o comunidad caleña.';


--
-- TOC entry 5068 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.ubica_archivo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.ubica_archivo_p IS 'Ubicación donde se encuentra guardado el expediente o carpetas dentro del archivo físico. (en el archivador)';


--
-- TOC entry 5069 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.derecho_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.derecho_p IS 'Porcentaje de propiedad que tiene el municipio sobre el predio.';


--
-- TOC entry 5070 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.nombre_areacedida_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.nombre_areacedida_p IS 'Palabras designada por el urbanizador para referirse a cada una de las cesiones, con el fin de ser diferenciadas entre ellas.';


--
-- TOC entry 5071 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.nit_cede_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.nit_cede_fk IS 'Llave foránea que relaciona esta tabla con la tabla cedente, para identificar a la persona/entidad que cedió el predio.';


--
-- TOC entry 5072 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.area_cesion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.area_cesion_p IS 'Medida de superficie, que El urbanizador cedió como obligación urbanística y está consignada en la escritura y plano de  cesión del predio
';


--
-- TOC entry 5073 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.area_actual_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.area_actual_p IS 'Medida de superficie, obtenida a partir del levantamiento topográfico y los cálculos realizados, según composición actual del terreno
';


--
-- TOC entry 5074 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.area_sicat_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.area_sicat_p IS 'Área según catastro.';


--
-- TOC entry 5075 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.area_terreno_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.area_terreno_p IS 'Área total del terreno. Para cálculo del avalúo catastral componente terreno (excepto zonas verdes que No se avalúan).';


--
-- TOC entry 5076 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.num_activofijo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.num_activofijo_p IS 'Registro contable, que determina el alta de los bienes inmuebles en los Estados Financieros del Municipio.
';


--
-- TOC entry 5077 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.codigo_zhg_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.codigo_zhg_p IS 'Código zona geográfica.';


--
-- TOC entry 5078 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.cuenta_terreno_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.cuenta_terreno_p IS 'Indica el número de la cuenta del terreno (SAP)';


--
-- TOC entry 5079 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.nombre_cuenta_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.nombre_cuenta_p IS 'Indica el nombre del cuenta del terreno (SAP).';


--
-- TOC entry 5080 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.propietario_antes_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.propietario_antes_p IS 'Indica el Nombre del Propietario anterior del Bien Inmueble.';


--
-- TOC entry 5081 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.impto_predial_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.impto_predial_p IS 'Indica el estado del Impuesto Predial del Bien Inmueble.';


--
-- TOC entry 5082 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_shp_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_shp_p IS 'Este campo relaciona esta tabla con la tabla geo_predio';


--
-- TOC entry 5083 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.fecha_levantamiento_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.fecha_levantamiento_p IS 'Fecha aproximada en la que se realiza el levantamiento Topográfico.';


--
-- TOC entry 5084 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_estado_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_estado_fk IS 'Llave foránea que relaciona esta tabla con la tabla estado.';


--
-- TOC entry 5085 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.fecha_estudio_titulo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.fecha_estudio_titulo_p IS 'Indica la fecha en la que se realizó el estudio jurídico al bien inmueble';


--
-- TOC entry 5086 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.fecha_creacion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.fecha_creacion_p IS 'Este Campo almacena la fecha en que crea el registro';


--
-- TOC entry 5087 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.actualiza_sap; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.actualiza_sap IS 'Este Campo almacena la fecha en la que el registro fue actualizado o creado en el sistema SAP.';


--
-- TOC entry 5088 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_capa; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_capa IS 'Llave foránea que relaciona esta tabla con la tabla Capa';


--
-- TOC entry 5089 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.url1; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.url1 IS 'Este campo almacena la dirección url donde se almacena, dentro del servidor IDESC, los planos arquitectónicos en formato pdf de algunas construcciones';


--
-- TOC entry 5090 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.mensaje_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.mensaje_p IS 'En este campo se almacenan algunos mensajes que se mostraran en el Geovisor de la IDESC';


--
-- TOC entry 5091 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.orfeo_cb_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.orfeo_cb_p IS 'Este campo muestra el Número de Orfeo con el que se haya dado un Concepto de Calidad del Bien.';


--
-- TOC entry 5092 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.doc_calidad_bien; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.doc_calidad_bien IS 'Este campo almacena la ruta donde está almacenado en el Servidor, el documento en pdf del último Concepto de Calidad del Bien.(Nuevo Formato aprobado MAJA01.03.03.18.P14.F02 y MAJA01.03.03.18.P14.F03 del 13 de Junio/2018)';


--
-- TOC entry 5093 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.url3; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.url3 IS 'Este campo almacena la ruta en el servidor, donde esta guardado el documento en pdf de la ficha técnica.';


--
-- TOC entry 5094 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.migracion_siga; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.migracion_siga IS 'Este campo almacena la fecha en que el registro fue reportado o cargado en el aplicativo SIGA (Sistema de Información y Gestión de Activos, CISA -Central de Inversiones S.A.)';


--
-- TOC entry 5095 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.documento_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.documento_p IS 'Este campo almacena la ruta en el servidor, donde está guardado el expediente físico escaneado en formato PDF
';


--
-- TOC entry 5096 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.foto_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.foto_p IS 'Este campo almacena la ruta en el servidor, donde esta guardada la fotografía del bien inmueble.
';


--
-- TOC entry 5097 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.id_proyecto_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.id_proyecto_p IS 'Llave foranea para el control y asociación unica del predio con el proyecto urbanístico al que pertenece
';


--
-- TOC entry 5098 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.fecha_modifica_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.fecha_modifica_p IS 'Este campo almacena la ultima fecha en que se modifica el registro.';


--
-- TOC entry 5099 (class 0 OID 0)
-- Dependencies: 230
-- Name: COLUMN prediomunicipio.fecha_expedicion_cb_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN prediomunicipio.fecha_expedicion_cb_p IS 'Almacena la fecha de expedición del documento "Respuesta Calidad del Bien"';


--
-- TOC entry 231 (class 1259 OID 154397)
-- Name: tipo_bien; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_bien (
    id_tb integer NOT NULL,
    nombre_tb character varying(40)
);


ALTER TABLE tipo_bien OWNER TO sistemas;

--
-- TOC entry 5101 (class 0 OID 0)
-- Dependencies: 231
-- Name: TABLE tipo_bien; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_bien IS 'Almacen información de los tipos de bien segun la clasificación que se le da a un predio de acuerdo a su composición. (via publica, lote, construcción, etc).';


--
-- TOC entry 5102 (class 0 OID 0)
-- Dependencies: 231
-- Name: COLUMN tipo_bien.id_tb; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_bien.id_tb IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla';


--
-- TOC entry 5103 (class 0 OID 0)
-- Dependencies: 231
-- Name: COLUMN tipo_bien.nombre_tb; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_bien.nombre_tb IS 'Nombre del  tipo de bien.';


--
-- TOC entry 232 (class 1259 OID 154400)
-- Name: uso_predio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE uso_predio (
    id_tu integer NOT NULL,
    nombre_tu character varying(20) NOT NULL
);


ALTER TABLE uso_predio OWNER TO sistemas;

--
-- TOC entry 5105 (class 0 OID 0)
-- Dependencies: 232
-- Name: TABLE uso_predio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE uso_predio IS 'Almacena información de los diferentes usos que se le da a un predio del municipio';


--
-- TOC entry 5106 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN uso_predio.id_tu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN uso_predio.id_tu IS 'Llave primaria que identifica de forma unica y consecutiva cada uno de los Usos que se crean en la base de datos';


--
-- TOC entry 5107 (class 0 OID 0)
-- Dependencies: 232
-- Name: COLUMN uso_predio.nombre_tu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN uso_predio.nombre_tu IS 'Nombre del uso';


--
-- TOC entry 233 (class 1259 OID 154403)
-- Name: archivo; Type: VIEW; Schema: public; Owner: topografia
--

CREATE VIEW archivo AS
SELECT g.oid, g.gid, g.the_geom, g.id_shp, p.identifica_p AS "Num predial", p.nombre_areacedida_p AS "nombre area cedida", p.proyecto_p AS "nombre proyecto", p.direccion_p AS direccion, p.mat_inmob_p AS "matricula inmobiliaria", calidad_bien.nombre_cb AS "Calidad Bien", tipo_bien.nombre_tb AS "Tipo Bien", uso_predio.nombre_tu AS "Tipo Uso", p.codigounico_p AS "cod unico", p.codigonal_p AS "cod nacional", p.area_cesion_p AS "area cesion", p.area_actual_p AS "area actual", p.area_sicat_p AS "area SICAT", p.area_terreno_p AS "Area Terreno", p.lind_norte_p, p.lind_sur_p, p.lind_este_p, p.lind_oeste_p, p.lind_adic_p FROM ((((geo_predio_mc g LEFT JOIN prediomunicipio p ON (((g.id_shp)::text = (p.identifica_p)::text))) LEFT JOIN calidad_bien calidad_bien ON ((p.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN tipo_bien tipo_bien ON ((p.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((p.id_tu_fk = uso_predio.id_tu)));


ALTER TABLE archivo OWNER TO topografia;

--
-- TOC entry 234 (class 1259 OID 154408)
-- Name: barrios; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE barrios (
    gid integer NOT NULL,
    id_barrio character varying(254),
    barrio character varying(254),
    comuna character varying(254),
    estra_moda integer,
    area double precision,
    perimetro double precision,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 7663))
);


ALTER TABLE barrios OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 154417)
-- Name: secuencia_id_const; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE secuencia_id_const
    START WITH 220
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE secuencia_id_const OWNER TO sistemas;

--
-- TOC entry 236 (class 1259 OID 154419)
-- Name: construccion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE construccion (
    id_const integer DEFAULT nextval('secuencia_id_const'::regclass) NOT NULL,
    predialterreno_const_fk character varying(30) NOT NULL,
    predial_edificacion_const character varying(30) NOT NULL,
    id_catastro_const integer,
    activofijo_const character varying(20),
    codigonal_const character varying(30),
    codigounico_const character varying(30),
    direccion_const character varying(80),
    nombre_const character varying(100),
    numpisos_const integer,
    numconstruccion_const integer,
    ano_const character(4),
    sismoresiste_const character(2),
    afecta_pot_const character(2),
    area_edifica_const double precision,
    area_anexos_const double precision,
    impto_predial_const character varying(20),
    mat_inmob_const character varying(25),
    cuenta_const character varying(20),
    nombre_cuenta_const character varying(80),
    gid integer,
    id_capa_const integer,
    orfeo_cb_const character varying(30),
    fecha_registro_const date,
    id_tb_fk integer,
    id_tu_fk integer,
    id_depen_fk numeric,
    derecho_c double precision,
    fecha_modifica_const date
);


ALTER TABLE construccion OWNER TO sistemas;

--
-- TOC entry 5110 (class 0 OID 0)
-- Dependencies: 236
-- Name: TABLE construccion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE construccion IS 'Almacena información de EDIFICACIÓN U OBRA DE INGENIERÍA,  DE DIVERSAS DIMENSIONES Y MATERIALES,  DESTINADA AL DESARROLLO DE ACTIVIDADES HUMANAS, LOCALIZADA DENTRO DE BIENES INMUEBLES DE PROPIEDAD DEL MUNICIPIO DE SANTIAGO DE CALI							
';


--
-- TOC entry 5111 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.id_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.id_const IS 'Llave primaria que identifica de forma unica y consecutiva cada construccion_temp que se crea en la Base de datos y que pertenece a un predio del municipio...';


--
-- TOC entry 5112 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.predialterreno_const_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.predialterreno_const_fk IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.Esto para el caso donde la construcción esta dentro de una zona verde o terreno con diferente numero predial al de la construcción';


--
-- TOC entry 5113 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.predial_edificacion_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.predial_edificacion_const IS 'Numero predial de la construcción, distinto del numero predial del terreno donde esta ubicada la construcción, en los casos donde la construcción ocupa solo una parte del terreno.';


--
-- TOC entry 5114 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.id_catastro_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.id_catastro_const IS 'Código asignado por la Oficina de Catastro Municipal para identificar el Bien Inmueble.';


--
-- TOC entry 5115 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.activofijo_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.activofijo_const IS 'Numero de activo fijo de la construcción.';


--
-- TOC entry 5116 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.codigonal_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.codigonal_const IS 'Códiigo Nacional de la Construcción';


--
-- TOC entry 5117 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.codigounico_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.codigounico_const IS 'Código Único de la Construcción';


--
-- TOC entry 5118 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.direccion_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.direccion_const IS 'Este campo almacena información especifica de la direccion de la construccion_temp';


--
-- TOC entry 5119 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.nombre_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.nombre_const IS 'Nombre dado a la construccion_temp';


--
-- TOC entry 5120 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.numpisos_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.numpisos_const IS 'Numero de pisos construidos dentro de la edificación';


--
-- TOC entry 5121 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.numconstruccion_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.numconstruccion_const IS 'Este campo almacena el número de construccion_tempes que representa cada registro de esta tabla. Ejemplo: Sena, tiene siete construccion_tempes o bloques pero solo se registra uno solo por tener todos el mismo número predial.';


--
-- TOC entry 5122 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.ano_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.ano_const IS 'Año de Construcción del Bien Inmueble.';


--
-- TOC entry 5123 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.sismoresiste_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.sismoresiste_const IS 'Indica si la Edificación es Sismo resistente o no.';


--
-- TOC entry 5124 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.afecta_pot_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.afecta_pot_const IS 'Indica si el Bien Inmueble tiene afectaciones POT.';


--
-- TOC entry 5125 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.area_edifica_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.area_edifica_const IS 'Area (en metros cuadrados) de la construcción';


--
-- TOC entry 5126 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.area_anexos_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.area_anexos_const IS 'Área en metros cuadrados de los anexos';


--
-- TOC entry 5127 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.impto_predial_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.impto_predial_const IS 'Indica el estado del Impuesto predial de la Construcción.';


--
-- TOC entry 5128 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.cuenta_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.cuenta_const IS 'Número de cuenta de la Construcción.';


--
-- TOC entry 5129 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.nombre_cuenta_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.nombre_cuenta_const IS 'Nombre de la cuenta de la Construcción.';


--
-- TOC entry 5130 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.gid; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.gid IS 'Llave foránea que relaciona esta tabla con la tabla geo_constr';


--
-- TOC entry 5131 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.orfeo_cb_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.orfeo_cb_const IS 'Este campo almacena información del número de Orfeo con el cual se expidió Calidad dell Bien Inmueble';


--
-- TOC entry 5132 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.fecha_registro_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.fecha_registro_const IS 'Fecha en la que se crea el registro';


--
-- TOC entry 5133 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.derecho_c; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.derecho_c IS 'Porcentaje de derecho que tiene la Alcaldía sobre la construcción (puede ser distinto al del terreno...)';


--
-- TOC entry 5134 (class 0 OID 0)
-- Dependencies: 236
-- Name: COLUMN construccion.fecha_modifica_const; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN construccion.fecha_modifica_const IS 'Fecha en la que se modificó el registro.';


--
-- TOC entry 237 (class 1259 OID 154426)
-- Name: contrato; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE contrato (
    id_cont integer NOT NULL,
    predial_cont_fk character varying(30),
    numero_cont character varying(25),
    id_tc_fk integer,
    area_entregada_cont double precision,
    fecha_ini_cont date,
    fecha_fin_cont date,
    id_estado_fk integer,
    nit_entidad_cont integer,
    idusu_cont_fk character varying(12),
    lind_norte_cont character varying(300),
    lind_sur_cont character varying(300),
    lind_este_cont character varying(300),
    lind_oeste_cont character varying(300),
    lind_adic_cont character varying(400),
    id_const_fk integer,
    cantidad_ocupa_cont integer,
    porcentaje_ocupa_cont double precision,
    valor_canon_cont integer,
    tipo_ocupante_cont character varying(10)
);


ALTER TABLE contrato OWNER TO sistemas;

--
-- TOC entry 5136 (class 0 OID 0)
-- Dependencies: 237
-- Name: TABLE contrato; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE contrato IS 'Almacena información de los diferentes contratos que se pueden llegar a presentar para cada predio.';


--
-- TOC entry 5137 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.id_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.id_cont IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5138 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.predial_cont_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.predial_cont_fk IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.';


--
-- TOC entry 5139 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.numero_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.numero_cont IS 'Número del contrato o expediente.';


--
-- TOC entry 5140 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.id_tc_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.id_tc_fk IS 'Llave foránea que relaciona esta tabla con la tabla Tipo de contrato.';


--
-- TOC entry 5141 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.area_entregada_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.area_entregada_cont IS 'Área en metros cuadrados entregada en el contrato.';


--
-- TOC entry 5142 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.fecha_ini_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.fecha_ini_cont IS 'Fecha inicial del contrato.';


--
-- TOC entry 5143 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.fecha_fin_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.fecha_fin_cont IS 'Fecha final del contrato.';


--
-- TOC entry 5144 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.id_estado_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.id_estado_fk IS 'Llave foránea que relaciona esta tabla con la tabla estado.';


--
-- TOC entry 5145 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.nit_entidad_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.nit_entidad_cont IS 'Número de identificación tributaria de la entidad o persona que administra el predio.';


--
-- TOC entry 5146 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.idusu_cont_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.idusu_cont_fk IS 'Llave foránea que relaciona esta tabla con la tabla Usuario. Nombre de la persona a la que se le asigna el manejo del contrato.';


--
-- TOC entry 5147 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.lind_norte_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.lind_norte_cont IS 'Límite norte del predio.';


--
-- TOC entry 5148 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.lind_sur_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.lind_sur_cont IS 'Límite sur del predio.';


--
-- TOC entry 5149 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.lind_este_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.lind_este_cont IS 'Límite este del predio.';


--
-- TOC entry 5150 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.lind_oeste_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.lind_oeste_cont IS 'Límite oeste del predio.';


--
-- TOC entry 5151 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.lind_adic_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.lind_adic_cont IS 'Límite o lindero adicional del predio.';


--
-- TOC entry 5152 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.id_const_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.id_const_fk IS 'Llave foránea que relaciona esta tabla con la tabla construcción';


--
-- TOC entry 5153 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.cantidad_ocupa_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.cantidad_ocupa_cont IS 'Indica la Cantidad de ocupaciones que tiene el Bien Inmueble.';


--
-- TOC entry 5154 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.porcentaje_ocupa_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.porcentaje_ocupa_cont IS 'Indica el porcentaje de ocupación del Bien Inmueble.';


--
-- TOC entry 5155 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.valor_canon_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.valor_canon_cont IS 'Indica el valor del canon de arrendamiento del Bien Inmueble en caso de estar alquilado.';


--
-- TOC entry 5156 (class 0 OID 0)
-- Dependencies: 237
-- Name: COLUMN contrato.tipo_ocupante_cont; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN contrato.tipo_ocupante_cont IS 'Indica el tipo de ocupante (Privado, Público o Mixto)';


--
-- TOC entry 238 (class 1259 OID 154432)
-- Name: dependencia; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE dependencia (
    id_depen numeric NOT NULL,
    nombre_depen character varying(150) NOT NULL
);


ALTER TABLE dependencia OWNER TO sistemas;

--
-- TOC entry 5158 (class 0 OID 0)
-- Dependencies: 238
-- Name: TABLE dependencia; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE dependencia IS 'Almacena información de las diferentes dependencias de la alcaldia, a la cual pertenece un usuario y un predio.';


--
-- TOC entry 5159 (class 0 OID 0)
-- Dependencies: 238
-- Name: COLUMN dependencia.id_depen; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN dependencia.id_depen IS 'Código de la Dependencia de la Alcaldía que tiene a cargo un predio.';


--
-- TOC entry 5160 (class 0 OID 0)
-- Dependencies: 238
-- Name: COLUMN dependencia.nombre_depen; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN dependencia.nombre_depen IS 'Nombre de la dependencia.';


--
-- TOC entry 239 (class 1259 OID 154435)
-- Name: digital; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE digital (
    id_digi integer NOT NULL,
    predial_digi_fk character varying(30) NOT NULL,
    path_archivo_digi character varying(200),
    path_foto_digi character varying(150)
);


ALTER TABLE digital OWNER TO sistemas;

--
-- TOC entry 5162 (class 0 OID 0)
-- Dependencies: 239
-- Name: TABLE digital; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE digital IS 'Almacena información de las rutas dentro del servidor donde se encuentran escaneados los expedientes de cada predio y las fotografias.';


--
-- TOC entry 5163 (class 0 OID 0)
-- Dependencies: 239
-- Name: COLUMN digital.id_digi; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN digital.id_digi IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5164 (class 0 OID 0)
-- Dependencies: 239
-- Name: COLUMN digital.predial_digi_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN digital.predial_digi_fk IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.';


--
-- TOC entry 5165 (class 0 OID 0)
-- Dependencies: 239
-- Name: COLUMN digital.path_archivo_digi; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN digital.path_archivo_digi IS 'Ruta dentro del servidor, donde se encuentra almacenado los expedientes escaneados o digitalizados de un predio.';


--
-- TOC entry 5166 (class 0 OID 0)
-- Dependencies: 239
-- Name: COLUMN digital.path_foto_digi; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN digital.path_foto_digi IS 'Ruta dentro del servidor, donde se encuentra almacenado las fotografías de un predio.';


--
-- TOC entry 240 (class 1259 OID 154438)
-- Name: documento; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE documento (
    id_doc integer NOT NULL,
    id_tipod_fk integer,
    numero_doc character varying(15) NOT NULL,
    fecha_doc date NOT NULL,
    id_not_fk integer,
    id_oficina_expe integer,
    ciudad_doc character varying(4)
);


ALTER TABLE documento OWNER TO sistemas;

--
-- TOC entry 5168 (class 0 OID 0)
-- Dependencies: 240
-- Name: TABLE documento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE documento IS 'Almacena información del documento que se crea para cada predio (escritura, resolución, etc.)';


--
-- TOC entry 5169 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN documento.id_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento.id_doc IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5170 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN documento.id_tipod_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento.id_tipod_fk IS 'Llave foránea que relaciona esta tabla con el tipo de documento.';


--
-- TOC entry 5171 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN documento.numero_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento.numero_doc IS 'Numero de documento (escritura, resolución, decreto, etc.) que identifica el acto jurídico de un predio.';


--
-- TOC entry 5172 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN documento.fecha_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento.fecha_doc IS 'Fecha en la que fue protocolizado el documento.';


--
-- TOC entry 5173 (class 0 OID 0)
-- Dependencies: 240
-- Name: COLUMN documento.id_not_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento.id_not_fk IS 'Llave foránea que relaciona esta tabla con la tabla notaria.';


--
-- TOC entry 241 (class 1259 OID 154441)
-- Name: documento_predio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE documento_predio (
    id_dp integer NOT NULL,
    id_doc character varying(15) NOT NULL,
    predial_p character varying(30) NOT NULL
);


ALTER TABLE documento_predio OWNER TO sistemas;

--
-- TOC entry 5175 (class 0 OID 0)
-- Dependencies: 241
-- Name: COLUMN documento_predio.id_dp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento_predio.id_dp IS 'Llave primaria de la tabla Documento_predio';


--
-- TOC entry 5176 (class 0 OID 0)
-- Dependencies: 241
-- Name: COLUMN documento_predio.id_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento_predio.id_doc IS 'Llave foránea que relaciona esta tabla con la tabla Documento.';


--
-- TOC entry 5177 (class 0 OID 0)
-- Dependencies: 241
-- Name: COLUMN documento_predio.predial_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN documento_predio.predial_p IS 'Llava foránea que relaciona esta tabla con la tabla prediomunicipio';


--
-- TOC entry 242 (class 1259 OID 154444)
-- Name: estado; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE estado (
    id_estado integer NOT NULL,
    nombre_estado character varying(30)
);


ALTER TABLE estado OWNER TO sistemas;

--
-- TOC entry 5179 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE estado IS 'Alamcena los diferentes estados para diversos objetos o entidades, por ejemplo el estado de un predio (activo, inactivo), de un usuario (bloqueado, retirado...), etc.';


--
-- TOC entry 5180 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN estado.id_estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN estado.id_estado IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5181 (class 0 OID 0)
-- Dependencies: 242
-- Name: COLUMN estado.nombre_estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN estado.nombre_estado IS 'Nombre del estado, usado para definir el estado de un predio, de un documento, de un usuario, etc.';


--
-- TOC entry 243 (class 1259 OID 154447)
-- Name: modo_adq; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE modo_adq (
    id_madq integer NOT NULL,
    nombre_madq character varying(15) NOT NULL
);


ALTER TABLE modo_adq OWNER TO sistemas;

--
-- TOC entry 5183 (class 0 OID 0)
-- Dependencies: 243
-- Name: TABLE modo_adq; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE modo_adq IS 'Almacena información de la Figura jurídica mediante la cual se adquiere el Bien Inmueble 
';


--
-- TOC entry 5184 (class 0 OID 0)
-- Dependencies: 243
-- Name: COLUMN modo_adq.id_madq; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modo_adq.id_madq IS 'Llave primaria que enumera de forma unica cada Modo de adquisición';


--
-- TOC entry 5185 (class 0 OID 0)
-- Dependencies: 243
-- Name: COLUMN modo_adq.nombre_madq; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modo_adq.nombre_madq IS 'Nombre del modo de adquisición de un predio.';


--
-- TOC entry 244 (class 1259 OID 154450)
-- Name: notaria; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE notaria (
    id_not integer NOT NULL,
    nombre_not character varying(12),
    direccion_not character varying(50),
    telefono_not character varying(10)
);


ALTER TABLE notaria OWNER TO sistemas;

--
-- TOC entry 5187 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE notaria; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE notaria IS 'Almacena información de las diferentes Notarias donde se han protocolizado escrituras de bienes del municipio';


--
-- TOC entry 5188 (class 0 OID 0)
-- Dependencies: 244
-- Name: COLUMN notaria.id_not; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN notaria.id_not IS 'Identificador de la notaria, llave primaria';


--
-- TOC entry 245 (class 1259 OID 154453)
-- Name: observacion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE observacion (
    id_obs integer NOT NULL,
    predial_obs_fk character varying(30) NOT NULL,
    fecha_obs date,
    observacion_obs character varying(500),
    id_usu_fk character varying(12),
    tipo_ob integer
);


ALTER TABLE observacion OWNER TO sistemas;

--
-- TOC entry 5190 (class 0 OID 0)
-- Dependencies: 245
-- Name: TABLE observacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE observacion IS 'Almacena las observaciones que se pueden llegar a realizar sobre un predio por cada usuario que las realice.';


--
-- TOC entry 5191 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.id_obs; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.id_obs IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5192 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.predial_obs_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.predial_obs_fk IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.';


--
-- TOC entry 5193 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.fecha_obs; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.fecha_obs IS 'Fecha en la que se realiza la observación.';


--
-- TOC entry 5194 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.observacion_obs; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.observacion_obs IS 'Observación realizada por los usuarios a un determinado predio.';


--
-- TOC entry 5195 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.id_usu_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.id_usu_fk IS 'Llave foránea que relaciona esta tabla con el número de identificación de un usuario- tabla Usuario.';


--
-- TOC entry 5196 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN observacion.tipo_ob; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN observacion.tipo_ob IS 'Llave foránea que relaciona esta tabla con la tabla Tipo de Observacion (Tipo_observacion).';


--
-- TOC entry 246 (class 1259 OID 154456)
-- Name: tercero; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tercero (
    nit_tcro integer NOT NULL,
    nombre_tcro character varying(60) NOT NULL
);


ALTER TABLE tercero OWNER TO sistemas;

--
-- TOC entry 5198 (class 0 OID 0)
-- Dependencies: 246
-- Name: TABLE tercero; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tercero IS 'Almacena información del Nombre de la entidad o persona que cede el predio, tambien de la persona o entidad que, bajo la figura de Comodato o Arrendamiento,  administra el predio o construcción.';


--
-- TOC entry 5199 (class 0 OID 0)
-- Dependencies: 246
-- Name: COLUMN tercero.nit_tcro; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tercero.nit_tcro IS 'Número de identificación tributaria de la entidad o persona que cede el predio o que lo administra bajo la figura de Comodato o Arrendamiento.';


--
-- TOC entry 5200 (class 0 OID 0)
-- Dependencies: 246
-- Name: COLUMN tercero.nombre_tcro; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tercero.nombre_tcro IS 'Nombre de la entidad o persona que cede el predio.
Nombre de la persona o entidad que Administra o tiene en uso el predio  o construcción bajo la figura de Comodato o Arrendamiento.';


--
-- TOC entry 247 (class 1259 OID 154459)
-- Name: tipo_contrato; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_contrato (
    id_tc integer NOT NULL,
    nombre_tc character varying(20) NOT NULL
);
ALTER TABLE ONLY tipo_contrato ALTER COLUMN nombre_tc SET STORAGE PLAIN;


ALTER TABLE tipo_contrato OWNER TO sistemas;

--
-- TOC entry 5202 (class 0 OID 0)
-- Dependencies: 247
-- Name: TABLE tipo_contrato; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_contrato IS 'Almacena información a cerca del tipo de contrato que se establece entre el municipio y un tercero (Comodato, arrendamiento, etc).';


--
-- TOC entry 5203 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN tipo_contrato.id_tc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_contrato.id_tc IS 'Llave primaria que enumera de forma unica y consecutiva cada tipo de contrato';


--
-- TOC entry 5204 (class 0 OID 0)
-- Dependencies: 247
-- Name: COLUMN tipo_contrato.nombre_tc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_contrato.nombre_tc IS 'Nombre del tipo de contrato';


--
-- TOC entry 248 (class 1259 OID 154462)
-- Name: tipo_doc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_doc (
    id_tipod integer NOT NULL,
    nombre_tipod character varying(30)
);


ALTER TABLE tipo_doc OWNER TO sistemas;

--
-- TOC entry 5206 (class 0 OID 0)
-- Dependencies: 248
-- Name: TABLE tipo_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_doc IS 'Almacena información del tipo de Documento que se crea para un predio (escritura publica, resolución, decreto, escritura aclaratoria, etc).';


--
-- TOC entry 5207 (class 0 OID 0)
-- Dependencies: 248
-- Name: COLUMN tipo_doc.id_tipod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_doc.id_tipod IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5208 (class 0 OID 0)
-- Dependencies: 248
-- Name: COLUMN tipo_doc.nombre_tipod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_doc.nombre_tipod IS 'Nombre del tipo de documento.';


--
-- TOC entry 249 (class 1259 OID 154465)
-- Name: tipo_observacion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_observacion (
    id_to integer NOT NULL,
    nombre_to character varying(50)
);


ALTER TABLE tipo_observacion OWNER TO sistemas;

--
-- TOC entry 5210 (class 0 OID 0)
-- Dependencies: 249
-- Name: TABLE tipo_observacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_observacion IS 'Esta tabla almacena informacion del tipo de observacion que se da sobre un predio. Se relaciona con la tabla Observación.';


--
-- TOC entry 5211 (class 0 OID 0)
-- Dependencies: 249
-- Name: COLUMN tipo_observacion.id_to; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_observacion.id_to IS 'Llave primaria que identifica de forma unica y consecutiva los registros de esta tabla.';


--
-- TOC entry 5212 (class 0 OID 0)
-- Dependencies: 249
-- Name: COLUMN tipo_observacion.nombre_to; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_observacion.nombre_to IS 'Nombre del tipo de Observacion.';


--
-- TOC entry 250 (class 1259 OID 154468)
-- Name: usuario; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE usuario (
    id_usu character varying(12) NOT NULL,
    nombre_usu character varying(50) NOT NULL,
    apellido_usu character varying(50),
    correo_usu character varying(50),
    clave_usu character varying(100),
    id_depen_fk integer,
    id_estado_fk integer,
    id_rol_fk integer
);


ALTER TABLE usuario OWNER TO sistemas;

--
-- TOC entry 5214 (class 0 OID 0)
-- Dependencies: 250
-- Name: TABLE usuario; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE usuario IS 'Tabla que almacena informacion de los usuarios del sistema para su logueo.';


--
-- TOC entry 5215 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.id_usu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.id_usu IS 'Identificacion del usuario (cedula)';


--
-- TOC entry 5216 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.nombre_usu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.nombre_usu IS 'Nombres del usuario';


--
-- TOC entry 5217 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.apellido_usu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.apellido_usu IS 'Apellidos del usuario';


--
-- TOC entry 5218 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.correo_usu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.correo_usu IS 'Correo electronico del usuario';


--
-- TOC entry 5219 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.clave_usu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.clave_usu IS 'Clave de acceso al sistema';


--
-- TOC entry 5220 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.id_depen_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.id_depen_fk IS 'Llave foránea que relaciona esta tabla con la tabla dependencia';


--
-- TOC entry 5221 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.id_estado_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.id_estado_fk IS 'Llave foránea que relaciona esta tabla con la tabla estado.';


--
-- TOC entry 5222 (class 0 OID 0)
-- Dependencies: 250
-- Name: COLUMN usuario.id_rol_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN usuario.id_rol_fk IS 'Llave foránea que relaciona esta tabla con la tabla rol.';


--
-- TOC entry 347 (class 1259 OID 196115)
-- Name: archivo2; Type: VIEW; Schema: public; Owner: topografia
--

CREATE VIEW archivo2 AS
SELECT g.oid, g.gid, g.the_geom, g.id_shp, prediomunicipio.identifica_p, construccion.predial_edificacion_const, prediomunicipio.codigonal_p, prediomunicipio.direccion_p, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.proyecto_p, prediomunicipio.nombre_areacedida_p, tercero.nombre_tcro AS cedente, prediomunicipio.mat_inmob_p, prediomunicipio.area_cesion_p, calidad_bien.nombre_cb, tipo_bien.nombre_tb, uso_predio.nombre_tu, modo_adq.nombre_madq, prediomunicipio.lind_norte_p, prediomunicipio.lind_sur_p, prediomunicipio.lind_este_p, prediomunicipio.lind_oeste_p, prediomunicipio.lind_adic_p, prediomunicipio.nombrecomun_p, estado_a.nombre_estado AS estado_predio, tipo_doc.nombre_tipod, documento.numero_doc, documento.fecha_doc, notaria.nombre_not, tipo_contrato.nombre_tc, contrato.numero_cont, contrato.area_entregada_cont, contrato.fecha_ini_cont, contrato.fecha_fin_cont, estado.nombre_estado AS estado_cto, contrato.lind_norte_cont, contrato.lind_sur_cont, contrato.lind_este_cont, contrato.lind_oeste_cont, contrato.lind_adic_cont, tercero_a.nombre_tcro AS tercero, construccion.nombre_const, construccion.numpisos_const, construccion.area_edifica_const, construccion.activofijo_const, dependencia.nombre_depen, digital.path_archivo_digi, digital.path_foto_digi, tipo_observacion.nombre_to, observacion.fecha_obs, observacion.observacion_obs, usuario.nombre_usu, usuario.apellido_usu, prediomunicipio.id_capa FROM ((((((((((((((((((((((geo_predio_mc g LEFT JOIN prediomunicipio ON (((g.id_shp)::text = (prediomunicipio.identifica_p)::text))) RIGHT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN calidad_bien calidad_bien ON ((prediomunicipio.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN tercero tercero_a ON ((contrato.nit_entidad_cont = tercero_a.nit_tcro))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN digital digital ON (((prediomunicipio.identifica_p)::text = (digital.predial_digi_fk)::text))) LEFT JOIN estado estado_a ON ((prediomunicipio.id_estado_fk = estado_a.id_estado))) LEFT JOIN observacion observacion ON (((prediomunicipio.identifica_p)::text = (observacion.predial_obs_fk)::text))) LEFT JOIN tipo_observacion tipo_observacion ON ((observacion.tipo_ob = tipo_observacion.id_to))) LEFT JOIN usuario usuario ON (((observacion.id_usu_fk)::text = (usuario.id_usu)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN estado estado ON ((contrato.id_estado_fk = estado.id_estado))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY g.oid;


ALTER TABLE archivo2 OWNER TO topografia;

--
-- TOC entry 384 (class 1259 OID 209618)
-- Name: auditoria; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE auditoria (
    id_aud integer DEFAULT nextval(('public.auditoria_id_aud_seq'::text)::regclass) NOT NULL,
    table_name_aud character varying(45) NOT NULL,
    operacion_aud character varying(1) NOT NULL,
    old_value_aud text,
    new_value_aud text,
    update_date_aud date DEFAULT ('now'::text)::date NOT NULL,
    user_name_aud character varying(45),
    field_aud character varying(50),
    ip_addres_aud inet,
    browser_aud character varying(25)
);


ALTER TABLE auditoria OWNER TO sistemas;

--
-- TOC entry 5225 (class 0 OID 0)
-- Dependencies: 384
-- Name: TABLE auditoria; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE auditoria IS 'Almacena información de cada transacción que se realiza en la Base de Datos desde la aplicación SIBICA, tabla de auditoria';


--
-- TOC entry 5226 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.id_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.id_aud IS 'Llave primaria, número consecutivo que identifica de manera única cada registro de esta tabla.';


--
-- TOC entry 5227 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.table_name_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.table_name_aud IS 'Almacena el nombre de la entidad de la base de datos que ha sido modificada';


--
-- TOC entry 5228 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.operacion_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.operacion_aud IS 'Almacena información de la operación realizada por un usuario o sistema sobre la base de datos.';


--
-- TOC entry 5229 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.old_value_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.old_value_aud IS 'Almacena información del valor almacenado en Base de Datos antes de un cambio';


--
-- TOC entry 5230 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.new_value_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.new_value_aud IS 'Almacena información del nuevo valor almacenado en la Base de Datos despueés de un cambio.';


--
-- TOC entry 5231 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.update_date_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.update_date_aud IS 'Almacena la fecha en que un usuario o sistema realiza un cambio sobre la base de Datos.';


--
-- TOC entry 5232 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.user_name_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.user_name_aud IS 'Almacena información del usuario que realiza el cambio sobre la base de Datos.';


--
-- TOC entry 5233 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.ip_addres_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.ip_addres_aud IS 'Almacena la dirección ip desde dónde se realiza el cambio';


--
-- TOC entry 5234 (class 0 OID 0)
-- Dependencies: 384
-- Name: COLUMN auditoria.browser_aud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN auditoria.browser_aud IS 'Almacena el nombre del navegador desde dónde se realiza el cambio';


--
-- TOC entry 394 (class 1259 OID 210931)
-- Name: auditoria_id_aud_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE auditoria_id_aud_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE auditoria_id_aud_seq OWNER TO sistemas;

--
-- TOC entry 366 (class 1259 OID 199248)
-- Name: authorization_table; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE authorization_table (
    toid oid,
    rid text,
    expires timestamp without time zone,
    authid text
);


ALTER TABLE authorization_table OWNER TO sistemas;

--
-- TOC entry 367 (class 1259 OID 199254)
-- Name: authorized_tables; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW authorized_tables AS
SELECT n.nspname AS schema, c.relname AS "table", btrim(t.tgargs, '\x00'::bytea) AS id_column FROM pg_trigger t, pg_class c, pg_proc p, pg_namespace n WHERE ((((p.proname = 'checkauthtrigger'::name) AND (c.relnamespace = n.oid)) AND (t.tgfoid = p.oid)) AND (t.tgrelid = c.oid));


ALTER TABLE authorized_tables OWNER TO sistemas;

--
-- TOC entry 251 (class 1259 OID 154481)
-- Name: id_avalcomercial; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE id_avalcomercial
    START WITH 36
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE id_avalcomercial OWNER TO sistemas;

--
-- TOC entry 252 (class 1259 OID 154483)
-- Name: avaluo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE avaluo (
    id_aval integer DEFAULT nextval('id_avalcomercial'::regclass) NOT NULL,
    predial_terreno_aval character varying(30) NOT NULL,
    predial_construccion_aval character varying(30) NOT NULL,
    "año" character varying(4) NOT NULL,
    valor_cial_terreno_aval double precision,
    valor_cial_contruccion_aval double precision,
    valor_cial_anexos_aval double precision
);


ALTER TABLE avaluo OWNER TO sistemas;

--
-- TOC entry 5237 (class 0 OID 0)
-- Dependencies: 252
-- Name: TABLE avaluo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE avaluo IS 'Almacena información del avaluo de cada predio por cada año en el que se realiza un avaluo del inmueble.';


--
-- TOC entry 5238 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.id_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.id_aval IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5239 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.predial_terreno_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.predial_terreno_aval IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.';


--
-- TOC entry 5240 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.predial_construccion_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.predial_construccion_aval IS 'Llave foránea que relaciona esta tabla con la tabla construccion';


--
-- TOC entry 5241 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo."año"; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo."año" IS 'Año en que se realiza el avaluo.';


--
-- TOC entry 5242 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.valor_cial_terreno_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.valor_cial_terreno_aval IS 'Valor comercial total del componente terreno';


--
-- TOC entry 5243 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.valor_cial_contruccion_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.valor_cial_contruccion_aval IS 'Valor comercial total del componente construcción';


--
-- TOC entry 5244 (class 0 OID 0)
-- Dependencies: 252
-- Name: COLUMN avaluo.valor_cial_anexos_aval; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo.valor_cial_anexos_aval IS 'Valor Comercial total de los anexos de un predio.';


--
-- TOC entry 329 (class 1259 OID 155450)
-- Name: avaluo_catastral; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE avaluo_catastral (
    id_avalc integer NOT NULL,
    predial_terreno_avalc character varying(30) NOT NULL,
    predial_construccion_avalc character varying(30) NOT NULL,
    fecha_avalc date NOT NULL,
    valor_terreno_avalc double precision,
    valor_construccion_avalc double precision,
    valor_anexos_avalc double precision,
    total_avalc double precision
);


ALTER TABLE avaluo_catastral OWNER TO sistemas;

--
-- TOC entry 5246 (class 0 OID 0)
-- Dependencies: 329
-- Name: TABLE avaluo_catastral; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE avaluo_catastral IS 'Se crea esta tabla para almacenar información de Avaluos catastrales.';


--
-- TOC entry 5247 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.id_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.id_avalc IS 'Llave primaria que identifica de forma única y consecutiva cada registro de esta tabla.';


--
-- TOC entry 5248 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.predial_terreno_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.predial_terreno_avalc IS 'Número predial del Terreno.';


--
-- TOC entry 5249 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.predial_construccion_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.predial_construccion_avalc IS 'Número Predial de la Construcción';


--
-- TOC entry 5250 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.valor_terreno_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.valor_terreno_avalc IS 'Valor del Avaluo Catastral del componente Terreno';


--
-- TOC entry 5251 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.valor_construccion_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.valor_construccion_avalc IS 'Valor Catastral del componente Construcción.';


--
-- TOC entry 5252 (class 0 OID 0)
-- Dependencies: 329
-- Name: COLUMN avaluo_catastral.valor_anexos_avalc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN avaluo_catastral.valor_anexos_avalc IS 'Valor Avaluo Catastral de los Anexos.';


--
-- TOC entry 253 (class 1259 OID 154490)
-- Name: barrios_gid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE barrios_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE barrios_gid_seq OWNER TO postgres;

--
-- TOC entry 5254 (class 0 OID 0)
-- Dependencies: 253
-- Name: barrios_gid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE barrios_gid_seq OWNED BY barrios.gid;


--
-- TOC entry 390 (class 1259 OID 210142)
-- Name: calificacion_panorama; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE calificacion_panorama (
    id_calificacion integer NOT NULL,
    panorama_cp_fk integer NOT NULL,
    probabilidad_cp numeric,
    severidad_cp numeric,
    exposicion_cp numeric,
    proteccion_cp numeric,
    puntaje_cp numeric,
    fecha_creacion_cp date DEFAULT ('now'::text)::date
);


ALTER TABLE calificacion_panorama OWNER TO sistemas;

--
-- TOC entry 5255 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.id_calificacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.id_calificacion IS 'Llave primaria de la tabla';


--
-- TOC entry 5256 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.panorama_cp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.panorama_cp_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla  panorama_riesgo';


--
-- TOC entry 5257 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.probabilidad_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.probabilidad_cp IS 'Campo donde se guarda la probablidad  del panorama de riesgo, este valor es de 1 a 10';


--
-- TOC entry 5258 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.severidad_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.severidad_cp IS 'Campo donde se guarda la severidada  del panorama de riesgo, este valor es de 1 a 10';


--
-- TOC entry 5259 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.exposicion_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.exposicion_cp IS 'Campo donde se guarda la exposicion  del panorama de riesgo, este valor es de 1 a 10';


--
-- TOC entry 5260 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.proteccion_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.proteccion_cp IS 'Campo donde se guarda la proteccion  del panorama de riesgo, este valor es de 1 a 10';


--
-- TOC entry 5261 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.puntaje_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.puntaje_cp IS 'Campo donde se calcula el puntaje del panorama de riesgo ded acuedo a  la probabilidad, severidad, exposicion y proteccion';


--
-- TOC entry 5262 (class 0 OID 0)
-- Dependencies: 390
-- Name: COLUMN calificacion_panorama.fecha_creacion_cp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN calificacion_panorama.fecha_creacion_cp IS 'Campo donde se guarda  la fecha en la que se crea el registro';


--
-- TOC entry 370 (class 1259 OID 199313)
-- Name: campo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE campo (
    id_campo integer DEFAULT nextval(('public.campo_id_campo_seq'::text)::regclass) NOT NULL,
    nombre_campo character varying(50),
    descripcion_campo character varying(100),
    tabla_campo_fk integer
);


ALTER TABLE campo OWNER TO sistemas;

--
-- TOC entry 5264 (class 0 OID 0)
-- Dependencies: 370
-- Name: TABLE campo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE campo IS 'Esta tabla almacena información de cada uno de los campos de las diferentes tablas de la Base de Datos del sistema SIBICA.';


--
-- TOC entry 5265 (class 0 OID 0)
-- Dependencies: 370
-- Name: COLUMN campo.id_campo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN campo.id_campo IS 'Llave primaria, número consecutivo que enumera de forma única cada registro de esta tabla.';


--
-- TOC entry 5266 (class 0 OID 0)
-- Dependencies: 370
-- Name: COLUMN campo.nombre_campo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN campo.nombre_campo IS 'Nombre del campo o atributo de cada tabla de la base de Datos del sistema SIBICA.';


--
-- TOC entry 5267 (class 0 OID 0)
-- Dependencies: 370
-- Name: COLUMN campo.descripcion_campo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN campo.descripcion_campo IS 'Descripción del campo o atributo de cada tabla de la base de Datos del Sistema SIBICA.';


--
-- TOC entry 5268 (class 0 OID 0)
-- Dependencies: 370
-- Name: COLUMN campo.tabla_campo_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN campo.tabla_campo_fk IS 'Llave foránea, relaciona cada registro de esta tabla con la tabla  "tabla" de la base de Datos del sistema SIBICA.';


--
-- TOC entry 379 (class 1259 OID 203519)
-- Name: campo_id_campo_seq; Type: SEQUENCE; Schema: public; Owner: sibica
--

CREATE SEQUENCE campo_id_campo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE campo_id_campo_seq OWNER TO sibica;

--
-- TOC entry 254 (class 1259 OID 154492)
-- Name: capa; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE capa (
    id_capa integer NOT NULL,
    nombre_capa character varying(80)
);


ALTER TABLE capa OWNER TO sistemas;

--
-- TOC entry 5270 (class 0 OID 0)
-- Dependencies: 254
-- Name: TABLE capa; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE capa IS 'Esta tabla Almacena información de las diferentes Capas con la que esta configurado el archivo .map en el geovisor de la IDESC, permitiendo clasificar y visualizar predios en diferentes colores segun la clasificación realizada.';


--
-- TOC entry 5271 (class 0 OID 0)
-- Dependencies: 254
-- Name: COLUMN capa.id_capa; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN capa.id_capa IS 'Llave primaria que identifica de forma única y consecutiva cada registro de esta tabla';


--
-- TOC entry 255 (class 1259 OID 154495)
-- Name: catastral; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE catastral (
    id_catastro integer NOT NULL,
    predial character varying(30),
    codnal character varying(30)
);


ALTER TABLE catastral OWNER TO sistemas;

--
-- TOC entry 256 (class 1259 OID 154498)
-- Name: catastro; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE catastro (
    registro integer NOT NULL,
    predial character varying(30),
    codnal character varying(30),
    comuna character varying(10),
    matricula character varying(25),
    escritura character varying(15),
    nit_tcro character varying(15),
    direccion character varying(60),
    areat double precision,
    areac double precision
);


ALTER TABLE catastro OWNER TO sistemas;

--
-- TOC entry 257 (class 1259 OID 154501)
-- Name: ciudad; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE ciudad (
    cod_ciu character varying(4) NOT NULL,
    nombre_ciu character varying(50),
    cod_dep character varying(3)
);


ALTER TABLE ciudad OWNER TO sistemas;

--
-- TOC entry 5273 (class 0 OID 0)
-- Dependencies: 257
-- Name: TABLE ciudad; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE ciudad IS 'Esta tabla almacena información de las ciudades de Colombia.';


--
-- TOC entry 5274 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN ciudad.cod_ciu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN ciudad.cod_ciu IS 'Código de la Ciudad de acuerdo con el Dane.';


--
-- TOC entry 5275 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN ciudad.nombre_ciu; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN ciudad.nombre_ciu IS 'Nombre de la Ciudad';


--
-- TOC entry 5276 (class 0 OID 0)
-- Dependencies: 257
-- Name: COLUMN ciudad.cod_dep; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN ciudad.cod_dep IS 'Código del departamento al que pertenece la ciudad';


--
-- TOC entry 258 (class 1259 OID 154504)
-- Name: clase_inmueble; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE clase_inmueble (
    id_clase integer NOT NULL,
    clase character varying(50)
);


ALTER TABLE clase_inmueble OWNER TO sistemas;

--
-- TOC entry 5278 (class 0 OID 0)
-- Dependencies: 258
-- Name: TABLE clase_inmueble; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE clase_inmueble IS 'Almacena información de la Clase de Inmueble (terreno, construcción, propiedad horizontal, etc)';


--
-- TOC entry 5279 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN clase_inmueble.id_clase; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN clase_inmueble.id_clase IS 'Número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5280 (class 0 OID 0)
-- Dependencies: 258
-- Name: COLUMN clase_inmueble.clase; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN clase_inmueble.clase IS 'Nombre de la Clase de Inmueble.';


--
-- TOC entry 385 (class 1259 OID 209915)
-- Name: clasificacion_panorama; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE clasificacion_panorama (
    id_clasificacion integer NOT NULL,
    nombre_clasificacion character varying,
    valor_menor numeric,
    valor_mayor numeric
);


ALTER TABLE clasificacion_panorama OWNER TO sistemas;

--
-- TOC entry 5282 (class 0 OID 0)
-- Dependencies: 385
-- Name: COLUMN clasificacion_panorama.nombre_clasificacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN clasificacion_panorama.nombre_clasificacion IS 'Campo donde se guarda el nombre de la clasificacion de los panoramas de riesgo';


--
-- TOC entry 5283 (class 0 OID 0)
-- Dependencies: 385
-- Name: COLUMN clasificacion_panorama.valor_menor; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN clasificacion_panorama.valor_menor IS 'Campo donde se define el rango menor para que el panorama de riesgo con su puntaje, aplique para esta clasificacion';


--
-- TOC entry 5284 (class 0 OID 0)
-- Dependencies: 385
-- Name: COLUMN clasificacion_panorama.valor_mayor; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN clasificacion_panorama.valor_mayor IS 'Campo donde se define el rango mayor para que el panorama de riesgo con su puntaje, aplique para esta clasificacion';


--
-- TOC entry 259 (class 1259 OID 154507)
-- Name: comunas; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comunas (
    gid integer NOT NULL,
    comuna double precision,
    nombre character varying(254),
    "AREA" double precision,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 7663))
);


ALTER TABLE comunas OWNER TO postgres;

--
-- TOC entry 260 (class 1259 OID 154516)
-- Name: comunas_gid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE comunas_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comunas_gid_seq OWNER TO postgres;

--
-- TOC entry 5287 (class 0 OID 0)
-- Dependencies: 260
-- Name: comunas_gid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE comunas_gid_seq OWNED BY comunas.gid;


--
-- TOC entry 261 (class 1259 OID 154521)
-- Name: contable; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE contable (
    predial character varying(30) NOT NULL,
    cuenta character varying(12),
    activofijo character varying(12),
    valoradq double precision,
    valorneto double precision,
    areaterreno double precision
);


ALTER TABLE contable OWNER TO sistemas;

--
-- TOC entry 359 (class 1259 OID 197280)
-- Name: cuenta; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE cuenta (
    num_cuenta character varying(15) NOT NULL,
    nombre_cuenta character varying(90)
);


ALTER TABLE cuenta OWNER TO sistemas;

--
-- TOC entry 5288 (class 0 OID 0)
-- Dependencies: 359
-- Name: TABLE cuenta; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE cuenta IS 'Esta tabla almacena información de las cuentas con las que se contabiliza o registra un predio en SAP.';


--
-- TOC entry 5289 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN cuenta.num_cuenta; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN cuenta.num_cuenta IS 'Número de cuenta contable con la que se encuentra registrado un predio en SAP';


--
-- TOC entry 5290 (class 0 OID 0)
-- Dependencies: 359
-- Name: COLUMN cuenta.nombre_cuenta; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN cuenta.nombre_cuenta IS 'Nombre de la cuenta  con la que se contabiliza un predio en SAP.';


--
-- TOC entry 262 (class 1259 OID 154543)
-- Name: matricula; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE matricula (
    id_mat integer,
    numero_mat character varying(25) NOT NULL,
    fecha_mat date,
    ciudad_mat character varying(4),
    estado_juridico_mat character varying(15),
    cantidad_gravamen_mat integer,
    procontra_mat character varying(2),
    otroprop_mat character varying(2),
    tipoprop_mat character varying(15)
);


ALTER TABLE matricula OWNER TO sistemas;

--
-- TOC entry 5292 (class 0 OID 0)
-- Dependencies: 262
-- Name: TABLE matricula; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE matricula IS 'Esta tabla almacena información de la matricula inmobiliaria de un Bien Inmueble.';


--
-- TOC entry 5293 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN matricula.id_mat; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN matricula.id_mat IS 'Número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5294 (class 0 OID 0)
-- Dependencies: 262
-- Name: COLUMN matricula.numero_mat; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN matricula.numero_mat IS 'Número de la matricula Inmobiliaria';


--
-- TOC entry 263 (class 1259 OID 154546)
-- Name: dapm_sepou_construccion; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW dapm_sepou_construccion AS
SELECT construccion.id_const AS registro, construccion.predialterreno_const_fk AS predial_terreno, construccion.predial_edificacion_const AS predial_edificacion, construccion.id_catastro_const, construccion.activofijo_const AS activo_fijo_const, construccion.codigonal_const AS codigo_nal_const, construccion.codigounico_const AS codigo_unico_const, construccion.direccion_const, construccion.nombre_const, construccion.numpisos_const AS numero_pisos, construccion.numconstruccion_const AS numero_construcciones, construccion.ano_const AS ano_construccion, construccion.sismoresiste_const AS sismoresiste, construccion.afecta_pot_const AS afecta_pot, construccion.area_edifica_const AS area_edifica, construccion.area_anexos_const AS area_anexos, matricula.numero_mat AS matricula_inmob, matricula.fecha_mat, capa.nombre_capa AS capa_idesc FROM (((matricula matricula RIGHT JOIN construccion construccion ON (((matricula.numero_mat)::text = (construccion.mat_inmob_const)::text))) LEFT JOIN ciudad ciudad ON (((matricula.ciudad_mat)::text = (ciudad.cod_ciu)::text))) LEFT JOIN capa capa ON ((construccion.id_capa_const = capa.id_capa))) ORDER BY construccion.id_const;


ALTER TABLE dapm_sepou_construccion OWNER TO sistemas;

--
-- TOC entry 5296 (class 0 OID 0)
-- Dependencies: 263
-- Name: VIEW dapm_sepou_construccion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW dapm_sepou_construccion IS 'Se crea esta vista para dar acceso al grupo de Planeación Municipal (Planificación Territorial Escala General - Desarrollo Sostenible y Cambio Climático- Subdirección Planificación del Territorio, Oficio Orfeo No. 201741320500003884)';


--
-- TOC entry 264 (class 1259 OID 154551)
-- Name: dapm_sepou_terrenos; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW dapm_sepou_terrenos AS
SELECT DISTINCT prediomunicipio.id_p AS registro, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.identifica_p AS predial, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.codigounico_p AS codigo_unico, prediomunicipio.codigonal_p AS codigo_nacional, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion, prediomunicipio.direccioncatastro_p AS direccion_catastro, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.mat_inmob_p AS mat_inmobiliaria, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.derecho_p AS derecho, prediomunicipio.nombre_areacedida_p AS nombre_area_cedida, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, estado.nombre_estado AS estado, tipo_doc.nombre_tipod AS tipo_documento, documento.numero_doc AS numero_documento, documento.fecha_doc, documento.id_not_fk AS notaria FROM ((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN estado estado ON ((prediomunicipio.id_estado_fk = estado.id_estado))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) WHERE ((prediomunicipio.id_estado_fk = 1) OR (prediomunicipio.id_estado_fk = 2)) ORDER BY prediomunicipio.id_p;


ALTER TABLE dapm_sepou_terrenos OWNER TO sistemas;

--
-- TOC entry 5298 (class 0 OID 0)
-- Dependencies: 264
-- Name: VIEW dapm_sepou_terrenos; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW dapm_sepou_terrenos IS 'Se crea esta vista para dar acceso al grupo de Planeación Municipal (Planificación Territorial Escala General - Desarrollo Sostenible y Cambio Climático- Subdirección Planificación del Territorio, Oficio Orfeo No. 201741320500003884)';


--
-- TOC entry 265 (class 1259 OID 154556)
-- Name: departamento; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE departamento (
    cod_dep character varying(3) NOT NULL,
    nombre_dep character varying(60)
);


ALTER TABLE departamento OWNER TO sistemas;

--
-- TOC entry 5300 (class 0 OID 0)
-- Dependencies: 265
-- Name: TABLE departamento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE departamento IS 'Esta tabla Almacena información de departamentos de Colombia de acuerdo al código Dane.';


--
-- TOC entry 5301 (class 0 OID 0)
-- Dependencies: 265
-- Name: COLUMN departamento.cod_dep; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN departamento.cod_dep IS 'Código del departamento según el Dane.';


--
-- TOC entry 5302 (class 0 OID 0)
-- Dependencies: 265
-- Name: COLUMN departamento.nombre_dep; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN departamento.nombre_dep IS 'Nombre del departamento de Colombia.';


--
-- TOC entry 266 (class 1259 OID 154559)
-- Name: educacion; Type: TABLE; Schema: public; Owner: topografia; Tablespace: 
--

CREATE TABLE educacion (
    gid integer NOT NULL,
    id integer,
    nodo character varying(10),
    id_shp character varying(14),
    geom geometry,
    CONSTRAINT enforce_dims_geom CHECK ((st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((st_srid(geom) = 6249))
);


ALTER TABLE educacion OWNER TO topografia;

--
-- TOC entry 267 (class 1259 OID 154568)
-- Name: educacion_gid_seq; Type: SEQUENCE; Schema: public; Owner: topografia
--

CREATE SEQUENCE educacion_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE educacion_gid_seq OWNER TO topografia;

--
-- TOC entry 5304 (class 0 OID 0)
-- Dependencies: 267
-- Name: educacion_gid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: topografia
--

ALTER SEQUENCE educacion_gid_seq OWNED BY educacion.gid;


--
-- TOC entry 268 (class 1259 OID 154570)
-- Name: epg_capa; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_capa (
    id_capa_epg integer NOT NULL,
    nombre_capa_epg character varying(50)
);


ALTER TABLE epg_capa OWNER TO sistemas;

--
-- TOC entry 269 (class 1259 OID 154573)
-- Name: epg_clase; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_clase (
    id_c integer NOT NULL,
    nombre_c character varying(50)
);


ALTER TABLE epg_clase OWNER TO sistemas;

--
-- TOC entry 5306 (class 0 OID 0)
-- Dependencies: 269
-- Name: TABLE epg_clase; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_clase IS 'Esta tabla almacena información de la calsificación dada a un bien mueble (Tecnológico, Funcionamiento, Mueble) dentro del espaciograma';


--
-- TOC entry 5307 (class 0 OID 0)
-- Dependencies: 269
-- Name: COLUMN epg_clase.id_c; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_clase.id_c IS 'No. Consecutivo';


--
-- TOC entry 5308 (class 0 OID 0)
-- Dependencies: 269
-- Name: COLUMN epg_clase.nombre_c; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_clase.nombre_c IS 'Nombre de la Clasificación dada a un Bien Mueble dentro del Epaciograma';


--
-- TOC entry 270 (class 1259 OID 154576)
-- Name: sq_epg_consumo; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_epg_consumo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_consumo OWNER TO sistemas;

--
-- TOC entry 271 (class 1259 OID 154578)
-- Name: epg_consumo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_consumo (
    id_cm integer DEFAULT nextval('sq_epg_consumo'::regclass) NOT NULL,
    ubicacion_nodo_fks integer NOT NULL,
    servicio_cm_fk integer,
    consumo_anual_cm integer,
    vigencia_cm character varying(4),
    observaciones_cm character varying(100),
    fecha_cm date
);


ALTER TABLE epg_consumo OWNER TO sistemas;

--
-- TOC entry 5310 (class 0 OID 0)
-- Dependencies: 271
-- Name: TABLE epg_consumo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_consumo IS 'Esta tabla almacena información del consumo de algunos servicios de cada organismo dentro del espaciograma';


--
-- TOC entry 5311 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.id_cm; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.id_cm IS 'No. Consecutivo';


--
-- TOC entry 5312 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.ubicacion_nodo_fks; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.ubicacion_nodo_fks IS 'Ubicación del organismo o nodo del espaciograma';


--
-- TOC entry 5313 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.servicio_cm_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.servicio_cm_fk IS 'Servicio consumido';


--
-- TOC entry 5314 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.consumo_anual_cm; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.consumo_anual_cm IS 'Valor en pesos del consumo anual de determinado servicio o elemento.';


--
-- TOC entry 5315 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.vigencia_cm; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.vigencia_cm IS 'Año o periodo al que se refiere el consumo';


--
-- TOC entry 5316 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.observaciones_cm; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.observaciones_cm IS 'Observaciones del consumo dentro del espaciograma';


--
-- TOC entry 5317 (class 0 OID 0)
-- Dependencies: 271
-- Name: COLUMN epg_consumo.fecha_cm; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_consumo.fecha_cm IS 'Fecha del registro';


--
-- TOC entry 272 (class 1259 OID 154582)
-- Name: sq_epg_elemento; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_epg_elemento
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_elemento OWNER TO sistemas;

--
-- TOC entry 273 (class 1259 OID 154584)
-- Name: epg_elemento; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_elemento (
    id_e integer DEFAULT nextval('sq_epg_elemento'::regclass) NOT NULL,
    nombre_e character varying(100) NOT NULL,
    placa_e character varying(20),
    clase_e_fk integer,
    tipo_e_fk integer,
    marca_e_fk integer,
    modelo_e character varying(50),
    descripcion_e character varying(100)
);


ALTER TABLE epg_elemento OWNER TO sistemas;

--
-- TOC entry 5319 (class 0 OID 0)
-- Dependencies: 273
-- Name: TABLE epg_elemento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_elemento IS 'Esta tabla almacena información general de cada elemento (bien mueble, vehículo, etc) que tiene un organismo a su cargo';


--
-- TOC entry 5320 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.id_e; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.id_e IS 'No. Consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5321 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.nombre_e; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.nombre_e IS 'Nombre del elemento (muebles, vehículos, equipo tecnológico, etc) ';


--
-- TOC entry 5322 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.placa_e; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.placa_e IS 'No. de Placa o identificación de un vehículo o bien mueble';


--
-- TOC entry 5323 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.clase_e_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.clase_e_fk IS 'Clasificación del bien mueble o vehículo';


--
-- TOC entry 5324 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.tipo_e_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.tipo_e_fk IS 'Tipo de elemento';


--
-- TOC entry 5325 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.marca_e_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.marca_e_fk IS 'Marca aasociada al equipo o elemento.';


--
-- TOC entry 5326 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.modelo_e; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.modelo_e IS 'Modelo del elemento (bien mueble o vehículo)';


--
-- TOC entry 5327 (class 0 OID 0)
-- Dependencies: 273
-- Name: COLUMN epg_elemento.descripcion_e; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_elemento.descripcion_e IS 'Descripción del elemento';


--
-- TOC entry 274 (class 1259 OID 154588)
-- Name: epg_estado; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_estado (
    id_estado integer NOT NULL,
    nombre_estado character varying(30)
);


ALTER TABLE epg_estado OWNER TO sistemas;

--
-- TOC entry 5329 (class 0 OID 0)
-- Dependencies: 274
-- Name: TABLE epg_estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_estado IS 'Esta tabla almacena información del estado de un elemento';


--
-- TOC entry 5330 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN epg_estado.id_estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_estado.id_estado IS 'No. Consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5331 (class 0 OID 0)
-- Dependencies: 274
-- Name: COLUMN epg_estado.nombre_estado; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_estado.nombre_estado IS 'Nombre del estado';


SET default_with_oids = true;

--
-- TOC entry 275 (class 1259 OID 154591)
-- Name: epg_geo_nodo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_geo_nodo (
    gid integer NOT NULL,
    id_shp character varying(30),
    the_geom geometry NOT NULL,
    direccion character varying(150),
    capa_epg integer,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POINT'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE epg_geo_nodo OWNER TO sistemas;

--
-- TOC entry 5333 (class 0 OID 0)
-- Dependencies: 275
-- Name: TABLE epg_geo_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_geo_nodo IS 'Esta tabla almacena información geográfica de cada nodo (organismo x ubicación), representando solo un punto.';


--
-- TOC entry 344 (class 1259 OID 190346)
-- Name: epg_geo_nodo_poligono; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_geo_nodo_poligono (
    gid integer NOT NULL,
    id_ubica_nodo integer,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE epg_geo_nodo_poligono OWNER TO sistemas;

--
-- TOC entry 5335 (class 0 OID 0)
-- Dependencies: 344
-- Name: TABLE epg_geo_nodo_poligono; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_geo_nodo_poligono IS 'Esta tabla almacena información geografíca (shape) de cada uno de los organismos presentes en la tabla epg_ubicacion_nodo, es decir la representación arquitectónica del espacio que ocupa en determinado bien inmueble y piso.';


--
-- TOC entry 343 (class 1259 OID 190308)
-- Name: epg_geo_planta_general; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_geo_planta_general (
    gid integer NOT NULL,
    id_shp character varying NOT NULL,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE epg_geo_planta_general OWNER TO sistemas;

--
-- TOC entry 5336 (class 0 OID 0)
-- Dependencies: 343
-- Name: TABLE epg_geo_planta_general; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_geo_planta_general IS 'Esta tabla almacena la geografía (shape) de la distribución arquitectónica (vista de planta) de cada piso de los diferentes edificios que se quieren representar en espaciograma.';


--
-- TOC entry 276 (class 1259 OID 154600)
-- Name: sq_epg_inv; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_epg_inv
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_inv OWNER TO sistemas;

SET default_with_oids = false;

--
-- TOC entry 277 (class 1259 OID 154602)
-- Name: epg_inventario; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_inventario (
    id_inv integer DEFAULT nextval('sq_epg_inv'::regclass) NOT NULL,
    nodo_ubicacion_fk integer NOT NULL,
    id_elemento_fk integer NOT NULL,
    tipo_ocupa_fk integer,
    estado_fk integer,
    cantidad_inv integer,
    observaciones character varying(100),
    fecha_inv date
);


ALTER TABLE epg_inventario OWNER TO sistemas;

--
-- TOC entry 5337 (class 0 OID 0)
-- Dependencies: 277
-- Name: TABLE epg_inventario; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_inventario IS 'Esta tabla almacena información del inventario de bienes muebles de cada organismo dentro del proyecto espaciograma';


--
-- TOC entry 5338 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.id_inv; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.id_inv IS 'No. Consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5339 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.nodo_ubicacion_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.nodo_ubicacion_fk IS 'Ubicación del nodo u organismo dentro del espaciograma';


--
-- TOC entry 5340 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.id_elemento_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.id_elemento_fk IS 'Elemento (mueble, vehículo, etc) a cargar en el inventario de cada organismo del espaciograma';


--
-- TOC entry 5341 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.tipo_ocupa_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.tipo_ocupa_fk IS 'Tipo de ocupación del elemento a cargo del organismo (alquiler, propio, etc)';


--
-- TOC entry 5342 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.estado_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.estado_fk IS 'Estado del elemento dentro del inventario de espaciograma.';


--
-- TOC entry 5343 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.cantidad_inv; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.cantidad_inv IS 'Cantidad a cargar dentro del inventario de espaciograma';


--
-- TOC entry 5344 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.observaciones; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.observaciones IS 'Observaciones del cargue o inventario del espaciograma';


--
-- TOC entry 5345 (class 0 OID 0)
-- Dependencies: 277
-- Name: COLUMN epg_inventario.fecha_inv; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_inventario.fecha_inv IS 'Fecha del inventario ';


--
-- TOC entry 278 (class 1259 OID 154606)
-- Name: sq_epg_marca; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_epg_marca
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_marca OWNER TO sistemas;

--
-- TOC entry 279 (class 1259 OID 154608)
-- Name: epg_marca; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_marca (
    id_marca integer DEFAULT nextval('sq_epg_marca'::regclass) NOT NULL,
    nombre_marca character varying(50) NOT NULL
);


ALTER TABLE epg_marca OWNER TO sistemas;

--
-- TOC entry 5347 (class 0 OID 0)
-- Dependencies: 279
-- Name: TABLE epg_marca; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_marca IS 'Esta tabla almacena información de marcas de cada elemento (bien mueble, vehículo, etc) dentro del espaciograma';


SET default_with_oids = true;

--
-- TOC entry 280 (class 1259 OID 154612)
-- Name: epg_nivel_gestion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_nivel_gestion (
    id_ng integer NOT NULL,
    nombre_ng character varying(30)
);


ALTER TABLE epg_nivel_gestion OWNER TO sistemas;

--
-- TOC entry 281 (class 1259 OID 154615)
-- Name: sq_id_epg_nodo; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_id_epg_nodo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_id_epg_nodo OWNER TO sistemas;

--
-- TOC entry 282 (class 1259 OID 154617)
-- Name: epg_nodo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_nodo (
    id_nodo integer DEFAULT nextval('sq_id_epg_nodo'::regclass) NOT NULL,
    codigo_nodo character varying(20) NOT NULL,
    nombre_nodo character varying(150),
    nivel_nodo integer,
    padre_nodo character varying(20),
    nivel_gestion integer,
    funciones_nodo text
);


ALTER TABLE epg_nodo OWNER TO sistemas;

--
-- TOC entry 5350 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE epg_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_nodo IS 'Esta tabla almacena información básica de cada organismo o nodo';


--
-- TOC entry 5351 (class 0 OID 0)
-- Dependencies: 282
-- Name: COLUMN epg_nodo.id_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_nodo.id_nodo IS 'No. Consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5352 (class 0 OID 0)
-- Dependencies: 282
-- Name: COLUMN epg_nodo.codigo_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_nodo.codigo_nodo IS 'Código del organismo';


--
-- TOC entry 5353 (class 0 OID 0)
-- Dependencies: 282
-- Name: COLUMN epg_nodo.nombre_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_nodo.nombre_nodo IS 'Nombre del organismo';


--
-- TOC entry 5354 (class 0 OID 0)
-- Dependencies: 282
-- Name: COLUMN epg_nodo.nivel_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_nodo.nivel_nodo IS 'Nivel del organismo (Departamento, Secretaría, etc)';


--
-- TOC entry 5355 (class 0 OID 0)
-- Dependencies: 282
-- Name: COLUMN epg_nodo.padre_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_nodo.padre_nodo IS 'Organismo o Nodo padre';


--
-- TOC entry 283 (class 1259 OID 154621)
-- Name: sq_epg_ps; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_epg_ps
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_ps OWNER TO sistemas;

SET default_with_oids = false;

--
-- TOC entry 284 (class 1259 OID 154623)
-- Name: epg_personal; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_personal (
    id_ps integer DEFAULT nextval('sq_epg_ps'::regclass) NOT NULL,
    ubica_nodo_ps_fk integer,
    tipo_ps_fk integer,
    cantidad_ps integer,
    espacio_actual_ps double precision,
    espacio_req_ps double precision,
    observaciones_ps character varying(100),
    fecha_ps date
);


ALTER TABLE epg_personal OWNER TO sistemas;

--
-- TOC entry 5357 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE epg_personal; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_personal IS 'Esta tabla almacena información básica del personal a cargar dentro del espaciograma de cada nodo.';


--
-- TOC entry 285 (class 1259 OID 154627)
-- Name: epg_servicio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_servicio (
    id_sv integer NOT NULL,
    nombre_sv character varying(20)
);


ALTER TABLE epg_servicio OWNER TO sistemas;

--
-- TOC entry 5359 (class 0 OID 0)
-- Dependencies: 285
-- Name: TABLE epg_servicio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_servicio IS 'Esta tabla almacena información de los servicios consumidos por cada nodo.';


--
-- TOC entry 286 (class 1259 OID 154630)
-- Name: sq_epg_tipo; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_epg_tipo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_tipo OWNER TO postgres;

--
-- TOC entry 287 (class 1259 OID 154632)
-- Name: epg_tipo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE epg_tipo (
    id_tipo integer DEFAULT nextval('sq_epg_tipo'::regclass) NOT NULL,
    nombre_tipo character varying(50) NOT NULL
);


ALTER TABLE epg_tipo OWNER TO postgres;

--
-- TOC entry 5361 (class 0 OID 0)
-- Dependencies: 287
-- Name: TABLE epg_tipo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE epg_tipo IS 'Almacena información del tipo de elemento del inventario en especiograma';


--
-- TOC entry 288 (class 1259 OID 154636)
-- Name: sq_epg_to; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_epg_to
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_to OWNER TO postgres;

--
-- TOC entry 289 (class 1259 OID 154638)
-- Name: epg_tipo_ocupacion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_tipo_ocupacion (
    id_to integer DEFAULT nextval('sq_epg_to'::regclass) NOT NULL,
    nombre_to character varying(100)
);


ALTER TABLE epg_tipo_ocupacion OWNER TO sistemas;

--
-- TOC entry 5363 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE epg_tipo_ocupacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_tipo_ocupacion IS 'Esta tabla almacena información del tipo de ocupación que se le da a  un elemento(mueble, vehículo, etc) dentro de un organismo del espaciograma';


--
-- TOC entry 290 (class 1259 OID 154642)
-- Name: sq_epg_tp; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_epg_tp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_epg_tp OWNER TO postgres;

--
-- TOC entry 291 (class 1259 OID 154644)
-- Name: epg_tipo_personal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE epg_tipo_personal (
    id_tp integer DEFAULT nextval('sq_epg_tp'::regclass) NOT NULL,
    nombre_tp character varying(15)
);


ALTER TABLE epg_tipo_personal OWNER TO postgres;

--
-- TOC entry 5365 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE epg_tipo_personal; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE epg_tipo_personal IS 'Esta tabla almacena información del tipo de personal a cargar en el inventario de cada organismo del espaciograma';


--
-- TOC entry 292 (class 1259 OID 154648)
-- Name: sq_id_epg_ubicanodo; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE sq_id_epg_ubicanodo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_id_epg_ubicanodo OWNER TO sistemas;

SET default_with_oids = true;

--
-- TOC entry 293 (class 1259 OID 154650)
-- Name: epg_ubicacion_nodo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE epg_ubicacion_nodo (
    id_ubic integer DEFAULT nextval('sq_id_epg_ubicanodo'::regclass) NOT NULL,
    cod_nodo_ubic character varying(20) NOT NULL,
    predial_ubic character varying(30) NOT NULL,
    piso_ubic character varying(2) NOT NULL,
    gid_planta integer
);


ALTER TABLE epg_ubicacion_nodo OWNER TO sistemas;

--
-- TOC entry 5367 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE epg_ubicacion_nodo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE epg_ubicacion_nodo IS 'Esta tabla almacena información de la ubicación geográfica y espacial de cada nodo u organismo dentro del espaciograma.';


--
-- TOC entry 5368 (class 0 OID 0)
-- Dependencies: 293
-- Name: COLUMN epg_ubicacion_nodo.id_ubic; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_ubicacion_nodo.id_ubic IS 'Número consecutivo que identifica de manera única cada registro de esta tabla.';


--
-- TOC entry 5369 (class 0 OID 0)
-- Dependencies: 293
-- Name: COLUMN epg_ubicacion_nodo.cod_nodo_ubic; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_ubicacion_nodo.cod_nodo_ubic IS 'Código del nodo u organismo';


--
-- TOC entry 5370 (class 0 OID 0)
-- Dependencies: 293
-- Name: COLUMN epg_ubicacion_nodo.predial_ubic; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_ubicacion_nodo.predial_ubic IS 'Número predial del bien inmueble donde se ubica el organismo';


--
-- TOC entry 5371 (class 0 OID 0)
-- Dependencies: 293
-- Name: COLUMN epg_ubicacion_nodo.piso_ubic; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN epg_ubicacion_nodo.piso_ubic IS 'Número de piso donde se ubica el organismo dentro del espaciograma.';


SET default_with_oids = false;

--
-- TOC entry 386 (class 1259 OID 209955)
-- Name: file; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE file (
    id_file integer DEFAULT nextval(('public.file_id_file_seq'::text)::regclass) NOT NULL,
    nombre_file character varying(50) NOT NULL,
    ruta_file character varying(250) NOT NULL,
    fecha_creacion date DEFAULT ('now'::text)::date
);


ALTER TABLE file OWNER TO sistemas;

--
-- TOC entry 5373 (class 0 OID 0)
-- Dependencies: 386
-- Name: TABLE file; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE file IS 'Esta tabla almacena la ruta de los registros fotograficos que se capturan en cada tarea de un panorama de riesgo';


--
-- TOC entry 395 (class 1259 OID 210936)
-- Name: file_id_file_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE file_id_file_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE file_id_file_seq OWNER TO sistemas;

SET default_with_oids = true;

--
-- TOC entry 294 (class 1259 OID 154654)
-- Name: geo_amob_li_mc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geo_amob_li_mc (
    gid integer NOT NULL,
    id_shp character varying(30),
    id_tipo integer,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'LINESTRING'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE geo_amob_li_mc OWNER TO sistemas;

--
-- TOC entry 5376 (class 0 OID 0)
-- Dependencies: 294
-- Name: COLUMN geo_amob_li_mc.id_tipo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN geo_amob_li_mc.id_tipo IS 'Llave foránea que relaciona esta tabla con la tabla Tipo_amoblamiento';


--
-- TOC entry 295 (class 1259 OID 154663)
-- Name: geo_amob_pol_mc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geo_amob_pol_mc (
    gid integer NOT NULL,
    id_shp character varying(30),
    id_tipo integer,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE geo_amob_pol_mc OWNER TO sistemas;

--
-- TOC entry 296 (class 1259 OID 154672)
-- Name: geo_amob_pto_mc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geo_amob_pto_mc (
    gid integer NOT NULL,
    id_shp character varying(30),
    id_tipo integer,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POINT'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE geo_amob_pto_mc OWNER TO sistemas;

--
-- TOC entry 297 (class 1259 OID 154681)
-- Name: geo_constr_mc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geo_constr_mc (
    gid integer NOT NULL,
    predial_const character varying(30),
    the_geom geometry,
    id_tipo_const integer,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'POLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE geo_constr_mc OWNER TO sistemas;

--
-- TOC entry 226 (class 1259 OID 17215)
-- Name: geography_columns; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW geography_columns AS
SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, geography_typmod_dims(a.atttypmod) AS coord_dimension, geography_typmod_srid(a.atttypmod) AS srid, geography_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE ((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));


ALTER TABLE geography_columns OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 16755)
-- Name: geometry_columns; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE geometry_columns (
    f_table_catalog character varying(256) NOT NULL,
    f_table_schema character varying(256) NOT NULL,
    f_table_name character varying(256) NOT NULL,
    f_geometry_column character varying(256) NOT NULL,
    coord_dimension integer NOT NULL,
    srid integer NOT NULL,
    type character varying(30) NOT NULL
);


ALTER TABLE geometry_columns OWNER TO sistemas;

--
-- TOC entry 352 (class 1259 OID 196922)
-- Name: id_actas; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE id_actas
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 5000
    CACHE 1;


ALTER TABLE id_actas OWNER TO sistemas;

--
-- TOC entry 332 (class 1259 OID 162912)
-- Name: id_proyecto; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE id_proyecto
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE id_proyecto OWNER TO sistemas;

--
-- TOC entry 345 (class 1259 OID 190375)
-- Name: id_serviciopubli; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE id_serviciopubli
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE id_serviciopubli OWNER TO sistemas;

--
-- TOC entry 362 (class 1259 OID 198639)
-- Name: id_terreno; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE id_terreno
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE id_terreno OWNER TO sistemas;

SET default_with_oids = false;

--
-- TOC entry 365 (class 1259 OID 199154)
-- Name: juegos; Type: TABLE; Schema: public; Owner: topografia; Tablespace: 
--

CREATE TABLE juegos (
    gid integer NOT NULL,
    id_shp character varying(25),
    id_tipo smallint,
    __gid integer,
    the_geom geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((st_ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((geometrytype(the_geom) = 'MULTILINESTRING'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((st_srid(the_geom) = 6249))
);


ALTER TABLE juegos OWNER TO topografia;

--
-- TOC entry 364 (class 1259 OID 199152)
-- Name: juegos_gid_seq; Type: SEQUENCE; Schema: public; Owner: topografia
--

CREATE SEQUENCE juegos_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE juegos_gid_seq OWNER TO topografia;

--
-- TOC entry 5382 (class 0 OID 0)
-- Dependencies: 364
-- Name: juegos_gid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: topografia
--

ALTER SEQUENCE juegos_gid_seq OWNED BY juegos.gid;


--
-- TOC entry 298 (class 1259 OID 154690)
-- Name: libro; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE libro (
    id_lib integer NOT NULL,
    predial_terreno_lib character varying(30),
    predial_construccion_lib character varying(30),
    valor_adqu_terreno double precision,
    valor_terreno_lib double precision,
    valor_adqu_construccion double precision,
    valor_construccion_lib double precision
);


ALTER TABLE libro OWNER TO sistemas;

--
-- TOC entry 5383 (class 0 OID 0)
-- Dependencies: 298
-- Name: TABLE libro; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE libro IS 'Se crea esta tabla para almacenar la información de valor en libros y valor de adquisición de cada Bien Inmueble.';


--
-- TOC entry 5384 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.predial_terreno_lib; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.predial_terreno_lib IS 'Número Predial del Terreno';


--
-- TOC entry 5385 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.predial_construccion_lib; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.predial_construccion_lib IS 'Número Predial de la Construcción.';


--
-- TOC entry 5386 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.valor_adqu_terreno; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.valor_adqu_terreno IS 'Valor de Adquisición del componente terreno.';


--
-- TOC entry 5387 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.valor_terreno_lib; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.valor_terreno_lib IS 'Valor en Libros del Terreno.';


--
-- TOC entry 5388 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.valor_adqu_construccion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.valor_adqu_construccion IS 'Valor Adquisición del componente Construcción';


--
-- TOC entry 5389 (class 0 OID 0)
-- Dependencies: 298
-- Name: COLUMN libro.valor_construccion_lib; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN libro.valor_construccion_lib IS 'Valor en libros de la Construcción.';


--
-- TOC entry 299 (class 1259 OID 154693)
-- Name: libro_id_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE libro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE libro_id_seq OWNER TO sistemas;

--
-- TOC entry 5391 (class 0 OID 0)
-- Dependencies: 299
-- Name: libro_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: sistemas
--

ALTER SEQUENCE libro_id_seq OWNED BY libro.id_lib;


--
-- TOC entry 383 (class 1259 OID 209535)
-- Name: log_usuario_sistema; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE log_usuario_sistema (
    id_log integer DEFAULT nextval(('public.log_usuario_sistema_id_log_seq'::text)::regclass) NOT NULL,
    fecha_log date,
    ip_addres_log inet,
    navegador_log character varying(25),
    tiempo_session_log character varying(10),
    usuario_log character varying(50)
);


ALTER TABLE log_usuario_sistema OWNER TO sistemas;

--
-- TOC entry 5392 (class 0 OID 0)
-- Dependencies: 383
-- Name: TABLE log_usuario_sistema; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE log_usuario_sistema IS 'Esta tabla almacena el registro de entradas y saidas de un usuario en el sistema SIBICA.';


--
-- TOC entry 5393 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.id_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.id_log IS 'Llave primaria, número consecutivo que identifica de manera única cada registro en esta tabla.';


--
-- TOC entry 5394 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.fecha_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.fecha_log IS 'Almacena la fecha y hora en la que un usuario ingresa al sistema.';


--
-- TOC entry 5395 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.ip_addres_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.ip_addres_log IS 'Almacena la dirección ip desde dónde se conecta un usuario al sistema';


--
-- TOC entry 5396 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.navegador_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.navegador_log IS 'Almacena el nombre del navegador utilizado por un usuario para acceder al sistema.';


--
-- TOC entry 5397 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.tiempo_session_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.tiempo_session_log IS 'Almacena el tiempo duarante el cual un usuario permanece en el sistema.';


--
-- TOC entry 5398 (class 0 OID 0)
-- Dependencies: 383
-- Name: COLUMN log_usuario_sistema.usuario_log; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN log_usuario_sistema.usuario_log IS 'Almacena información del usuario que se loguea en el sistema.';


--
-- TOC entry 393 (class 1259 OID 210926)
-- Name: log_usuario_sistema_id_log_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE log_usuario_sistema_id_log_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE log_usuario_sistema_id_log_seq OWNER TO sistemas;

--
-- TOC entry 371 (class 1259 OID 199323)
-- Name: modulo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE modulo (
    id_mod integer DEFAULT nextval(('public.modulo_id_mod_seq'::text)::regclass) NOT NULL,
    nombre_mod character varying(100),
    descripcion_mod character varying(200),
    fecha_creacion_mod date,
    key_mod character varying(20)
);


ALTER TABLE modulo OWNER TO sistemas;

--
-- TOC entry 5401 (class 0 OID 0)
-- Dependencies: 371
-- Name: TABLE modulo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE modulo IS 'Esta tabla almacena información de cada uno de los módulos sobre los cuales se puede otrorgar permiso de acceso a un determinado rol dentro del sistema SIBICA.';


--
-- TOC entry 5402 (class 0 OID 0)
-- Dependencies: 371
-- Name: COLUMN modulo.id_mod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo.id_mod IS 'Llave primaria, número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5403 (class 0 OID 0)
-- Dependencies: 371
-- Name: COLUMN modulo.nombre_mod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo.nombre_mod IS 'Nombre del módulo o funcionalidad del sistema SIBICA.';


--
-- TOC entry 5404 (class 0 OID 0)
-- Dependencies: 371
-- Name: COLUMN modulo.descripcion_mod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo.descripcion_mod IS 'Descripción del módulo o funcionalidad del sistema SIBICA.';


--
-- TOC entry 5405 (class 0 OID 0)
-- Dependencies: 371
-- Name: COLUMN modulo.fecha_creacion_mod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo.fecha_creacion_mod IS 'Almacena la fecha de creación del módulo o funcionalidad dentro del sistema SIBICA.';


--
-- TOC entry 5406 (class 0 OID 0)
-- Dependencies: 371
-- Name: COLUMN modulo.key_mod; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo.key_mod IS 'Columna llave css para aplicar, pemisologia al modulo';


--
-- TOC entry 376 (class 1259 OID 200310)
-- Name: modulo_id_mod_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE modulo_id_mod_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE modulo_id_mod_seq OWNER TO sistemas;

--
-- TOC entry 372 (class 1259 OID 199330)
-- Name: modulo_permiso; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE modulo_permiso (
    id_mp_pk integer DEFAULT nextval(('public.modulo_permiso_id_mp_pk_seq'::text)::regclass) NOT NULL,
    modulo_mp_fk integer NOT NULL,
    rol_mp_fk integer NOT NULL,
    fecha_creacion_mp date,
    estado_mp_fk integer,
    insertar_mp integer,
    editar_mp integer,
    consultar_mp integer,
    eliminar_mp integer
);


ALTER TABLE modulo_permiso OWNER TO sistemas;

--
-- TOC entry 5409 (class 0 OID 0)
-- Dependencies: 372
-- Name: TABLE modulo_permiso; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE modulo_permiso IS 'Esta tabla almacena los permisos dados a cada rol sobre los módulos o funcionalidades del sistema SIBICA.';


--
-- TOC entry 5410 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.id_mp_pk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.id_mp_pk IS 'Llave primaria, enumera de forma única y consecutiva cada registro de esta tabla.';


--
-- TOC entry 5411 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.modulo_mp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.modulo_mp_fk IS 'Llave foránea, relaciona esta tabla con la tabla modulo.';


--
-- TOC entry 5412 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.rol_mp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.rol_mp_fk IS 'Llave foránea, relaciona esta tabla con la tabla rol.';


--
-- TOC entry 5413 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.fecha_creacion_mp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.fecha_creacion_mp IS 'Alamacena la fecha en la que se crea el registro.';


--
-- TOC entry 5414 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.estado_mp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.estado_mp_fk IS 'Llave foránea, relaciona esta tabla con la tabla estado.';


--
-- TOC entry 5415 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.insertar_mp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.insertar_mp IS 'Permite la Inserción o creación de nuevos registros.';


--
-- TOC entry 5416 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.editar_mp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.editar_mp IS 'Permite conceder permisos de edición sobre los registros de la base de Datos.';


--
-- TOC entry 5417 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.consultar_mp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.consultar_mp IS 'Permite conceder permisos de solo consulta sobre los registros de la base de Datos.';


--
-- TOC entry 5418 (class 0 OID 0)
-- Dependencies: 372
-- Name: COLUMN modulo_permiso.eliminar_mp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso.eliminar_mp IS 'Permite conceder permisos de eliminación sobre los registros de la base de Datos.';


--
-- TOC entry 373 (class 1259 OID 199352)
-- Name: modulo_permiso_campo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE modulo_permiso_campo (
    id_mpc integer,
    modulo_permiso_fk integer NOT NULL,
    campo_fk integer NOT NULL,
    fecha_creacion_mpc date
);


ALTER TABLE modulo_permiso_campo OWNER TO sistemas;

--
-- TOC entry 5420 (class 0 OID 0)
-- Dependencies: 373
-- Name: TABLE modulo_permiso_campo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE modulo_permiso_campo IS 'Almacena los permisos dados sobre cada campo de las tablas en Base de Datos y sobre los modulos.';


--
-- TOC entry 5421 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN modulo_permiso_campo.id_mpc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso_campo.id_mpc IS 'Llave primaria, identifica de manera única y consecutiva cada registro en etsa tabla.';


--
-- TOC entry 5422 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN modulo_permiso_campo.modulo_permiso_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso_campo.modulo_permiso_fk IS 'Llave foránea, relaciona esta tabla con la tabla "modulo_permiso"';


--
-- TOC entry 5423 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN modulo_permiso_campo.campo_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso_campo.campo_fk IS 'Llave foránea, relaciona esta tabla con la tabla "campo"';


--
-- TOC entry 5424 (class 0 OID 0)
-- Dependencies: 373
-- Name: COLUMN modulo_permiso_campo.fecha_creacion_mpc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN modulo_permiso_campo.fecha_creacion_mpc IS 'Fecha de creación del registro.';


--
-- TOC entry 377 (class 1259 OID 203499)
-- Name: modulo_permiso_id_mp_pk_seq; Type: SEQUENCE; Schema: public; Owner: sibica
--

CREATE SEQUENCE modulo_permiso_id_mp_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE modulo_permiso_id_mp_pk_seq OWNER TO sibica;

--
-- TOC entry 300 (class 1259 OID 154695)
-- Name: oficina_expedicion_doc; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE oficina_expedicion_doc (
    id_oficina integer NOT NULL,
    nombre_oficina character varying(50)
);


ALTER TABLE oficina_expedicion_doc OWNER TO sistemas;

--
-- TOC entry 5426 (class 0 OID 0)
-- Dependencies: 300
-- Name: TABLE oficina_expedicion_doc; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE oficina_expedicion_doc IS 'Esta tabla almacena información de la oficina que expide un documento de propiedad de un Bien Inmueble.';


--
-- TOC entry 5427 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN oficina_expedicion_doc.id_oficina; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN oficina_expedicion_doc.id_oficina IS 'Número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5428 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN oficina_expedicion_doc.nombre_oficina; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN oficina_expedicion_doc.nombre_oficina IS 'Nombre de la oficina de expedición del documento de propiedad.';


--
-- TOC entry 387 (class 1259 OID 209984)
-- Name: panorama_riesgo; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE panorama_riesgo (
    id_panorama bigint NOT NULL,
    construcion_pr_fk integer,
    titulo_panorama character varying(300),
    descripcion_panorama text,
    estado_pr_fk integer,
    fecha_creacion date DEFAULT ('now'::text)::date,
    usuario_crea_fk integer,
    usuario_responsable integer
);


ALTER TABLE panorama_riesgo OWNER TO sistemas;

--
-- TOC entry 5430 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.id_panorama; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.id_panorama IS 'Llave primaria de la tabla';


--
-- TOC entry 5431 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.construcion_pr_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.construcion_pr_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla construcion';


--
-- TOC entry 5432 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.titulo_panorama; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.titulo_panorama IS 'Campo para guardar titulo o frase referente al panoramade riesgo registrado';


--
-- TOC entry 5433 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.descripcion_panorama; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.descripcion_panorama IS 'Campo para guardar una descripcion detallada del panorama de riesgo';


--
-- TOC entry 5434 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.estado_pr_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.estado_pr_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla estado';


--
-- TOC entry 5435 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.fecha_creacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.fecha_creacion IS 'Campo donde se guarda  la fecha en la que se crea el registro';


--
-- TOC entry 5436 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.usuario_crea_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.usuario_crea_fk IS 'Campo referencia a la tabla usuario (llave foránea), almacena información del usuario que crea el panorama de riesgo.';


--
-- TOC entry 5437 (class 0 OID 0)
-- Dependencies: 387
-- Name: COLUMN panorama_riesgo.usuario_responsable; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN panorama_riesgo.usuario_responsable IS 'Almacena información del usuario que se hace responsable del cumplimiento de las tareas dejadas en el panorama de riesgo.';


--
-- TOC entry 301 (class 1259 OID 154698)
-- Name: permiso; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE permiso (
    user_id integer NOT NULL,
    page_name character varying(255) NOT NULL,
    perm_name character varying(6) NOT NULL
);


ALTER TABLE permiso OWNER TO sistemas;

--
-- TOC entry 360 (class 1259 OID 198501)
-- Name: predio_temp; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE predio_temp (
    predial_t character varying(30) NOT NULL,
    codinal_t character varying(30),
    id_catastro_t character varying(30)
);


ALTER TABLE predio_temp OWNER TO sistemas;

--
-- TOC entry 302 (class 1259 OID 154712)
-- Name: proceso; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE proceso (
    id_proceso integer NOT NULL,
    nombre_proceso character varying(60)
);


ALTER TABLE proceso OWNER TO sistemas;

--
-- TOC entry 5439 (class 0 OID 0)
-- Dependencies: 302
-- Name: TABLE proceso; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE proceso IS 'Esta tabla almacena el nombre de los diferentes procesos o gravámenes que puede tener un Bien Inmueble.';


--
-- TOC entry 5440 (class 0 OID 0)
-- Dependencies: 302
-- Name: COLUMN proceso.id_proceso; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN proceso.id_proceso IS 'Número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5441 (class 0 OID 0)
-- Dependencies: 302
-- Name: COLUMN proceso.nombre_proceso; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN proceso.nombre_proceso IS 'Nombre del proceso o gravámen';


--
-- TOC entry 303 (class 1259 OID 154715)
-- Name: proceso_matricula; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE proceso_matricula (
    matricula character varying(25) NOT NULL,
    id_proceso integer NOT NULL
);


ALTER TABLE proceso_matricula OWNER TO sistemas;

--
-- TOC entry 5443 (class 0 OID 0)
-- Dependencies: 303
-- Name: TABLE proceso_matricula; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE proceso_matricula IS 'Esta tabla almacena la relación entre prediomunicipio y proceso, es decir, permite registrar varios procesos para un mismo Bien Inmueble.';


--
-- TOC entry 5444 (class 0 OID 0)
-- Dependencies: 303
-- Name: COLUMN proceso_matricula.matricula; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN proceso_matricula.matricula IS 'Indica el número de matricula';


--
-- TOC entry 5445 (class 0 OID 0)
-- Dependencies: 303
-- Name: COLUMN proceso_matricula.id_proceso; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN proceso_matricula.id_proceso IS 'Indica el código del proceso.';


--
-- TOC entry 331 (class 1259 OID 162878)
-- Name: proyecto; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE proyecto (
    id_pro integer DEFAULT nextval('id_proyecto'::regclass) NOT NULL,
    nombre_pro character varying(100) NOT NULL,
    documento_digital_pro character varying(150)
);


ALTER TABLE proyecto OWNER TO sistemas;

--
-- TOC entry 304 (class 1259 OID 154721)
-- Name: secuencia_id_reporte; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE secuencia_id_reporte
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE secuencia_id_reporte OWNER TO sistemas;

SET default_with_oids = true;

--
-- TOC entry 305 (class 1259 OID 154723)
-- Name: reporte_predio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE reporte_predio (
    id_reporte integer DEFAULT nextval('secuencia_id_reporte'::regclass) NOT NULL,
    the_geom geometry NOT NULL,
    predial character varying(30),
    tipo_reporte character varying(15) NOT NULL,
    fecha_reporte date NOT NULL,
    direccion_predio_reporte character varying(90),
    dir_ip_reporte inet,
    estado_reporte character varying(15),
    foto_reporte text,
    ciudadano_reporte character varying(100),
    cedula_reporte character varying(12),
    telefono_reporte character varying(12),
    radicado_orfeo character varying(20),
    observacion text,
    fecha_solicitud_restitucion date,
    oficio_solicitud character varying(20),
    fecha_inspeccion date,
    inspeccion character varying(100),
    observacion_ciudadano text
);


ALTER TABLE reporte_predio OWNER TO sistemas;

--
-- TOC entry 5449 (class 0 OID 0)
-- Dependencies: 305
-- Name: TABLE reporte_predio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE reporte_predio IS 'Esta tabla almacena los registros por reportes sobre un predio en posible situación de invasión o fraude a través de la App.';


--
-- TOC entry 5450 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.id_reporte; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.id_reporte IS 'Número consecutivo que enumera de forma única cada registro de esta tabla.';


--
-- TOC entry 5451 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.the_geom; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.the_geom IS 'Campo que almacena las coordenadas geograficas del predio objeto de reporte desde la Aplicación Móvil y/o Web Responsiva';


--
-- TOC entry 5452 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.predial; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.predial IS 'Campo que almacena el número predial como identificación adicional a las coordenadas, de aquellos predios objeto de reporte desde la App de Bienes Inmuebles.';


--
-- TOC entry 5453 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.tipo_reporte; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.tipo_reporte IS 'campo que almacena el tipo de reporte que se esta haciendo sobre un predio desde la App de Bienes Inmuebles.';


--
-- TOC entry 5454 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.fecha_reporte; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.fecha_reporte IS 'Campo que almacena la fecha y hora del reporte desde la App de Bienes Inmuebles.';


--
-- TOC entry 5455 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.estado_reporte; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.estado_reporte IS 'Almacena el estado de un reporte, con esto la aplicación cambia el icono sobre el predio, cuando el reporte ha sido resuleto.';


--
-- TOC entry 5456 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.radicado_orfeo; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.radicado_orfeo IS 'Este campo almacena información del número de radicado en Orfeo cuando se reporta un predio desde la App...';


--
-- TOC entry 5457 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.fecha_solicitud_restitucion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.fecha_solicitud_restitucion IS 'Este campo almacena la fecha en que se solicita iniciar el proceso de restitución';


--
-- TOC entry 5458 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.oficio_solicitud; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.oficio_solicitud IS 'Este campo almacena el Número de orfeo mediante el cual se solicitó la restitución.';


--
-- TOC entry 5459 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.fecha_inspeccion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.fecha_inspeccion IS 'Este campo almacena la fecha de inspección sobre el predio reportado.';


--
-- TOC entry 5460 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.inspeccion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.inspeccion IS 'Este campo almacena el nombre de la inspección que tiene a cargo la restitución...';


--
-- TOC entry 5461 (class 0 OID 0)
-- Dependencies: 305
-- Name: COLUMN reporte_predio.observacion_ciudadano; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN reporte_predio.observacion_ciudadano IS 'Almacena las observaciones que realiza un ciudadano al momento de realizar un reporte por invasión, fraude o encerramiento ilegal sobre un predio.';


SET default_with_oids = false;

--
-- TOC entry 306 (class 1259 OID 154730)
-- Name: restitucion; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE restitucion (
    id_r integer NOT NULL,
    predial_r_fk character varying(30),
    fecha_solicitud_r date,
    oficio_r character varying(30),
    fecha_inspeccion_r date,
    fecha_resti_r date,
    "observación_r" character varying(150)
);


ALTER TABLE restitucion OWNER TO sistemas;

--
-- TOC entry 5463 (class 0 OID 0)
-- Dependencies: 306
-- Name: TABLE restitucion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE restitucion IS 'Almacena información de cada proceso de restitución que se hace sobre algun predio.';


--
-- TOC entry 5464 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.id_r; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.id_r IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5465 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.predial_r_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.predial_r_fk IS 'Llave foránea que relaciona esta tabla con el número predial de la tabla prediomunicipio.';


--
-- TOC entry 5466 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.fecha_solicitud_r; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.fecha_solicitud_r IS 'Fecha de solicitud de la restitución.';


--
-- TOC entry 5467 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.oficio_r; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.oficio_r IS 'Número del oficio de solicitud de restitución.';


--
-- TOC entry 5468 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.fecha_inspeccion_r; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.fecha_inspeccion_r IS 'Fecha de inspección de la restitución.';


--
-- TOC entry 5469 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion.fecha_resti_r; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion.fecha_resti_r IS 'Fecha de la restitución.';


--
-- TOC entry 5470 (class 0 OID 0)
-- Dependencies: 306
-- Name: COLUMN restitucion."observación_r"; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN restitucion."observación_r" IS 'Observaciones sobre el proceso de restitución.';


--
-- TOC entry 307 (class 1259 OID 154733)
-- Name: rol; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE rol (
    id_rol_pk integer DEFAULT nextval(('public.rol_id_rol_pk_seq'::text)::regclass) NOT NULL,
    nombre_rol character varying(30) NOT NULL,
    descripcion_rol character varying(100),
    fecha_creacion_rol date,
    estado_rol_fk integer
);


ALTER TABLE rol OWNER TO sistemas;

--
-- TOC entry 5472 (class 0 OID 0)
-- Dependencies: 307
-- Name: TABLE rol; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE rol IS 'Almacena información de los diversos roles del sistema SIBICA.';


--
-- TOC entry 5473 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN rol.id_rol_pk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN rol.id_rol_pk IS 'Numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5474 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN rol.nombre_rol; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN rol.nombre_rol IS 'Nombre de un rol dentro del sistema.';


--
-- TOC entry 5475 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN rol.descripcion_rol; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN rol.descripcion_rol IS 'Descripción del rol';


--
-- TOC entry 5476 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN rol.fecha_creacion_rol; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN rol.fecha_creacion_rol IS 'Fecha en la que se crea el rol.';


--
-- TOC entry 5477 (class 0 OID 0)
-- Dependencies: 307
-- Name: COLUMN rol.estado_rol_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN rol.estado_rol_fk IS 'Llave foránea que relaciona esta tabla con la tabla estado, indica el estado que tiene un rol dentro del sistema SIBICA.';


--
-- TOC entry 375 (class 1259 OID 200290)
-- Name: rol_id_rol_pk_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE rol_id_rol_pk_seq
    START WITH 5
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE rol_id_rol_pk_seq OWNER TO sistemas;

--
-- TOC entry 391 (class 1259 OID 210156)
-- Name: seguimiento_tarea; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE seguimiento_tarea (
    id_seguimiento integer DEFAULT nextval(('public.seguimiento_tarea_id_seguimiento_seq'::text)::regclass) NOT NULL,
    tarea_st_fk integer,
    observacion character varying(1000),
    estado_st_fk integer,
    fecha_creacion date DEFAULT ('now'::text)::date
);


ALTER TABLE seguimiento_tarea OWNER TO sistemas;

--
-- TOC entry 5480 (class 0 OID 0)
-- Dependencies: 391
-- Name: COLUMN seguimiento_tarea.id_seguimiento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea.id_seguimiento IS 'Llave primaria de la tabla';


--
-- TOC entry 5481 (class 0 OID 0)
-- Dependencies: 391
-- Name: COLUMN seguimiento_tarea.tarea_st_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea.tarea_st_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla  tarea_panorama';


--
-- TOC entry 5482 (class 0 OID 0)
-- Dependencies: 391
-- Name: COLUMN seguimiento_tarea.observacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea.observacion IS 'Campo donde se descibe el seguimiento de la tarea';


--
-- TOC entry 5483 (class 0 OID 0)
-- Dependencies: 391
-- Name: COLUMN seguimiento_tarea.estado_st_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea.estado_st_fk IS 'Campo donde se guarda el estado en el que se encuentra la tarea cuando se hace el el seguimiento (foranea tabla estado)';


--
-- TOC entry 5484 (class 0 OID 0)
-- Dependencies: 391
-- Name: COLUMN seguimiento_tarea.fecha_creacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea.fecha_creacion IS 'Campo donde se guarda  la fecha en la que se crea el registro';


--
-- TOC entry 392 (class 1259 OID 210175)
-- Name: seguimiento_tarea_file; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE seguimiento_tarea_file (
    id_stf integer DEFAULT nextval(('public.seguimiento_tarea_file_id_stf_seq'::text)::regclass) NOT NULL,
    st_stf_fk integer NOT NULL,
    file_stf_fk integer NOT NULL,
    fecha_creacion date DEFAULT ('now'::text)::date
);


ALTER TABLE seguimiento_tarea_file OWNER TO sistemas;

--
-- TOC entry 5486 (class 0 OID 0)
-- Dependencies: 392
-- Name: COLUMN seguimiento_tarea_file.id_stf; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea_file.id_stf IS 'Llave primaria de la tabla';


--
-- TOC entry 5487 (class 0 OID 0)
-- Dependencies: 392
-- Name: COLUMN seguimiento_tarea_file.st_stf_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea_file.st_stf_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla seguimiento tarea';


--
-- TOC entry 5488 (class 0 OID 0)
-- Dependencies: 392
-- Name: COLUMN seguimiento_tarea_file.file_stf_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea_file.file_stf_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla file';


--
-- TOC entry 5489 (class 0 OID 0)
-- Dependencies: 392
-- Name: COLUMN seguimiento_tarea_file.fecha_creacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN seguimiento_tarea_file.fecha_creacion IS 'Campo donde se guarda  la fecha en la que se crea el registro';


--
-- TOC entry 397 (class 1259 OID 210978)
-- Name: seguimiento_tarea_file_id_stf_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE seguimiento_tarea_file_id_stf_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE seguimiento_tarea_file_id_stf_seq OWNER TO sistemas;

--
-- TOC entry 396 (class 1259 OID 210968)
-- Name: seguimiento_tarea_id_seguimiento_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE seguimiento_tarea_id_seguimiento_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE seguimiento_tarea_id_seguimiento_seq OWNER TO sistemas;

--
-- TOC entry 351 (class 1259 OID 196899)
-- Name: sepou; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW sepou AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.identifica_p AS predial, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.proyecto_p AS proyecto, prediomunicipio.codigounico_p AS codigounico, prediomunicipio.codigonal_p AS codigonal, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion, prediomunicipio.direccioncatastro_p AS direccioncatastro, prediomunicipio.mat_inmob_p AS mat_inmobiliaria, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.lind_norte_p AS lind_norte, prediomunicipio.lind_sur_p AS lind_sur, prediomunicipio.lind_este_p AS lind_este, prediomunicipio.lind_oeste_p AS lind_oeste, prediomunicipio.lind_adic_p AS lind_adic, dependencia.nombre_depen AS dependencia, prediomunicipio.nombrecomun_p, geo_predio_mc.the_geom FROM ((((((clase_inmueble clase_inmueble RIGHT JOIN prediomunicipio prediomunicipio ON ((clase_inmueble.id_clase = prediomunicipio.clase_inmueble_p))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.proyecto_p;


ALTER TABLE sepou OWNER TO sistemas;

--
-- TOC entry 5493 (class 0 OID 0)
-- Dependencies: 351
-- Name: VIEW sepou; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW sepou IS 'Se crea esta vista para dar acceso a la información geografica y alfanumerica con autorización de Margie Varela y de la Dra. Ximena Román, según Orfeo No. 201941320300005644 del 21/mar/2019, a la Subdirección de Espacio Público y Ordenamiento Urbanístico.';


--
-- TOC entry 308 (class 1259 OID 154736)
-- Name: servicio_publico; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE servicio_publico (
    id_sp integer DEFAULT nextval('id_serviciopubli'::regclass) NOT NULL,
    predial_sp character varying(30) NOT NULL,
    suscriptor_sp character varying(20) NOT NULL,
    medidor_acueducto_sp character varying(30) NOT NULL,
    medidor_energia_sp character varying(30)
);


ALTER TABLE servicio_publico OWNER TO sistemas;

--
-- TOC entry 5495 (class 0 OID 0)
-- Dependencies: 308
-- Name: TABLE servicio_publico; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE servicio_publico IS 'Esta tabla almacena información de los servicios publicos conectados a cada predio del municipio, incluye suscriptor y medidor';


--
-- TOC entry 5496 (class 0 OID 0)
-- Dependencies: 308
-- Name: COLUMN servicio_publico.id_sp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN servicio_publico.id_sp IS 'Número consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5497 (class 0 OID 0)
-- Dependencies: 308
-- Name: COLUMN servicio_publico.predial_sp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN servicio_publico.predial_sp IS 'Número predial de la construcciónasociada';


--
-- TOC entry 5498 (class 0 OID 0)
-- Dependencies: 308
-- Name: COLUMN servicio_publico.suscriptor_sp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN servicio_publico.suscriptor_sp IS 'Número de Suscriptor';


--
-- TOC entry 5499 (class 0 OID 0)
-- Dependencies: 308
-- Name: COLUMN servicio_publico.medidor_acueducto_sp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN servicio_publico.medidor_acueducto_sp IS 'Número que identifica a cada medidor de acueducto';


--
-- TOC entry 5500 (class 0 OID 0)
-- Dependencies: 308
-- Name: COLUMN servicio_publico.medidor_energia_sp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN servicio_publico.medidor_energia_sp IS 'Número que identifica cada medidor de energía electrica.';


--
-- TOC entry 224 (class 1259 OID 16747)
-- Name: spatial_ref_sys; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE spatial_ref_sys (
    srid integer NOT NULL,
    auth_name character varying(256),
    auth_srid integer,
    srtext character varying(2048),
    proj4text character varying(2048)
);


ALTER TABLE spatial_ref_sys OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 205326)
-- Name: sq_modulo_permiso; Type: SEQUENCE; Schema: public; Owner: sibica
--

CREATE SEQUENCE sq_modulo_permiso
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999999999999
    CACHE 1;


ALTER TABLE sq_modulo_permiso OWNER TO sibica;

--
-- TOC entry 382 (class 1259 OID 205328)
-- Name: sq_modulo_permiso_campo; Type: SEQUENCE; Schema: public; Owner: sibica
--

CREATE SEQUENCE sq_modulo_permiso_campo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999999999999
    CACHE 1;


ALTER TABLE sq_modulo_permiso_campo OWNER TO sibica;

--
-- TOC entry 309 (class 1259 OID 154739)
-- Name: subservicio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE subservicio (
    id_subs integer NOT NULL,
    nombre_subs character varying(30),
    tipo_servicio_subs integer
);


ALTER TABLE subservicio OWNER TO postgres;

--
-- TOC entry 5503 (class 0 OID 0)
-- Dependencies: 309
-- Name: TABLE subservicio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE subservicio IS 'Esta tabla almacena información del subservicio que tiene un tipo de servicio dentro de un predio, por ejemplo el tipo de servicio de Telecomunicaciones, tiene varios subservicios:  discado directo, bloqueo secreto, etc.';


--
-- TOC entry 5504 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN subservicio.id_subs; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN subservicio.id_subs IS 'Llave primaria que enumera de forma única y consecutiva cada registro de esta tabla';


--
-- TOC entry 5505 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN subservicio.nombre_subs; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN subservicio.nombre_subs IS 'Nombre del subservicio';


--
-- TOC entry 5506 (class 0 OID 0)
-- Dependencies: 309
-- Name: COLUMN subservicio.tipo_servicio_subs; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN subservicio.tipo_servicio_subs IS 'Llave foránea que relaciona esta tabla con la tabla tipo_servicio.';


--
-- TOC entry 369 (class 1259 OID 199308)
-- Name: tabla; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tabla (
    id_tbl_pk integer DEFAULT nextval(('public.tabla_id_tbl_pk_seq'::text)::regclass) NOT NULL,
    nombre_tbl character varying(40),
    descripcion_tbl character varying(200)
);


ALTER TABLE tabla OWNER TO sistemas;

--
-- TOC entry 5508 (class 0 OID 0)
-- Dependencies: 369
-- Name: TABLE tabla; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tabla IS 'Esta tabla almacena información de todas las tablas de la base de datos para establecer permisos de consulta a cada rol del sistema SIBICA.';


--
-- TOC entry 5509 (class 0 OID 0)
-- Dependencies: 369
-- Name: COLUMN tabla.id_tbl_pk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tabla.id_tbl_pk IS 'Llave primaria, numero consecutivo que identifica de forma única cada registro de esta tabla.';


--
-- TOC entry 5510 (class 0 OID 0)
-- Dependencies: 369
-- Name: COLUMN tabla.nombre_tbl; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tabla.nombre_tbl IS 'Nombre de la tabla de la Base de Datos del sistema SIBICA.';


--
-- TOC entry 5511 (class 0 OID 0)
-- Dependencies: 369
-- Name: COLUMN tabla.descripcion_tbl; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tabla.descripcion_tbl IS 'Alamacena la descripción de cada tabla de la base de Datos del sistema SIBICA.';


--
-- TOC entry 378 (class 1259 OID 203509)
-- Name: tabla_id_tbl_pk_seq; Type: SEQUENCE; Schema: public; Owner: sibica
--

CREATE SEQUENCE tabla_id_tbl_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE tabla_id_tbl_pk_seq OWNER TO sibica;

--
-- TOC entry 388 (class 1259 OID 210031)
-- Name: tarea_panorama; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tarea_panorama (
    id_tarea integer NOT NULL,
    panorama_tp_fk integer NOT NULL,
    titulo_tarea character varying(1000),
    descripcion_tarea character varying(4000),
    usuario_crea_tp_fk integer,
    usuario_responsable_tp_fk integer,
    clasificacion_tp_fk numeric,
    id_clasificacion integer,
    estado_tp_fk integer,
    fecha_creacion_tp date DEFAULT ('now'::text)::date,
    fecha_vence_tp date
);


ALTER TABLE tarea_panorama OWNER TO sistemas;

--
-- TOC entry 5513 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.id_tarea; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.id_tarea IS 'Llave primaria de la tabla';


--
-- TOC entry 5514 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.panorama_tp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.panorama_tp_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla  panorama_riesgo';


--
-- TOC entry 5515 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.titulo_tarea; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.titulo_tarea IS 'Campo para guardar un titulo frase referente a la tarea';


--
-- TOC entry 5516 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.descripcion_tarea; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.descripcion_tarea IS 'Campo donde se describe detalladamente en que consiste la tarea';


--
-- TOC entry 5517 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.usuario_crea_tp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.usuario_crea_tp_fk IS 'Campo donde se guarda el codigo del usuario que reporta la tarea (foranea tabla usuario)';


--
-- TOC entry 5518 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.usuario_responsable_tp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.usuario_responsable_tp_fk IS 'Campo donde se guarda el codigo del usuario responsable de la tarea (foranea tabla usuario)';


--
-- TOC entry 5519 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.clasificacion_tp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.clasificacion_tp_fk IS 'Campo donde guarda la calificacion del usuario al concluir la tarea';


--
-- TOC entry 5520 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.id_clasificacion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.id_clasificacion IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla clasificacion_panorama';


--
-- TOC entry 5521 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.estado_tp_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.estado_tp_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla estado';


--
-- TOC entry 5522 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.fecha_creacion_tp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.fecha_creacion_tp IS 'Campo donde se guarda  la fecha en la que se crea el registro';


--
-- TOC entry 5523 (class 0 OID 0)
-- Dependencies: 388
-- Name: COLUMN tarea_panorama.fecha_vence_tp; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tarea_panorama.fecha_vence_tp IS 'Campo donde se guarda la fecha limite para resolver la tarea';


--
-- TOC entry 361 (class 1259 OID 198549)
-- Name: terreno; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE terreno (
    id_p integer DEFAULT nextval('id_terreno'::regclass) NOT NULL,
    cedula_ppal_p character varying(2),
    id_catastro_p character varying(30),
    nupre_p character varying(6),
    dv_p character varying(1),
    codigonal_p character varying(30),
    codigounico_p character varying(30),
    identifica_p character varying(30) NOT NULL,
    id_proyecto_p integer,
    clase_inmueble_p integer,
    id_cb_fk integer,
    id_tb_fk integer,
    id_tu_fk integer,
    direccion_p character varying(90),
    direccioncatastro_p character varying(80),
    zona_p character varying(7),
    id_barrio character varying(254),
    pais_p character varying(3),
    ciudad_p character varying(4),
    lind_norte_p character varying(400),
    lind_sur_p character varying(400),
    lind_este_p character varying(400),
    lind_oeste_p character varying(400),
    lind_adic_p character varying(600),
    matricula_ppal_p character varying(2),
    mat_inmob_p character varying(25),
    id_madq_fk integer,
    nombre_areacedida_p character varying(90),
    nit_cede_fk integer,
    derecho_p double precision,
    afecta_pot_p character varying(2),
    asegurado_p character varying(2),
    suscep_vta_p character varying(2),
    id_depen_fk integer,
    nombrecomun_p character varying(100),
    area_cesion_p double precision,
    area_actual_p double precision,
    area_sicat_p double precision,
    area_terreno_p double precision,
    fecha_estudio_titulo_p date,
    num_activofijo_p character varying(20),
    codigo_zhg_p character varying(12),
    cuenta_terreno_p character varying(15),
    propietario_antes_p integer,
    actualiza_sap date,
    impto_predial_p character varying(20),
    id_shp_p character varying(30),
    fecha_levantamiento_p character varying(15),
    id_estado_fk integer,
    fecha_creacion_p date DEFAULT now(),
    fecha_modifica_p date,
    migracion_siga date,
    id_capa integer,
    doc_calidad_bien character varying(150),
    fecha_expedicion_cb_p date,
    orfeo_cb_p character varying(30),
    documento_p character varying(150),
    foto_p character varying(150),
    ubica_archivo_p character varying(60),
    mensaje_p character varying(120)
);


ALTER TABLE terreno OWNER TO sistemas;

--
-- TOC entry 5525 (class 0 OID 0)
-- Dependencies: 361
-- Name: TABLE terreno; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE terreno IS 'Almacena información del Bien Raíz (Bien Inmueble -Terreno) de PROPIEDAD DEL MUNICIPIO DE SANTIAGO DE CALI, DESTINADOS AL USO PÚBLICO O FISCAL';


--
-- TOC entry 5526 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_p IS 'Llave primaria que identifica de forma unica y consecutiva cada predio que se almacena en la Base de Datos';


--
-- TOC entry 5527 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.cedula_ppal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.cedula_ppal_p IS 'Indica si  la cédula catastral es la principal o no.
(CISA-SIGA)';


--
-- TOC entry 5528 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_catastro_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_catastro_p IS 'Código asignado al Bien Inmueble por la Oficina de Catastro Municipal';


--
-- TOC entry 5529 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.nupre_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.nupre_p IS 'Este campo almacena el número predial registral a implementarse para el catastro multipropósito, código de seis digitos en base 36';


--
-- TOC entry 5530 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.dv_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.dv_p IS 'campo que almacena el digito de verificación del nupre.';


--
-- TOC entry 5531 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.codigonal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.codigonal_p IS 'Número que identifica de forma única a cada predio a nivel nacional.';


--
-- TOC entry 5532 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.codigounico_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.codigounico_p IS 'Número que identifica de forma única a cada predio.';


--
-- TOC entry 5533 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.identifica_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.identifica_p IS 'Identificación o codigo propio del predio (registro catastral)';


--
-- TOC entry 5534 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_proyecto_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_proyecto_p IS 'Llave foranea para el control y asociación unica del predio con el proyecto urbanístico al que pertenece
';


--
-- TOC entry 5535 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.clase_inmueble_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.clase_inmueble_p IS 'Indica la Clase de Bien Inmueble respecto a si es Tereno, Terreno y Construcción, o Sometido al regimen de prop. horizontal.';


--
-- TOC entry 5536 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_cb_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_cb_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Calidad de Bien.';


--
-- TOC entry 5537 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_tb_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_tb_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Tipo de Bien.';


--
-- TOC entry 5538 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_tu_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_tu_fk IS 'Llave foránea que relaciona esta tabla con la tabla uso predio.';


--
-- TOC entry 5539 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.direccion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.direccion_p IS 'Dirección del predio';


--
-- TOC entry 5540 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.direccioncatastro_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.direccioncatastro_p IS 'Dirección del predio tal como aparece en catastro.';


--
-- TOC entry 5541 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.zona_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.zona_p IS 'Zona en la que está ubicado el predio: Urbana o Rural.';


--
-- TOC entry 5542 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_barrio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_barrio IS 'Llave foránea que relaciona esta tabla con la tabla Barrios. A través de la tabla barrios se puede saber la comuna y el estrato de un predio.';


--
-- TOC entry 5543 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.pais_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.pais_p IS 'Código segun el DANE del pais del Bien Inmueble.';


--
-- TOC entry 5544 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.ciudad_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.ciudad_p IS 'Código según el DANE de la Ciudad del Bien Inmueble.';


--
-- TOC entry 5545 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.lind_norte_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.lind_norte_p IS 'Limite norte del predio 
';


--
-- TOC entry 5546 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.lind_sur_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.lind_sur_p IS 'Limite sur del predio 
';


--
-- TOC entry 5547 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.lind_este_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.lind_este_p IS 'Limite este del predio 
';


--
-- TOC entry 5548 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.lind_oeste_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.lind_oeste_p IS 'Limite oeste del predio 
';


--
-- TOC entry 5549 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.lind_adic_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.lind_adic_p IS 'Describe los linderos adicionales que para algunos predios, figuren registrados en la escritura de cesión
';


--
-- TOC entry 5550 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.matricula_ppal_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.matricula_ppal_p IS 'Indica si la Matricula Inmobiliaria es la Principal o No.';


--
-- TOC entry 5551 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.mat_inmob_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.mat_inmob_p IS 'Numero de matricula inmobiliaria del predio. Número de registro, asignado al certificado de tradición, que  determina la propiedad de un bien inmueble y su situación jurídica 
';


--
-- TOC entry 5552 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_madq_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_madq_fk IS 'Llave foránea que relaciona esta tabla con la llave principal de la tabla Modo_adq (Modo de Adquisición del predio)';


--
-- TOC entry 5553 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.nombre_areacedida_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.nombre_areacedida_p IS 'Palabras designada por el urbanizador para referirse a cada una de las cesiones, con el fin de ser diferenciadas entre ellas.';


--
-- TOC entry 5554 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.nit_cede_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.nit_cede_fk IS 'Llave foránea que relaciona esta tabla con la tabla cedente, para identificar a la persona/entidad que cedió el predio.';


--
-- TOC entry 5555 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.derecho_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.derecho_p IS 'Porcentaje de propiedad que tiene el municipio sobre el predio.';


--
-- TOC entry 5556 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.afecta_pot_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.afecta_pot_p IS 'Indica si el Bien Inmueble tiene Afectaciones POT';


--
-- TOC entry 5557 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.asegurado_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.asegurado_p IS 'Indica si el Bien Inmueble esta Asegurado o No.';


--
-- TOC entry 5558 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.suscep_vta_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.suscep_vta_p IS 'Indica si el predio es susceptible para la venta.
';


--
-- TOC entry 5559 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_depen_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_depen_fk IS 'Llave foránea que relaciona esta tabla con la Tabla Dependencia.';


--
-- TOC entry 5560 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.nombrecomun_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.nombrecomun_p IS 'Nombre común del predio, tal como se le conoce entre los habitantes del sector o comunidad caleña.';


--
-- TOC entry 5561 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.area_cesion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.area_cesion_p IS 'Medida de superficie, que El urbanizador cedió como obligación urbanística y está consignada en la escritura y plano de  cesión del predio
';


--
-- TOC entry 5562 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.area_actual_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.area_actual_p IS 'Medida de superficie, obtenida a partir del levantamiento topográfico y los cálculos realizados, según composición actual del terreno
';


--
-- TOC entry 5563 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.area_sicat_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.area_sicat_p IS 'Área según catastro.';


--
-- TOC entry 5564 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.area_terreno_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.area_terreno_p IS 'Área total del terreno. Para cálculo del avalúo catastral componente terreno (excepto zonas verdes que No se avalúan).';


--
-- TOC entry 5565 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.fecha_estudio_titulo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.fecha_estudio_titulo_p IS 'Indica la fecha en la que se realizó el estudio jurídico al bien inmueble';


--
-- TOC entry 5566 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.num_activofijo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.num_activofijo_p IS 'Registro contable, que determina el alta de los bienes inmuebles en los Estados Financieros del Municipio.
';


--
-- TOC entry 5567 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.codigo_zhg_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.codigo_zhg_p IS 'Código zona geográfica.';


--
-- TOC entry 5568 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.cuenta_terreno_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.cuenta_terreno_p IS 'llave foránea que relaciona esta tabla con la tabla cuenta, indica el número de la cuenta del terreno (SAP)';


--
-- TOC entry 5569 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.propietario_antes_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.propietario_antes_p IS 'Indica el Nombre del Propietario anterior del Bien Inmueble.';


--
-- TOC entry 5570 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.actualiza_sap; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.actualiza_sap IS 'Este Campo almacena la fecha en la que el registro fue actualizado o creado en el sistema SAP.';


--
-- TOC entry 5571 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.impto_predial_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.impto_predial_p IS 'Indica el estado del Impuesto Predial del Bien Inmueble.';


--
-- TOC entry 5572 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_shp_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_shp_p IS 'Este campo relaciona esta tabla con la tabla geo_predio';


--
-- TOC entry 5573 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.fecha_levantamiento_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.fecha_levantamiento_p IS 'Fecha aproximada en la que se realiza el levantamiento Topográfico.';


--
-- TOC entry 5574 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_estado_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_estado_fk IS 'Llave foránea que relaciona esta tabla con la tabla estado.';


--
-- TOC entry 5575 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.fecha_creacion_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.fecha_creacion_p IS 'Este Campo almacena la fecha en que crea el registro';


--
-- TOC entry 5576 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.fecha_modifica_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.fecha_modifica_p IS 'Este campo almacena la ultima fecha en que se modifica el registro.';


--
-- TOC entry 5577 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.migracion_siga; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.migracion_siga IS 'Este campo almacena la fecha en que el registro fue reportado o cargado en el aplicativo SIGA (Sistema de Información y Gestión de Activos, CISA -Central de Inversiones S.A.)';


--
-- TOC entry 5578 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.id_capa; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.id_capa IS 'Llave foránea que relaciona esta tabla con la tabla Capa';


--
-- TOC entry 5579 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.doc_calidad_bien; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.doc_calidad_bien IS 'Este campo almacena la ruta donde está almacenado en el Servidor, el documento en pdf del último Concepto de Calidad del Bien.(Nuevo Formato aprobado MAJA01.03.03.18.P14.F02 y MAJA01.03.03.18.P14.F03 del 13 de Junio/2018)';


--
-- TOC entry 5580 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.fecha_expedicion_cb_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.fecha_expedicion_cb_p IS 'Almacena la fecha de expedición del documento "Respuesta Calidad del Bien"';


--
-- TOC entry 5581 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.orfeo_cb_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.orfeo_cb_p IS 'Este campo muestra el Número de Orfeo con el que se haya dado un Concepto de Calidad del Bien.';


--
-- TOC entry 5582 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.documento_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.documento_p IS 'Este campo almacena la ruta en el servidor, donde está guardado el expediente físico escaneado en formato PDF
';


--
-- TOC entry 5583 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.foto_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.foto_p IS 'Este campo almacena la ruta en el servidor, donde esta guardada la fotografía del bien inmueble.
';


--
-- TOC entry 5584 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.ubica_archivo_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.ubica_archivo_p IS 'Ubicación donde se encuentra guardado el expediente o carpetas dentro del archivo físico. (en el archivador)';


--
-- TOC entry 5585 (class 0 OID 0)
-- Dependencies: 361
-- Name: COLUMN terreno.mensaje_p; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN terreno.mensaje_p IS 'En este campo se almacenan algunos mensajes que se mostraran en el Geovisor de la IDESC';


--
-- TOC entry 310 (class 1259 OID 154742)
-- Name: tipo_amoblamiento; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_amoblamiento (
    id_ta integer DEFAULT nextval(('public.tipo_amoblamiento_id_ta_seq'::text)::regclass) NOT NULL,
    nombre_ta character varying(40) NOT NULL,
    icono_ta_fk integer,
    estado_ta_fk integer
);


ALTER TABLE tipo_amoblamiento OWNER TO sistemas;

--
-- TOC entry 5587 (class 0 OID 0)
-- Dependencies: 310
-- Name: TABLE tipo_amoblamiento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_amoblamiento IS 'Almacena información de la clase - tipo de  Amoblamientos (equipamientos) que son representados por puntos, poligonos y/o lineas,  tiene diferente naturaleza y función dentro del predio.
';


--
-- TOC entry 5588 (class 0 OID 0)
-- Dependencies: 310
-- Name: COLUMN tipo_amoblamiento.id_ta; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_amoblamiento.id_ta IS 'Llave primaria que identifica de forma unica y consecutiva cada tipo de Amoblamientos (equipamentos)';


--
-- TOC entry 5589 (class 0 OID 0)
-- Dependencies: 310
-- Name: COLUMN tipo_amoblamiento.nombre_ta; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_amoblamiento.nombre_ta IS 'Nombre del tipo de Amoblamientos (equipamentos) que puede tener un predio';


--
-- TOC entry 5590 (class 0 OID 0)
-- Dependencies: 310
-- Name: COLUMN tipo_amoblamiento.icono_ta_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_amoblamiento.icono_ta_fk IS 'Llave foránea que relaciona esta tabla con la tabla "file", se utiliza para almacenar la ruta al icono que se utiliza para la representación grafica de cada amoblamiento de un predio.';


--
-- TOC entry 5591 (class 0 OID 0)
-- Dependencies: 310
-- Name: COLUMN tipo_amoblamiento.estado_ta_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_amoblamiento.estado_ta_fk IS 'Llave foránea que relaciona esta tabla con la tabla "estado".';


--
-- TOC entry 398 (class 1259 OID 210984)
-- Name: tipo_amoblamiento_id_ta_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE tipo_amoblamiento_id_ta_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE tipo_amoblamiento_id_ta_seq OWNER TO sistemas;

--
-- TOC entry 389 (class 1259 OID 210109)
-- Name: tipo_reporte; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_reporte (
    id_tr integer DEFAULT nextval(('public.tipo_reporte_id_tr_seq'::text)::regclass) NOT NULL,
    nombre_tr character varying(1000),
    mensaje_tr text,
    estado_tr_fk integer
);


ALTER TABLE tipo_reporte OWNER TO sistemas;

--
-- TOC entry 5594 (class 0 OID 0)
-- Dependencies: 389
-- Name: COLUMN tipo_reporte.id_tr; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_reporte.id_tr IS 'Llave primaria de la tabla';


--
-- TOC entry 5595 (class 0 OID 0)
-- Dependencies: 389
-- Name: COLUMN tipo_reporte.nombre_tr; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_reporte.nombre_tr IS 'Campo donde se especifica el nombre del tipo reporte';


--
-- TOC entry 5596 (class 0 OID 0)
-- Dependencies: 389
-- Name: COLUMN tipo_reporte.mensaje_tr; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_reporte.mensaje_tr IS 'Campo donde de describen las condiciones para que se apliquea este tipo de reporte';


--
-- TOC entry 5597 (class 0 OID 0)
-- Dependencies: 389
-- Name: COLUMN tipo_reporte.estado_tr_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_reporte.estado_tr_fk IS 'Campo donde se guarda la llave foranea que hace referencia a la tabla estado';


--
-- TOC entry 399 (class 1259 OID 210986)
-- Name: tipo_reporte_id_tr_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE tipo_reporte_id_tr_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE tipo_reporte_id_tr_seq OWNER TO sistemas;

--
-- TOC entry 311 (class 1259 OID 154745)
-- Name: tipo_servicio; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE tipo_servicio (
    id_ts integer NOT NULL,
    nombre_ts character varying(20) NOT NULL
);


ALTER TABLE tipo_servicio OWNER TO sistemas;

--
-- TOC entry 5600 (class 0 OID 0)
-- Dependencies: 311
-- Name: TABLE tipo_servicio; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE tipo_servicio IS 'Almacena información del tipo de Servicio público activo en el Bien Inmueble
';


--
-- TOC entry 5601 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN tipo_servicio.id_ts; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_servicio.id_ts IS 'Llave primaria que identifica de forma unica y consecutiva cada tipo de servicio con el que puede contar un bien inmueble.';


--
-- TOC entry 5602 (class 0 OID 0)
-- Dependencies: 311
-- Name: COLUMN tipo_servicio.nombre_ts; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN tipo_servicio.nombre_ts IS 'Nombre del tipo de servicio que puede tener un bien inmueble';


--
-- TOC entry 368 (class 1259 OID 199273)
-- Name: user; Type: TABLE; Schema: public; Owner: sistemas; Tablespace: 
--

CREATE TABLE "user" (
    id_user_pk integer DEFAULT nextval(('public.user_id_user_pk_seq'::text)::regclass) NOT NULL,
    identificacion_user character varying(20),
    primer_nombre_user character varying(40),
    segundo_nombre_user character varying(20),
    primer_apellido_user character varying(40),
    segundo_apellido_user character varying(20),
    correo_user character varying(100),
    clave_user text,
    fecha_creacion_user date DEFAULT now(),
    estado_user_fk integer,
    rol_user_fk integer,
    dependencia_user_fk numeric,
    num_fails_sesion integer DEFAULT 0
);


ALTER TABLE "user" OWNER TO sistemas;

--
-- TOC entry 5604 (class 0 OID 0)
-- Dependencies: 368
-- Name: TABLE "user"; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON TABLE "user" IS 'se crea esta tabla para almacenar la información de los usuarios que se loguean en la app SIBICA de manera independiente al Directorio Activo.';


--
-- TOC entry 5605 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".id_user_pk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".id_user_pk IS 'Llave primaria, número consecutivo que identifica cada registro de esta tabla';


--
-- TOC entry 5606 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".identificacion_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".identificacion_user IS 'Número de identificación (cédula) del usuario.';


--
-- TOC entry 5607 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".primer_nombre_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".primer_nombre_user IS 'Primer nombre del usuario.';


--
-- TOC entry 5608 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".segundo_nombre_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".segundo_nombre_user IS 'Segundo nombre del usuario.';


--
-- TOC entry 5609 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".primer_apellido_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".primer_apellido_user IS 'Primer apellido del usuario';


--
-- TOC entry 5610 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".segundo_apellido_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".segundo_apellido_user IS 'Segundo apellido del usuario';


--
-- TOC entry 5611 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".correo_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".correo_user IS 'Correo institucional del usuario';


--
-- TOC entry 5612 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".clave_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".clave_user IS 'Contraseña con la que ingresa el usuario al sistema SIBICA.';


--
-- TOC entry 5613 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".fecha_creacion_user; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".fecha_creacion_user IS 'Fecha de creación del usuario.';


--
-- TOC entry 5614 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".estado_user_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".estado_user_fk IS 'Este campo almacena el estado que tiene el usuario dentro del sistema SIBICA.';


--
-- TOC entry 5615 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".rol_user_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".rol_user_fk IS 'Almacena los diferentes roles que se presentan dentro del sistema SIBICA.';


--
-- TOC entry 5616 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".dependencia_user_fk; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".dependencia_user_fk IS 'Dependencia de la Alcaldía a la que pertenece un usuario';


--
-- TOC entry 5617 (class 0 OID 0)
-- Dependencies: 368
-- Name: COLUMN "user".num_fails_sesion; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON COLUMN "user".num_fails_sesion IS 'Numero de veces que el usuario ha intentado ingresara al sistema, pero no ha podido';


--
-- TOC entry 374 (class 1259 OID 200264)
-- Name: user_id_user_pk_seq; Type: SEQUENCE; Schema: public; Owner: sistemas
--

CREATE SEQUENCE user_id_user_pk_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE user_id_user_pk_seq OWNER TO sistemas;

--
-- TOC entry 312 (class 1259 OID 154748)
-- Name: vw_app_externo; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_app_externo AS
SELECT geo_predio_mc.oid, st_astext(st_transform(geo_predio_mc.the_geom, 4326)) AS the_geom, prediomunicipio.mensaje_p, prediomunicipio.identifica_p, construccion.predial_edificacion_const, prediomunicipio.direccion_p, barrios.barrio, barrios.comuna, tipo_bien.nombre_tb, prediomunicipio.proyecto_p, prediomunicipio.nombre_areacedida_p, construccion.nombre_const, construccion.area_edifica_const, construccion.direccion_const, prediomunicipio.mat_inmob_p, prediomunicipio.area_cesion_p, prediomunicipio.nombrecomun_p, prediomunicipio.id_capa, prediomunicipio.url1 FROM ((((tipo_bien tipo_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((tipo_bien.id_tb = prediomunicipio.id_tb_fk))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY geo_predio_mc.oid;


ALTER TABLE vw_app_externo OWNER TO sistemas;

--
-- TOC entry 313 (class 1259 OID 154753)
-- Name: vw_app_geo_amoblamientos; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_app_geo_amoblamientos AS
SELECT DISTINCT amob.gid, amob.id_shp, st_astext(st_transform(amob.the_geom, 4326)) AS the_geom, amob.nombre_ta, amob.tipo FROM ((SELECT amob.gid, amob.id_shp, amob.the_geom, ta.nombre_ta, 'punto'::text AS tipo FROM (geo_amob_pto_mc amob JOIN tipo_amoblamiento ta ON ((ta.id_ta = amob.id_tipo))) UNION ALL SELECT amob.gid, amob.id_shp, amob.the_geom, ta.nombre_ta, 'linea'::text AS tipo FROM (geo_amob_li_mc amob JOIN tipo_amoblamiento ta ON ((ta.id_ta = amob.id_tipo)))) UNION ALL SELECT amob.gid, amob.id_shp, amob.the_geom, ta.nombre_ta, 'poligono'::text AS tipo FROM (geo_amob_pol_mc amob JOIN tipo_amoblamiento ta ON ((ta.id_ta = amob.id_tipo)))) amob ORDER BY amob.gid;


ALTER TABLE vw_app_geo_amoblamientos OWNER TO sistemas;

--
-- TOC entry 314 (class 1259 OID 154758)
-- Name: vw_app_geo_constr; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_app_geo_constr AS
SELECT geo_constr_mc.oid, st_astext(st_transform(geo_constr_mc.the_geom, 4326)) AS the_geom, geo_constr_mc.predial_const, capa.nombre_capa FROM (geo_constr_mc LEFT JOIN capa capa ON ((geo_constr_mc.id_tipo_const = capa.id_capa))) ORDER BY geo_constr_mc.oid;


ALTER TABLE vw_app_geo_constr OWNER TO sistemas;

--
-- TOC entry 5622 (class 0 OID 0)
-- Dependencies: 314
-- Name: VIEW vw_app_geo_constr; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW vw_app_geo_constr IS 'Se crea esta vista para conexión con APP SIBICA.
Se crea esta vista para dar acceso al grupo de Planeación Municipal (Planificación Territorial Escala General - Desarrollo Sostenible y Cambio Climático- Subdirección Planificación del Territorio, Oficio Orfeo No. 201741320500003884)';


--
-- TOC entry 363 (class 1259 OID 198817)
-- Name: vw_app_interno; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_app_interno AS
SELECT DISTINCT g.oid, g.gid, st_astext(st_transform(g.the_geom, 4326)) AS the_geom, g.id_shp, (prediomunicipio.id_catastro_p)::character varying(7) AS id_catastro_p, prediomunicipio.identifica_p, construccion.predial_edificacion_const, prediomunicipio.codigonal_p, prediomunicipio.num_activofijo_p, prediomunicipio.direccion_p, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.proyecto_p, prediomunicipio.nombre_areacedida_p, tercero.nombre_tcro AS cedente, prediomunicipio.mat_inmob_p, prediomunicipio.area_cesion_p, calidad_bien.nombre_cb, prediomunicipio.orfeo_cb_p, tipo_bien.nombre_tb, uso_predio.nombre_tu, modo_adq.nombre_madq, prediomunicipio.lind_norte_p, prediomunicipio.lind_sur_p, prediomunicipio.lind_este_p, prediomunicipio.lind_oeste_p, prediomunicipio.lind_adic_p, prediomunicipio.nombrecomun_p, estado_a.nombre_estado AS estado_predio, tipo_doc.nombre_tipod, documento.numero_doc, documento.fecha_doc, notaria.nombre_not, tipo_contrato.nombre_tc, contrato.numero_cont, contrato.area_entregada_cont, contrato.fecha_ini_cont, contrato.fecha_fin_cont, estado.nombre_estado AS estado_cto, contrato.lind_norte_cont, contrato.lind_sur_cont, contrato.lind_este_cont, contrato.lind_oeste_cont, contrato.lind_adic_cont, tercero_a.nombre_tcro AS tercero, construccion.nombre_const, construccion.numpisos_const, construccion.area_edifica_const, construccion.activofijo_const, dependencia.nombre_depen, digital.path_archivo_digi, digital.path_foto_digi, tipo_observacion.nombre_to, observacion.fecha_obs, observacion.observacion_obs, usuario.nombre_usu, usuario.apellido_usu, prediomunicipio.id_capa, prediomunicipio.url1, prediomunicipio.doc_calidad_bien AS url2, prediomunicipio.url3 FROM ((((((((((((((((((((((barrios RIGHT JOIN prediomunicipio prediomunicipio ON (((barrios.id_barrio)::text = (prediomunicipio.id_barrio)::text))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN calidad_bien calidad_bien ON ((prediomunicipio.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN geo_predio_mc g ON (((prediomunicipio.id_shp_p)::text = (g.id_shp)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN tercero tercero_a ON ((contrato.nit_entidad_cont = tercero_a.nit_tcro))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN digital digital ON (((prediomunicipio.identifica_p)::text = (digital.predial_digi_fk)::text))) LEFT JOIN estado estado_a ON ((prediomunicipio.id_estado_fk = estado_a.id_estado))) LEFT JOIN observacion observacion ON (((prediomunicipio.identifica_p)::text = (observacion.predial_obs_fk)::text))) LEFT JOIN tipo_observacion tipo_observacion ON ((observacion.tipo_ob = tipo_observacion.id_to))) LEFT JOIN usuario usuario ON (((observacion.id_usu_fk)::text = (usuario.id_usu)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN estado estado ON ((contrato.id_estado_fk = estado.id_estado))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY g.oid;


ALTER TABLE vw_app_interno OWNER TO sistemas;

--
-- TOC entry 330 (class 1259 OID 155465)
-- Name: vw_audita_avcatastral; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_audita_avcatastral AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.proyecto_p AS proyecto, prediomunicipio.direccion_p AS direccion, clase_inmueble.clase, prediomunicipio.identifica_p AS predial_terreno, avaluo_catastral.predial_terreno_avalc AS terreno_avaluo, avaluo_catastral.predial_construccion_avalc AS construccion_avaluo, avaluo_catastral.fecha_avalc AS fecha, avaluo_catastral.valor_terreno_avalc AS valor_catas_terreno, avaluo_catastral.valor_construccion_avalc AS valor_catas_contruccion, avaluo_catastral.valor_anexos_avalc AS valor_catas_anexos FROM ((prediomunicipio prediomunicipio FULL JOIN avaluo_catastral avaluo_catastral ON (((prediomunicipio.identifica_p)::text = (avaluo_catastral.predial_terreno_avalc)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_audita_avcatastral OWNER TO sistemas;

--
-- TOC entry 328 (class 1259 OID 155445)
-- Name: vw_audita_avcial; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_audita_avcial AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.proyecto_p AS proyecto, prediomunicipio.direccion_p AS direccion, clase_inmueble.clase, prediomunicipio.identifica_p AS predial_terreno, avaluo.predial_terreno_aval AS terreno_avaluo, avaluo.predial_construccion_aval AS construccion_avaluo, avaluo."año", avaluo.valor_cial_terreno_aval AS valor_cial_terreno, avaluo.valor_cial_contruccion_aval AS valor_cial_contruccion, avaluo.valor_cial_anexos_aval AS valor_cial_anexos FROM ((prediomunicipio prediomunicipio FULL JOIN avaluo avaluo ON (((prediomunicipio.identifica_p)::text = (avaluo.predial_terreno_aval)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_audita_avcial OWNER TO sistemas;

--
-- TOC entry 350 (class 1259 OID 196836)
-- Name: vw_cali_distrito; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_cali_distrito AS
SELECT prediomunicipio.identifica_p AS predial, prediomunicipio.proyecto_p AS nombre_proyecto, tipo_bien.nombre_tb AS tipo_bien, prediomunicipio.direccion_p AS direccion, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, prediomunicipio.area_cesion_p AS _area_cesion, geo_predio_mc.the_geom FROM ((((clase_inmueble clase_inmueble RIGHT JOIN prediomunicipio prediomunicipio ON ((clase_inmueble.id_clase = prediomunicipio.clase_inmueble_p))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.proyecto_p;


ALTER TABLE vw_cali_distrito OWNER TO sistemas;

--
-- TOC entry 353 (class 1259 OID 196927)
-- Name: vw_calis; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_calis AS
SELECT epg_nodo.id_nodo AS epg_nodo_id_nodo, epg_nodo.codigo_nodo AS epg_nodo_codigo_nodo, epg_nodo.nombre_nodo AS epg_nodo_nombre_nodo, epg_nodo.nivel_nodo AS epg_nodo_nivel_nodo, epg_nodo.padre_nodo AS epg_nodo_padre_nodo, epg_nivel_gestion.nombre_ng AS epg_nivel_gestion_nombre_ng, epg_ubicacion_nodo.predial_ubic AS epg_ubicacion_nodo_predial_ubic, epg_ubicacion_nodo.piso_ubic AS epg_ubicacion_nodo_piso_ubic, epg_geo_nodo.gid AS epg_geo_nodo_gid, epg_geo_nodo.the_geom AS epg_geo_nodo_the_geom, epg_geo_nodo.direccion AS epg_geo_nodo_direccion, epg_capa.id_capa_epg AS epg_capa_id_capa_epg, epg_capa.nombre_capa_epg AS epg_capa_nombre_capa_epg FROM ((((epg_nivel_gestion epg_nivel_gestion RIGHT JOIN epg_nodo epg_nodo ON ((epg_nivel_gestion.id_ng = epg_nodo.nivel_gestion))) LEFT JOIN epg_ubicacion_nodo epg_ubicacion_nodo ON (((epg_nodo.codigo_nodo)::text = (epg_ubicacion_nodo.cod_nodo_ubic)::text))) LEFT JOIN epg_geo_nodo epg_geo_nodo ON (((epg_ubicacion_nodo.predial_ubic)::text = (epg_geo_nodo.id_shp)::text))) LEFT JOIN epg_capa epg_capa ON ((epg_geo_nodo.capa_epg = epg_capa.id_capa_epg))) WHERE ((epg_nodo.codigo_nodo)::text ~~ '417340%'::text);


ALTER TABLE vw_calis OWNER TO sistemas;

--
-- TOC entry 315 (class 1259 OID 154767)
-- Name: vw_cargue_masivo_sap; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_cargue_masivo_sap AS
SELECT prediomunicipio.cuenta_terreno_p AS clase, 'MCAL' AS sociedad, tipo_bien.nombre_tb AS denominacion1, prediomunicipio.direccion_p AS denominacion2, prediomunicipio.identifica_p AS numero_inventario, 'MCAL' AS division, prediomunicipio.id_depen_fk AS centro_costo, uso_predio.nombre_tu AS situacion_actual, barrios.estra_moda AS estado_estra_af, prediomunicipio.zona_p AS cilindraje_bienes, departamento.cod_dep AS cod_departamento, '76001' AS codigo_municipio, '' AS destino_inversion, '893399011-3' AS supranumero_af, '' AS clave_agrupamiento, calidad_bien.nombre_cb AS indicador_propiedad, prediomunicipio.codigonal_p AS codigo_nal, documento.numero_doc AS titulo_adquisicion, documento.fecha_doc AS fecha_titulo, matricula.numero_mat AS certificado_tradiccion, matricula.fecha_mat AS fecha_registro, documento.id_not_fk AS "not", '76001' AS mun, '76' AS dpto, prediomunicipio.area_cesion_p AS area, 'M2' AS m2, prediomunicipio.nombrecomun_p AS nombre_comun, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.area_cesion_p AS area_terreno, prediomunicipio.area_actual_p AS area_actual FROM ((((((((((tipo_bien tipo_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((tipo_bien.id_tb = prediomunicipio.id_tb_fk))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN calidad_bien calidad_bien ON ((prediomunicipio.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) WHERE (((prediomunicipio.num_activofijo_p)::text ~~ '%SAP'::text) AND (prediomunicipio.id_estado_fk = 1));


ALTER TABLE vw_cargue_masivo_sap OWNER TO sistemas;

--
-- TOC entry 349 (class 1259 OID 196831)
-- Name: vw_catastro_terreno; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_catastro_terreno AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.cedula_ppal_p AS cedula_ppal, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.identifica_p AS predial_terreno, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.codigounico_p AS codigo_unico, prediomunicipio.codigonal_p AS codigo_nal, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion_oficial, prediomunicipio.direccioncatastro_p AS direccion_catastro, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, barrios.estra_moda AS estrato, prediomunicipio.pais_p AS pais, ciudad.nombre_ciu AS ciudad, prediomunicipio.afecta_pot_p AS afecta_pot, prediomunicipio.asegurado_p AS asegurado, prediomunicipio.matricula_ppal_p AS matricula_ppal, matricula.numero_mat AS matricula_inmob, matricula.fecha_mat, matricula.ciudad_mat, matricula.estado_juridico_mat, matricula.cantidad_gravamen_mat AS cantidad_gravamen, matricula.procontra_mat AS proceso_contra, matricula.otroprop_mat AS otro_propietario, matricula.tipoprop_mat AS tipo_propietario, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.lind_norte_p AS lindero_norte, prediomunicipio.lind_sur_p AS lindero_sur, prediomunicipio.lind_este_p AS lindero_este, prediomunicipio.lind_oeste_p AS lindero_oeste, prediomunicipio.lind_adic_p AS lindero_adicional, prediomunicipio.suscep_vta_p AS susceptible_venta, dependencia.nombre_depen AS dependencia, tipo_doc.nombre_tipod AS tipo_documento, documento.numero_doc AS numero_documento, documento.fecha_doc AS fecha_documento, oficina_expedicion_doc.nombre_oficina AS oficina_expedicion, documento.id_not_fk AS notaria, documento.ciudad_doc, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.ubica_archivo_p AS ubica_archivo, prediomunicipio.derecho_p AS derecho, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, tercero.nombre_tcro AS cedente, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicat, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.num_activofijo_p AS activo_fijo, prediomunicipio.codigo_zhg_p AS codigo_zhg, prediomunicipio.cuenta_terreno_p AS cuenta_terreno, prediomunicipio.nombre_cuenta_p AS nombre_cuenta, tercero_a.nombre_tcro AS propietario_anterior, prediomunicipio.impto_predial_p AS impuesto_predial, estado.nombre_estado AS estado, prediomunicipio.fecha_estudio_titulo_p AS fecha_estudio_titulo, prediomunicipio.fecha_creacion_p AS fecha_actualizacion, prediomunicipio.actualiza_sap AS fecha_actualiza_sap, tipo_observacion.nombre_to AS tipo_observacion, observacion.fecha_obs AS fecha_observacion, observacion.observacion_obs AS observacion, (((usuario.nombre_usu)::text || ' '::text) || (usuario.apellido_usu)::text) AS observador, capa.nombre_capa AS capa_idesc, geo_predio_mc.the_geom AS geografia_the_geom FROM (((((((((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN tercero tercero_a ON ((prediomunicipio.propietario_antes_p = tercero_a.nit_tcro))) LEFT JOIN capa capa ON ((prediomunicipio.id_capa = capa.id_capa))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) LEFT JOIN observacion observacion ON (((prediomunicipio.identifica_p)::text = (observacion.predial_obs_fk)::text))) LEFT JOIN tipo_observacion tipo_observacion ON ((observacion.tipo_ob = tipo_observacion.id_to))) LEFT JOIN usuario usuario ON (((observacion.id_usu_fk)::text = (usuario.id_usu)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN estado estado ON ((prediomunicipio.id_estado_fk = estado.id_estado))) WHERE ((prediomunicipio.id_estado_fk = 1) OR (prediomunicipio.id_estado_fk = 2)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_catastro_terreno OWNER TO sistemas;

--
-- TOC entry 334 (class 1259 OID 189127)
-- Name: vw_dapm_equipamentos; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_dapm_equipamentos AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.identifica_p AS predial_terreno, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.codigonal_p AS codigo_nacional, calidad_bien.nombre_cb AS calidad_bien, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.mat_inmob_p AS mat_inmobiliaria, dependencia.nombre_depen AS dependencia, construccion.predial_edificacion_const AS predial_edificacion, construccion.codigonal_const AS codigonal_edificacion, construccion.direccion_const AS direccion_edificacion, construccion.nombre_const AS nombre_edificacion, construccion.numpisos_const AS numero_pisos, construccion.ano_const AS ano_construccion, construccion.sismoresiste_const AS sismoresiste, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual_terreno, construccion.area_edifica_const AS area_edificacion, construccion.area_anexos_const AS area_anexos_edifi, construccion.mat_inmob_const AS mat_inmobiliaria_edifi FROM ((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) RIGHT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) RIGHT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) RIGHT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) RIGHT JOIN calidad_bien calidad_bien_a ON ((prediomunicipio.id_cb_fk = calidad_bien_a.id_cb))) RIGHT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) RIGHT JOIN tipo_bien tipo_bien_a ON ((prediomunicipio.id_tb_fk = tipo_bien_a.id_tb))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_dapm_equipamentos OWNER TO sistemas;

--
-- TOC entry 5629 (class 0 OID 0)
-- Dependencies: 334
-- Name: VIEW vw_dapm_equipamentos; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW vw_dapm_equipamentos IS 'Se crea esta vista para dar acceso al DAPM a consultar predios propiedad del municipio, proyecto Regularización de Equipamentos (ver correo Dr. Alejandro)';


--
-- TOC entry 316 (class 1259 OID 154787)
-- Name: vw_dapm_pot; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_dapm_pot AS
SELECT geo_predio_mc.oid, geo_predio_mc.gid, geo_predio_mc.the_geom, geo_predio_mc.id_shp, prediomunicipio.identifica_p AS num_predial, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.codigonal_p AS cod_nacional, prediomunicipio.direccion_p AS direccion, barrios.barrio, barrios.comuna, tipo_bien.nombre_tb AS tipo_bien_nombre_tb, tipo_doc.nombre_tipod AS tipo_doc, documento.numero_doc, documento.fecha_doc, notaria.nombre_not AS notaria, prediomunicipio.id_estado_fk AS estado FROM (((((((geo_predio_mc geo_predio_mc RIGHT JOIN prediomunicipio prediomunicipio ON (((geo_predio_mc.id_shp)::text = (prediomunicipio.id_shp_p)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) WHERE ((prediomunicipio.id_tb_fk = 3) AND (prediomunicipio.id_estado_fk = 1)) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_dapm_pot OWNER TO sistemas;

--
-- TOC entry 317 (class 1259 OID 154792)
-- Name: vw_dapm_pot2; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_dapm_pot2 AS
SELECT geo_predio_mc.oid, geo_predio_mc.gid, geo_predio_mc.the_geom, geo_predio_mc.id_shp, prediomunicipio.identifica_p AS num_predial, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.codigonal_p AS cod_nacional, prediomunicipio.direccion_p AS direccion, barrios.barrio, barrios.comuna, tipo_bien.nombre_tb AS tipo_bien, prediomunicipio.id_estado_fk AS estado FROM (((geo_predio_mc geo_predio_mc RIGHT JOIN prediomunicipio prediomunicipio ON (((geo_predio_mc.id_shp)::text = (prediomunicipio.id_shp_p)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) WHERE ((prediomunicipio.id_tb_fk = 3) AND (prediomunicipio.id_estado_fk = 1)) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_dapm_pot2 OWNER TO sistemas;

--
-- TOC entry 356 (class 1259 OID 197097)
-- Name: vw_datosabiertos_construccion; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_datosabiertos_construccion AS
SELECT construccion.predialterreno_const_fk AS predial_terreno, construccion.predial_edificacion_const AS predial_construccion, construccion.codigonal_const AS codigo_ncional_construccion, construccion.direccion_const AS direccion_construccion, construccion.nombre_const AS nombre_construccion, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, dependencia.nombre_depen AS organismo_construccion, construccion.derecho_c AS porcentaje_propiedad, construccion.ano_const AS anio_edificacion, construccion.sismoresiste_const AS sismoresiste, construccion.area_edifica_const AS area_edificada, construccion.area_anexos_const AS area_anexos, capa.nombre_capa AS nombre_capa_visualizacion FROM ((((capa capa RIGHT JOIN construccion construccion ON ((capa.id_capa = construccion.id_capa_const))) LEFT JOIN tipo_bien tipo_bien ON ((construccion.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((construccion.id_tu_fk = uso_predio.id_tu))) LEFT JOIN dependencia dependencia ON ((construccion.id_depen_fk = dependencia.id_depen))) ORDER BY construccion.nombre_const;


ALTER TABLE vw_datosabiertos_construccion OWNER TO sistemas;

--
-- TOC entry 357 (class 1259 OID 197102)
-- Name: vw_datosabiertos_documento; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_datosabiertos_documento AS
SELECT prediomunicipio.identifica_p AS predial, prediomunicipio.codigonal_p AS codigo_nacional, prediomunicipio.direccion_p AS direccion_terreno, tipo_doc.nombre_tipod AS tipo_documento, documento.numero_doc AS numero_documento, documento.fecha_doc AS fecha_documento, oficina_expedicion_doc.nombre_oficina AS oficina_expedicion, documento.id_not_fk AS notaria, ciudad.nombre_ciu AS ciudad_documento FROM (((((documento documento RIGHT JOIN documento_predio documento_predio ON (((documento.numero_doc)::text = (documento_predio.id_doc)::text))) RIGHT JOIN prediomunicipio prediomunicipio ON (((documento_predio.predial_p)::text = (prediomunicipio.identifica_p)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad ON (((documento.ciudad_doc)::text = (ciudad.cod_ciu)::text))) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_datosabiertos_documento OWNER TO sistemas;

--
-- TOC entry 358 (class 1259 OID 197244)
-- Name: vw_datosabiertos_reportepredio; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_datosabiertos_reportepredio AS
SELECT reporte_predio.predial, prediomunicipio.codigonal_p, reporte_predio.tipo_reporte, reporte_predio.fecha_reporte, reporte_predio.direccion_predio_reporte, reporte_predio.estado_reporte, reporte_predio.radicado_orfeo, reporte_predio.observacion FROM (reporte_predio LEFT JOIN prediomunicipio ON (((reporte_predio.predial)::text = (prediomunicipio.identifica_p)::text)));


ALTER TABLE vw_datosabiertos_reportepredio OWNER TO sistemas;

--
-- TOC entry 355 (class 1259 OID 197087)
-- Name: vw_datosabiertos_terreno; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_datosabiertos_terreno AS
SELECT prediomunicipio.identifica_p AS predial, prediomunicipio.codigonal_p AS codigo_nacional, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.proyecto_p AS nombre_proyecto, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion, prediomunicipio.zona_p AS zona, barrios.id_barrio AS codigo_barrio, barrios.barrio AS nombre_barrio, barrios.comuna, 'COLOMBIA'::text AS pais, ciudad.nombre_ciu AS ciudad, prediomunicipio.asegurado_p AS asegurado, prediomunicipio.suscep_vta_p AS susceptible_venta, dependencia.nombre_depen AS organismo, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, geo_predio_mc.the_geom AS geografia, prediomunicipio.fecha_levantamiento_p AS pfecha_levantamiento FROM ((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_datosabiertos_terreno OWNER TO sistemas;

--
-- TOC entry 337 (class 1259 OID 190150)
-- Name: vw_epg_abuelo_padre_hijo; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_epg_abuelo_padre_hijo AS
SELECT epg_nodo.id_nodo AS registro, epg_nodo.codigo_nodo AS codigo_organismo_a, epg_nodo.nombre_nodo AS nombre_organismo_a, epg_nodo.nivel_nodo AS nivel_organismo_a, epg_nodo_a.codigo_nodo AS codigo_organismo_b, epg_nodo_a.nombre_nodo AS nombre_organismo_b, epg_nodo_a.nivel_nodo AS nivel_organismo_b, epg_nodo_b.codigo_nodo AS codigo_organismo_c, epg_nodo_b.nombre_nodo AS nombre_organismo_c, epg_nodo_b.nivel_nodo AS nivel_organismo_c, epg_nodo_c.codigo_nodo AS codigo_organismo_d, epg_nodo_c.nombre_nodo AS nombre_organismo_d, epg_nodo_c.nivel_nodo AS nivel_organismo_d FROM (((epg_nodo epg_nodo LEFT JOIN epg_nodo epg_nodo_a ON (((epg_nodo.codigo_nodo)::text = (epg_nodo_a.padre_nodo)::text))) LEFT JOIN epg_nodo epg_nodo_b ON (((epg_nodo_a.codigo_nodo)::text = (epg_nodo_b.padre_nodo)::text))) LEFT JOIN epg_nodo epg_nodo_c ON (((epg_nodo_b.codigo_nodo)::text = (epg_nodo_c.padre_nodo)::text))) WHERE ((epg_nodo.codigo_nodo)::text = '4143'::text);


ALTER TABLE vw_epg_abuelo_padre_hijo OWNER TO sistemas;

--
-- TOC entry 318 (class 1259 OID 154797)
-- Name: vw_epg_ubicacion; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_epg_ubicacion AS
SELECT epg_ubicacion_nodo.oid, epg_geo_nodo.gid, epg_geo_nodo.the_geom, epg_nodo.id_nodo, epg_nodo.codigo_nodo, epg_nodo.nombre_nodo, epg_nodo.nivel_nodo, epg_nodo.padre_nodo, epg_nivel_gestion.id_ng AS id_nivel_gestion, epg_nivel_gestion.nombre_ng AS nivel_gestion, epg_ubicacion_nodo.predial_ubic, epg_ubicacion_nodo.piso_ubic, epg_geo_nodo.direccion, epg_capa.id_capa_epg AS capa_id, epg_capa.nombre_capa_epg AS nombre_capa FROM ((((epg_nivel_gestion epg_nivel_gestion RIGHT JOIN epg_nodo epg_nodo ON ((epg_nivel_gestion.id_ng = epg_nodo.nivel_gestion))) LEFT JOIN epg_ubicacion_nodo epg_ubicacion_nodo ON (((epg_nodo.codigo_nodo)::text = (epg_ubicacion_nodo.cod_nodo_ubic)::text))) LEFT JOIN epg_geo_nodo epg_geo_nodo ON (((epg_ubicacion_nodo.predial_ubic)::text = (epg_geo_nodo.id_shp)::text))) LEFT JOIN epg_capa epg_capa ON ((epg_geo_nodo.capa_epg = epg_capa.id_capa_epg))) ORDER BY epg_nodo.codigo_nodo;


ALTER TABLE vw_epg_ubicacion OWNER TO sistemas;

--
-- TOC entry 319 (class 1259 OID 154802)
-- Name: vw_geo_construccion; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_geo_construccion AS
SELECT geo_constr_mc.oid, geo_constr_mc.the_geom, geo_constr_mc.predial_const, capa.nombre_capa FROM (geo_constr_mc LEFT JOIN capa capa ON ((geo_constr_mc.id_tipo_const = capa.id_capa))) ORDER BY geo_constr_mc.oid;


ALTER TABLE vw_geo_construccion OWNER TO sistemas;

--
-- TOC entry 320 (class 1259 OID 154806)
-- Name: vw_geo_predio_externo_mc; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vw_geo_predio_externo_mc AS
SELECT geo_predio_mc.oid, geo_predio_mc.the_geom, prediomunicipio.mensaje_p, prediomunicipio.identifica_p, construccion.predial_edificacion_const, prediomunicipio.direccion_p, tipo_bien.nombre_tb, prediomunicipio.proyecto_p, prediomunicipio.nombre_areacedida_p, construccion.nombre_const, construccion.area_edifica_const, construccion.direccion_const, prediomunicipio.mat_inmob_p, prediomunicipio.area_cesion_p, prediomunicipio.nombrecomun_p, prediomunicipio.id_capa, prediomunicipio.url1 FROM (((tipo_bien tipo_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((tipo_bien.id_tb = prediomunicipio.id_tb_fk))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY geo_predio_mc.oid;


ALTER TABLE vw_geo_predio_externo_mc OWNER TO postgres;

--
-- TOC entry 348 (class 1259 OID 196824)
-- Name: vw_geo_predio_interno_mc; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_geo_predio_interno_mc AS
SELECT g.oid, g.gid, g.the_geom, g.id_shp, (prediomunicipio.id_catastro_p)::character varying(7) AS id_catastro_p, prediomunicipio.identifica_p, construccion.predial_edificacion_const, prediomunicipio.codigonal_p, prediomunicipio.num_activofijo_p, prediomunicipio.direccion_p, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.proyecto_p, prediomunicipio.nombre_areacedida_p, tercero.nombre_tcro AS cedente, prediomunicipio.mat_inmob_p, prediomunicipio.area_cesion_p, calidad_bien.nombre_cb, prediomunicipio.orfeo_cb_p, tipo_bien.nombre_tb, uso_predio.nombre_tu, modo_adq.nombre_madq, prediomunicipio.lind_norte_p, prediomunicipio.lind_sur_p, prediomunicipio.lind_este_p, prediomunicipio.lind_oeste_p, prediomunicipio.lind_adic_p, prediomunicipio.nombrecomun_p, estado_a.nombre_estado AS estado_predio, tipo_doc.nombre_tipod, documento.numero_doc, documento.fecha_doc, notaria.nombre_not, tipo_contrato.nombre_tc, contrato.numero_cont, contrato.area_entregada_cont, contrato.fecha_ini_cont, contrato.fecha_fin_cont, estado.nombre_estado AS estado_cto, contrato.lind_norte_cont, contrato.lind_sur_cont, contrato.lind_este_cont, contrato.lind_oeste_cont, contrato.lind_adic_cont, tercero_a.nombre_tcro AS tercero, construccion.nombre_const, construccion.numpisos_const, construccion.area_edifica_const, construccion.activofijo_const, dependencia.nombre_depen, digital.path_archivo_digi, digital.path_foto_digi, tipo_observacion.nombre_to, observacion.fecha_obs, observacion.observacion_obs, usuario.nombre_usu, usuario.apellido_usu, prediomunicipio.id_capa, prediomunicipio.url1, prediomunicipio.doc_calidad_bien AS url2, prediomunicipio.url3 FROM ((((((((((((((((((((((barrios RIGHT JOIN prediomunicipio prediomunicipio ON (((barrios.id_barrio)::text = (prediomunicipio.id_barrio)::text))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN calidad_bien calidad_bien ON ((prediomunicipio.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN geo_predio_mc g ON (((prediomunicipio.id_shp_p)::text = (g.id_shp)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN tercero tercero_a ON ((contrato.nit_entidad_cont = tercero_a.nit_tcro))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN digital digital ON (((prediomunicipio.identifica_p)::text = (digital.predial_digi_fk)::text))) LEFT JOIN estado estado_a ON ((prediomunicipio.id_estado_fk = estado_a.id_estado))) LEFT JOIN observacion observacion ON (((prediomunicipio.identifica_p)::text = (observacion.predial_obs_fk)::text))) LEFT JOIN tipo_observacion tipo_observacion ON ((observacion.tipo_ob = tipo_observacion.id_to))) LEFT JOIN usuario usuario ON (((observacion.id_usu_fk)::text = (usuario.id_usu)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN estado estado ON ((contrato.id_estado_fk = estado.id_estado))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY g.oid;


ALTER TABLE vw_geo_predio_interno_mc OWNER TO sistemas;

--
-- TOC entry 336 (class 1259 OID 189507)
-- Name: vw_ok_construcciones; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_ok_construcciones AS
SELECT construccion.id_const AS registro, prediomunicipio.identifica_p AS predial_terreno, construccion.predial_edificacion_const AS predial_construccion, prediomunicipio.direccion_p AS direccion_terreno, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, prediomunicipio.mat_inmob_p AS matricula_inmob, prediomunicipio.nombrecomun_p AS nombre_comun, calidad_bien.nombre_cb AS calidad_bien, tipo_bien.nombre_tb AS tipo_bien, construccion.nombre_const AS nombre_construccion, construccion.numpisos_const AS numero_pisos, construccion.area_edifica_const AS area_edificada, construccion.activofijo_const AS activo_fijo_const, construccion.numconstruccion_const AS numero_construcciones, construccion.direccion_const AS direccion_construccion, barrios.barrio, barrios.comuna, construccion.codigounico_const, construccion.codigonal_const, construccion.gid AS geografia, capa.nombre_capa AS capa_idesc, tipo_contrato.nombre_tc AS tipo_contrato_nombre_tc, contrato.numero_cont AS numero_contrato, contrato.area_entregada_cont, contrato.fecha_ini_cont, contrato.fecha_fin_cont, estado.nombre_estado AS estado_contrato, contrato.lind_norte_cont, contrato.lind_sur_cont, contrato.lind_este_cont, contrato.lind_oeste_cont, contrato.lind_adic_cont, tercero.nit_tcro AS nit_tercero, tercero.nombre_tcro AS nombre_tercero, (((usuario.nombre_usu)::text || ' '::text) || (usuario.apellido_usu)::text) AS encargado_contrato FROM ((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) RIGHT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN contrato contrato ON ((construccion.id_const = contrato.id_const_fk))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN tercero tercero ON ((contrato.nit_entidad_cont = tercero.nit_tcro))) LEFT JOIN usuario usuario ON (((contrato.idusu_cont_fk)::text = (usuario.id_usu)::text))) LEFT JOIN estado estado ON ((contrato.id_estado_fk = estado.id_estado))) LEFT JOIN capa capa ON ((construccion.id_capa_const = capa.id_capa))) ORDER BY construccion.id_const;


ALTER TABLE vw_ok_construcciones OWNER TO sistemas;

--
-- TOC entry 346 (class 1259 OID 196099)
-- Name: vw_ok_subidos; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_ok_subidos AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.identifica_p AS predial, prediomunicipio.proyecto_p AS proyecto, prediomunicipio.codigounico_p AS codigo_unico, prediomunicipio.codigonal_p AS codigo_nal, calidad_bien.nombre_cb AS calidad_bien, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS tipo_uso, prediomunicipio.direccion_p AS direccion_oficial, prediomunicipio.direccioncatastro_p AS direccion_catastral, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, barrios.estra_moda AS estrato, prediomunicipio.mat_inmob_p AS matricula_inmob, modo_adq.nombre_madq AS modo_adqui, prediomunicipio.lind_norte_p AS lindero_norte, prediomunicipio.lind_sur_p AS lindero_sur, prediomunicipio.lind_este_p AS lindero_este, prediomunicipio.lind_oeste_p AS lindero_oeste, prediomunicipio.lind_adic_p AS lindero_adic, prediomunicipio.suscep_vta_p AS susceptible_vta, dependencia.nombre_depen AS dependencia, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.id_shp_p AS geografia, prediomunicipio.ubica_archivo_p AS ubica_archivo, prediomunicipio.derecho_p AS propiedad, tipo_doc.nombre_tipod AS tipo_documento, documento.numero_doc AS numero_documento, documento.fecha_doc AS fecha_documento, notaria.nombre_not AS notaria, tipo_observacion.nombre_to AS tipo_observacion, observacion.observacion_obs AS observacion, (((usuario_a.nombre_usu)::text || ' '::text) || (usuario_a.apellido_usu)::text) AS observador, observacion.fecha_obs AS fecha_observador, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, tercero_a.nombre_tcro AS cedente, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicat, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.num_activofijo_p AS activo_fijo, prediomunicipio.codigo_zhg_p AS codigo_zhg, tipo_contrato.nombre_tc AS tipo_contrato, contrato.area_entregada_cont AS area_entregada, contrato.numero_cont AS numero_contrato, tercero.nombre_tcro AS tercero_contr, contrato.fecha_ini_cont AS fecha_inicial, contrato.fecha_fin_cont AS fecha_final, estado.nombre_estado AS estado_contr, (((usuario.nombre_usu)::text || ' 

'::text) || (usuario.apellido_usu)::text) AS encargado, contrato.lind_norte_cont AS lind_norte, contrato.lind_sur_cont AS lind_sur, contrato.lind_este_cont AS lind_este, contrato.lind_oeste_cont AS lind_oeste, contrato.lind_adic_cont AS lind_adic, construccion.nombre_const AS construccion, construccion.numpisos_const AS numero_pisos, prediomunicipio.fecha_levantamiento_p AS fecha_levantamiento, restitucion.fecha_solicitud_r AS fecha_solicitud_rest, restitucion.oficio_r AS oficio_rest, restitucion.fecha_inspeccion_r AS fecha_inspeccion, restitucion.fecha_resti_r AS fecha_rest, restitucion."observación_r" AS observacion_rest, estado_a.nombre_estado AS estado_predio, prediomunicipio.fecha_creacion_p AS fecha_actualizacion, prediomunicipio.actualiza_sap AS fecha_actualiza_sap, capa.nombre_capa AS capa_idesc FROM (((((((((((((((((((((((barrios barrios RIGHT JOIN prediomunicipio prediomunicipio ON (((barrios.id_barrio)::text = (prediomunicipio.id_barrio)::text))) LEFT JOIN calidad_bien calidad_bien ON ((prediomunicipio.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN capa capa ON ((prediomunicipio.id_capa = capa.id_capa))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN estado estado_a ON ((prediomunicipio.id_estado_fk = estado_a.id_estado))) LEFT JOIN tercero tercero_a ON ((prediomunicipio.nit_cede_fk = tercero_a.nit_tcro))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN observacion observacion ON (((prediomunicipio.identifica_p)::text = (observacion.predial_obs_fk)::text))) LEFT JOIN restitucion restitucion ON (((prediomunicipio.identifica_p)::text = (restitucion.predial_r_fk)::text))) LEFT JOIN tipo_observacion tipo_observacion ON ((observacion.tipo_ob = tipo_observacion.id_to))) LEFT JOIN usuario usuario_a ON (((observacion.id_usu_fk)::text = (usuario_a.id_usu)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN tercero tercero ON ((contrato.nit_entidad_cont = tercero.nit_tcro))) LEFT JOIN usuario usuario ON (((contrato.idusu_cont_fk)::text = (usuario.id_usu)::text))) LEFT JOIN construccion construccion ON ((contrato.id_const_fk = construccion.id_const))) LEFT JOIN estado estado ON ((contrato.id_estado_fk = estado.id_estado))) WHERE (prediomunicipio.id_estado_fk = 1) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_ok_subidos OWNER TO sistemas;

--
-- TOC entry 400 (class 1259 OID 281303)
-- Name: vw_predio; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_predio AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.cedula_ppal_p AS cedula_ppal, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.identifica_p AS predial, prediomunicipio.proyecto_p AS proyecto_urbanistico, prediomunicipio.codigounico_p AS codigo_unico, prediomunicipio.codigonal_p AS codigo_nal, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predi, prediomunicipio.direccion_p AS direccion, barrios.barrio, barrios.comuna, barrios.estra_moda AS estrato, prediomunicipio.afecta_pot_p AS afecta_pot, prediomunicipio.matricula_ppal_p AS matricula_ppal, matricula.numero_mat AS matricula_numero, matricula.fecha_mat AS fecha_matricula, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.lind_norte_p AS lind_norte, prediomunicipio.lind_sur_p AS lind_sur, prediomunicipio.lind_este_p AS lind_este, prediomunicipio.lind_oeste_p AS lind_oeste, prediomunicipio.lind_adic_p AS lind_adic, prediomunicipio.suscep_vta_p AS suscep_vta, dependencia.nombre_depen AS dependencia, prediomunicipio.nombrecomun_p AS nombrecomun, prediomunicipio.derecho_p AS derecho, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, tercero.nombre_tcro AS tercero, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicat, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.num_activofijo_p AS num_activofijo, estado.nombre_estado AS estado, prediomunicipio.fecha_estudio_titulo_p AS fecha_estudio_titulo, prediomunicipio.fecha_creacion_p AS fecha_creacion, prediomunicipio.actualiza_sap, prediomunicipio.doc_calidad_bien, prediomunicipio.migracion_siga, prediomunicipio.fecha_modifica_p AS fecha_modifica, geo_predio_mc.gid, geo_predio_mc.the_geom FROM (((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN estado estado ON ((prediomunicipio.id_estado_fk = estado.id_estado))) LEFT JOIN geo_predio_mc geo_predio_mc ON (((prediomunicipio.id_shp_p)::text = (geo_predio_mc.id_shp)::text)));


ALTER TABLE vw_predio OWNER TO sistemas;

--
-- TOC entry 335 (class 1259 OID 189452)
-- Name: vw_prediomunicipio; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_prediomunicipio AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.cedula_ppal_p AS cedula_ppal, prediomunicipio.id_catastro_p, prediomunicipio.identifica_p AS temporal, prediomunicipio.proyecto_p AS proyecto, prediomunicipio.codigounico_p AS codigounico, prediomunicipio.codigonal_p AS codigonal, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion, prediomunicipio.direccioncatastro_p AS direccion_catastro, prediomunicipio.zona_p AS zona, barrios.id_barrio, barrios.barrio, barrios.comuna, barrios.estra_moda, prediomunicipio.pais_p AS pais, prediomunicipio.ciudad_p AS ciudad, prediomunicipio.afecta_pot_p AS afecta_pot, prediomunicipio.asegurado_p AS asegurado, prediomunicipio.matricula_ppal_p AS matricula_ppal, matricula.numero_mat AS matricula_numero, matricula.fecha_mat AS matricula_fecha, modo_adq.nombre_madq AS modo_adq, prediomunicipio.lind_norte_p AS lind_norte, prediomunicipio.lind_sur_p AS lind_sur, prediomunicipio.lind_este_p AS lind_este, prediomunicipio.lind_oeste_p AS lind_oeste, prediomunicipio.lind_adic_p AS lind_adic, prediomunicipio.suscep_vta_p AS suscep_vta, dependencia.nombre_depen AS organismo, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.ubica_archivo_p AS ubica_archivo, prediomunicipio.derecho_p AS derecho, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, tercero.nombre_tcro AS tercero, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicat, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.num_activofijo_p AS activofijo, prediomunicipio.codigo_zhg_p AS codigo_zhg, prediomunicipio.cuenta_terreno_p AS cuenta_terreno, prediomunicipio.nombre_cuenta_p AS nombre_cuenta, tercero_a.nombre_tcro AS propietario_antes, prediomunicipio.impto_predial_p AS impto_predial, prediomunicipio.id_shp_p AS id_shp, prediomunicipio.fecha_levantamiento_p AS fecha_levantamiento, prediomunicipio.id_estado_fk AS estado, prediomunicipio.fecha_estudio_titulo_p AS fecha_estudio_titulo, prediomunicipio.fecha_creacion_p AS fecha_actualiza, prediomunicipio.actualiza_sap, capa.nombre_capa, prediomunicipio.url1, prediomunicipio.mensaje_p AS mensaje, prediomunicipio.orfeo_cb_p AS orfeo_cb, prediomunicipio.doc_calidad_bien AS url2, prediomunicipio.url3, prediomunicipio.migracion_siga, prediomunicipio.documento_p AS documento, prediomunicipio.foto_p AS foto, proyecto.nombre_pro AS proyecto_nombre, proyecto.documento_digital_pro AS proyecto_documento_digital FROM ((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN tercero tercero_a ON ((prediomunicipio.propietario_antes_p = tercero_a.nit_tcro))) LEFT JOIN capa capa ON ((prediomunicipio.id_capa = capa.id_capa))) LEFT JOIN proyecto proyecto ON ((prediomunicipio.id_proyecto_p = proyecto.id_pro)));


ALTER TABLE vw_prediomunicipio OWNER TO sistemas;

--
-- TOC entry 321 (class 1259 OID 154826)
-- Name: vw_prueba_idesc; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_prueba_idesc AS
SELECT epg_nodo.id_nodo AS epg_nodo_id_nodo, epg_nodo.codigo_nodo AS epg_nodo_codigo_nodo, epg_nodo.nombre_nodo AS epg_nodo_nombre_nodo, epg_nodo.nivel_nodo AS epg_nodo_nivel_nodo, epg_nodo.padre_nodo AS epg_nodo_padre_nodo, epg_nivel_gestion.nombre_ng AS epg_nivel_gestion_nombre_ng, epg_ubicacion_nodo.predial_ubic AS epg_ubicacion_nodo_predial_ubic, epg_ubicacion_nodo.piso_ubic AS epg_ubicacion_nodo_piso_ubic, epg_geo_nodo.gid AS epg_geo_nodo_gid, epg_geo_nodo.the_geom AS epg_geo_nodo_the_geom, epg_geo_nodo.direccion AS epg_geo_nodo_direccion, epg_capa.id_capa_epg AS epg_capa_id_capa_epg, epg_capa.nombre_capa_epg AS epg_capa_nombre_capa_epg FROM ((((epg_nivel_gestion epg_nivel_gestion RIGHT JOIN epg_nodo epg_nodo ON ((epg_nivel_gestion.id_ng = epg_nodo.nivel_gestion))) LEFT JOIN epg_ubicacion_nodo epg_ubicacion_nodo ON (((epg_nodo.codigo_nodo)::text = (epg_ubicacion_nodo.cod_nodo_ubic)::text))) LEFT JOIN epg_geo_nodo epg_geo_nodo ON (((epg_ubicacion_nodo.predial_ubic)::text = (epg_geo_nodo.id_shp)::text))) LEFT JOIN epg_capa epg_capa ON ((epg_geo_nodo.capa_epg = epg_capa.id_capa_epg)));


ALTER TABLE vw_prueba_idesc OWNER TO sistemas;

--
-- TOC entry 380 (class 1259 OID 205321)
-- Name: vw_saneamiento; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_saneamiento AS
SELECT prediomunicipio.id_p AS registro, prediomunicipio.id_catastro_p AS id_catastro, prediomunicipio.identifica_p AS predial_terreno, prediomunicipio.codigounico_p AS codigounico, prediomunicipio.codigonal_p AS codigonal, prediomunicipio.proyecto_p AS nombre_proyecto, calidad_bien.nombre_cb AS calidad_bien, clase_inmueble.clase AS clase_inmueble, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_predio, prediomunicipio.direccion_p AS direccion_oficial, prediomunicipio.direccioncatastro_p AS direccion_catastro, prediomunicipio.zona_p AS zona, barrios.barrio, barrios.comuna, prediomunicipio.ciudad_p AS ciudad, prediomunicipio.afecta_pot_p AS afecta_pot, prediomunicipio.asegurado_p AS asegurado, prediomunicipio.matricula_ppal_p AS matricula_ppal, prediomunicipio.mat_inmob_p AS mat_inmob, tipo_doc.nombre_tipod AS tipo_documento, documento.numero_doc AS numero_documento, documento.fecha_doc, oficina_expedicion_doc.nombre_oficina AS oficina_expedicion_doc, documento.id_not_fk AS notaria_doc, modo_adq.nombre_madq AS modo_adquisicion, prediomunicipio.lind_norte_p AS lind_norte, prediomunicipio.lind_sur_p AS lind_sur, prediomunicipio.lind_este_p AS lind_este, prediomunicipio.lind_oeste_p AS lind_oeste, prediomunicipio.lind_adic_p AS lind_adic, prediomunicipio.suscep_vta_p AS suscep_vta, dependencia.nombre_depen AS dependencia, prediomunicipio.derecho_p AS derecho, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, tercero.nombre_tcro AS nombre_propietario_anterior, prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicat, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.num_activofijo_p AS num_activofijo, prediomunicipio.codigo_zhg_p AS codigo_zhg, prediomunicipio.cuenta_terreno_p AS cuenta_terreno_sap, prediomunicipio.nombre_cuenta_p AS nombre_cuenta_sap, prediomunicipio.impto_predial_p AS impto_predial, prediomunicipio.id_estado_fk AS estado, prediomunicipio.fecha_estudio_titulo_p AS fecha_estudio_titulo, prediomunicipio.actualiza_sap FROM ((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) WHERE ((prediomunicipio.id_estado_fk = 1) AND (((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text))) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_saneamiento OWNER TO sistemas;

--
-- TOC entry 5641 (class 0 OID 0)
-- Dependencies: 380
-- Name: VIEW vw_saneamiento; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW vw_saneamiento IS 'Se crea esta vista para dar acceso a la Subdirección de Impuestos y Rentas Municipales sobre campos especificos de la BD de SIBICA, en apoyo al proceso de saneamiento, ver Orfeo No. 201941310400102534 del 02-09-2019';


--
-- TOC entry 333 (class 1259 OID 189112)
-- Name: vw_sap; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_sap AS
SELECT prediomunicipio.fecha_estudio_titulo_p AS concepto_juridico, prediomunicipio.actualiza_sap AS fecha_sap, prediomunicipio.id_p AS registro, prediomunicipio.identifica_p AS predial_no, prediomunicipio.num_activofijo_p AS activofijo_terreno, construccion.predial_edificacion_const AS "predial_construcción", construccion.activofijo_const AS "activofijo_construcción", prediomunicipio.direccion_p AS "dirección_oficial", prediomunicipio.direccioncatastro_p AS "dirección_catastro", barrios.barrio, barrios.comuna, barrios.estra_moda AS estrato, prediomunicipio.zona_p AS zona, prediomunicipio.proyecto_p AS nombre_proyecto, prediomunicipio.nombre_areacedida_p AS nombre_areacedida, prediomunicipio.mat_inmob_p AS matricula_inmobiliaria, calidad_bien.nombre_cb AS calidad_bien, tipo_bien.nombre_tb AS tipo_bien, uso_predio.nombre_tu AS uso_del_predio, prediomunicipio.area_cesion_p AS "area_cesión", prediomunicipio.area_actual_p AS area_actual, prediomunicipio.area_sicat_p AS area_sicatweb, prediomunicipio.area_terreno_p AS area_terreno, modo_adq.nombre_madq AS "modo_adquisición", tercero.nombre_tcro AS nombre_cedente, prediomunicipio.lind_norte_p AS lindero_norte, prediomunicipio.lind_sur_p AS lindero_sur, prediomunicipio.lind_este_p AS lindero_este, prediomunicipio.lind_oeste_p AS lindero_oeste, prediomunicipio.lind_adic_p AS lindero_adicional, prediomunicipio.suscep_vta_p AS susceptible_vta, prediomunicipio.nombrecomun_p AS nombre_comun, prediomunicipio.derecho_p AS derechobien, prediomunicipio.codigo_zhg_p AS "código_zhg", prediomunicipio.fecha_levantamiento_p AS fecha_levantamientotopog, dependencia.nombre_depen AS nombre_dependencia, estado.nombre_estado AS estado_predio, construccion.nombre_const AS "nombre_construcción", construccion.numpisos_const AS numero_pisos, tipo_doc.nombre_tipod AS tipo_docto, documento.numero_doc AS documento_no, documento.fecha_doc AS fecha_docto, notaria.nombre_not AS notaria_docto, digital.path_foto_digi AS "ubicación_fotos_digital", digital.path_archivo_digi AS "ubicación_archivo_digital" FROM ((((((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN dependencia dependencia ON (((prediomunicipio.id_depen_fk)::numeric = dependencia.id_depen))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN estado estado ON ((prediomunicipio.id_estado_fk = estado.id_estado))) LEFT JOIN tercero tercero ON ((prediomunicipio.nit_cede_fk = tercero.nit_tcro))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN digital digital ON (((prediomunicipio.identifica_p)::text = (digital.predial_digi_fk)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN notaria notaria ON ((documento.id_not_fk = notaria.id_not))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN estado estado_a ON ((contrato.id_estado_fk = estado_a.id_estado))) LEFT JOIN tercero tercero_a ON ((contrato.nit_entidad_cont = tercero_a.nit_tcro))) WHERE ((prediomunicipio.id_estado_fk = 1) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) ORDER BY prediomunicipio.identifica_p;


ALTER TABLE vw_sap OWNER TO sistemas;

--
-- TOC entry 322 (class 1259 OID 154841)
-- Name: vw_siga_cedulacatastral; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_cedulacatastral AS
SELECT DISTINCT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS cedula, ''::text AS chip, upper((uso_predio.nombre_tu)::text) AS destinacion, date_part('year'::text, documento.fecha_doc) AS "año", prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_terreno_p AS area_terreno, 'M2'::text AS unterreno, construccion.area_edifica_const AS construida, 'M2'::text AS unconstruida, upper((prediomunicipio.cedula_ppal_p)::text) AS principal, prediomunicipio.clase_inmueble_p AS clase FROM ((((uso_predio uso_predio RIGHT JOIN prediomunicipio prediomunicipio ON ((uso_predio.id_tu = prediomunicipio.id_tu_fk))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_siga_cedulacatastral OWNER TO sistemas;

--
-- TOC entry 323 (class 1259 OID 154846)
-- Name: vw_siga_inmueble; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_inmueble AS
SELECT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS predial, upper((prediomunicipio.nombrecomun_p)::text) AS nombrecomun, upper((calidad_bien.nombre_cb)::text) AS clasificacion, prediomunicipio.direccion_p AS direccion, 'COLOMBIA' AS pais, departamento.nombre_dep AS departamento, ciudad.nombre_ciu AS ciudad, ('ESTRATO'::text || ' 0'::text) AS estrato, upper((clase_inmueble.clase)::text) AS clase, upper(replace("substring"((tipo_bien.nombre_tb)::text, 1), 'Zona Verde'::text, 'ESPACIO PÚBLICO'::text)) AS tipo, upper((prediomunicipio.afecta_pot_p)::text) AS pot, 'NO' AS sismo, upper((prediomunicipio.asegurado_p)::text) AS asegurado, upper((prediomunicipio.impto_predial_p)::text) AS impred, upper((tipo_doc.nombre_tipod)::text) AS docpro, documento_predio.id_doc AS numdoc, documento.fecha_doc AS fechadoc, upper((oficina_expedicion_doc.nombre_oficina)::text) AS oficina, departamento_a.nombre_dep AS deptopro, ciudad_a.nombre_ciu AS ciupro, ' ' AS observaciones FROM ((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad_a ON (((documento.ciudad_doc)::text = (ciudad_a.cod_ciu)::text))) LEFT JOIN departamento departamento_a ON (((ciudad_a.cod_dep)::text = (departamento_a.cod_dep)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_siga_inmueble OWNER TO sistemas;

--
-- TOC entry 324 (class 1259 OID 154851)
-- Name: vw_siga_matricula; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_matricula AS
SELECT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS predial, prediomunicipio.mat_inmob_p AS nunmat, upper((prediomunicipio.matricula_ppal_p)::text) AS principal, upper((modo_adq.nombre_madq)::text) AS adquisicion, matricula.fecha_mat AS fecreg, upper((departamento.nombre_dep)::text) AS depreg, ciudad.nombre_ciu AS ciureg, upper((matricula.estado_juridico_mat)::text) AS estjur, 0 AS gravamen, upper((matricula.otroprop_mat)::text) AS otroprop, prediomunicipio.derecho_p AS porcentaje, upper((matricula.tipoprop_mat)::text) AS tipoprop, upper((prediomunicipio.nombrecomun_p)::text) AS nombrecomun, upper((calidad_bien.nombre_cb)::text) AS clasificacion, prediomunicipio.direccion_p AS direccion, 'COLOMBIA' AS pais, departamento.nombre_dep AS departamento, ciudad.nombre_ciu AS ciudad, ('ESTRATO'::text || ' 0'::text) AS estrato, upper((clase_inmueble.clase)::text) AS clase, tipo_bien.nombre_tb AS tipo, prediomunicipio.afecta_pot_p AS pot, 'NO' AS sismo, prediomunicipio.asegurado_p AS asegurado, prediomunicipio.impto_predial_p AS impred, tipo_doc.nombre_tipod AS docpro, documento_predio.id_doc AS numdoc, documento.fecha_doc AS fechadoc, oficina_expedicion_doc.nombre_oficina AS oficina, departamento_a.nombre_dep AS deptopro, ciudad_a.nombre_ciu AS ciupro, ' ' AS observaciones FROM ((((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad_a ON (((documento.ciudad_doc)::text = (ciudad_a.cod_ciu)::text))) LEFT JOIN departamento departamento_a ON (((ciudad_a.cod_dep)::text = (departamento_a.cod_dep)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) LEFT JOIN matricula matricula ON (((matricula.numero_mat)::text = (prediomunicipio.mat_inmob_p)::text))) LEFT JOIN modo_adq modo_adq ON ((modo_adq.id_madq = prediomunicipio.id_madq_fk))) LEFT JOIN proceso_matricula proceso_matricula ON (((matricula.numero_mat)::text = (proceso_matricula.matricula)::text))) LEFT JOIN proceso proceso ON ((proceso_matricula.id_proceso = proceso.id_proceso))) WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_siga_matricula OWNER TO sistemas;

--
-- TOC entry 325 (class 1259 OID 154856)
-- Name: vw_siga_matriculaxcedula; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_matriculaxcedula AS
SELECT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS cedula, prediomunicipio.mat_inmob_p AS nummat FROM prediomunicipio WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_siga_matriculaxcedula OWNER TO sistemas;

--
-- TOC entry 326 (class 1259 OID 154861)
-- Name: vw_siga_ocupacion; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_ocupacion AS
SELECT DISTINCT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p, upper(replace("substring"((tipo_contrato.nombre_tc)::text, 1), 'Comodato'::text, 'EN COMODATO'::text)) AS ocupacion, contrato.cantidad_ocupa_cont AS cantidad, contrato.porcentaje_ocupa_cont AS porcentaje, upper((contrato.tipo_ocupante_cont)::text) AS ocupante, contrato.valor_canon_cont AS canon, CASE WHEN (contrato.numero_cont IS NULL) THEN 'NO'::text ELSE 'SI'::text END AS documento FROM ((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN barrios barrios ON (((prediomunicipio.id_barrio)::text = (barrios.id_barrio)::text))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad_a ON (((documento.ciudad_doc)::text = (ciudad_a.cod_ciu)::text))) LEFT JOIN departamento departamento_a ON (((ciudad_a.cod_dep)::text = (departamento_a.cod_dep)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) ORDER BY prediomunicipio.id_p;


ALTER TABLE vw_siga_ocupacion OWNER TO sistemas;

--
-- TOC entry 339 (class 1259 OID 190177)
-- Name: vw_siga_terrenos; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_terrenos AS
SELECT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS predial, construccion.predial_edificacion_const AS construccion_predial, construccion.nombre_const AS construccion_nombre, upper((prediomunicipio.nombrecomun_p)::text) AS nombrecomun, upper((calidad_bien.nombre_cb)::text) AS clasificacion, prediomunicipio.direccion_p AS direccion, 'COLOMBIA' AS pais, departamento.nombre_dep AS departamento, ciudad.nombre_ciu AS ciudad, ('ESTRATO'::text || ' 0'::text) AS estrato, upper((clase_inmueble.clase)::text) AS clase, upper(replace("substring"((tipo_bien.nombre_tb)::text, 1), 'Zona Verde'::text, 'ESPACIO PÚBLICO'::text)) AS tipo, upper((prediomunicipio.afecta_pot_p)::text) AS pot, 'NO' AS sismo, upper((prediomunicipio.asegurado_p)::text) AS asegurado, upper((prediomunicipio.impto_predial_p)::text) AS impred, upper((tipo_doc.nombre_tipod)::text) AS docpro, documento_predio.id_doc AS numdoc, documento.fecha_doc AS fechadoc, upper((oficina_expedicion_doc.nombre_oficina)::text) AS oficina, departamento_a.nombre_dep AS deptopro, ciudad_a.nombre_ciu AS ciupro, departamento_a.nombre_dep AS departamento_a_nombre_dep, ' ' AS observaciones, ' ' AS fechaenajenacion, 'Fin Hoja INMUEBLE ' AS fin, upper(replace("substring"((tipo_contrato.nombre_tc)::text, 1), 'Comodato'::text, 'EN COMODATO'::text)) AS ocupacion, contrato.cantidad_ocupa_cont AS cantidad, contrato.porcentaje_ocupa_cont AS porcentaje_ocup, upper((contrato.tipo_ocupante_cont)::text) AS ocupante, contrato.valor_canon_cont AS canon, CASE WHEN (contrato.numero_cont IS NULL) THEN 'NO'::text ELSE 'SI'::text END AS documento, 'Fin Hoja OCUPACION' AS fin_ocupacion, matricula.numero_mat AS nunmat, upper((prediomunicipio.matricula_ppal_p)::text) AS principal, upper((modo_adq.nombre_madq)::text) AS adquisicion, matricula.fecha_mat AS fecreg, upper((departamento_b.nombre_dep)::text) AS depreg, upper((ciudad_b.nombre_ciu)::text) AS ciureg, upper((matricula.estado_juridico_mat)::text) AS estjur, 0 AS gravamen, upper((matricula.otroprop_mat)::text) AS otroprop, prediomunicipio.derecho_p AS porcentaje_propiedad, upper((matricula.tipoprop_mat)::text) AS tipoprop, 'Fin Hoja MATRICULA' AS fin_matricula, ''::text AS chip, upper((uso_predio.nombre_tu)::text) AS destinacion, date_part('year'::text, documento.fecha_doc) AS "año", prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.area_actual_p AS area_actual, 'M2'::text AS unterreno, construccion.area_edifica_const AS construida, 'M2'::text AS unconstruida, 'Fin Hoja CEDULA_CATASTRAL' AS fin_ccatastral FROM (((((((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN ciudad ciudad_b ON (((matricula.ciudad_mat)::text = (ciudad_b.cod_ciu)::text))) LEFT JOIN departamento departamento_b ON (((ciudad_b.cod_dep)::text = (departamento_b.cod_dep)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad_a ON (((documento.ciudad_doc)::text = (ciudad_a.cod_ciu)::text))) LEFT JOIN departamento departamento_a ON (((ciudad_a.cod_dep)::text = (departamento_a.cod_dep)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) WHERE (((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL)) AND (clase_inmueble.id_clase = 2)) ORDER BY matricula.numero_mat;


ALTER TABLE vw_siga_terrenos OWNER TO sistemas;

--
-- TOC entry 338 (class 1259 OID 190170)
-- Name: vw_siga_varios; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW vw_siga_varios AS
SELECT prediomunicipio.id_p AS codinm, prediomunicipio.identifica_p AS predial, construccion.predial_edificacion_const AS construccion_predial, construccion.nombre_const AS construccion_nombre, upper((prediomunicipio.nombrecomun_p)::text) AS nombrecomun, upper((calidad_bien.nombre_cb)::text) AS clasificacion, prediomunicipio.direccion_p AS direccion, 'COLOMBIA' AS pais, departamento.nombre_dep AS departamento, ciudad.nombre_ciu AS ciudad, ('ESTRATO'::text || ' 0'::text) AS estrato, upper((clase_inmueble.clase)::text) AS clase, upper(replace("substring"((tipo_bien.nombre_tb)::text, 1), 'Zona Verde'::text, 'ESPACIO PÚBLICO'::text)) AS tipo, upper((prediomunicipio.afecta_pot_p)::text) AS pot, 'NO' AS sismo, upper((prediomunicipio.asegurado_p)::text) AS asegurado, upper((prediomunicipio.impto_predial_p)::text) AS impred, upper((tipo_doc.nombre_tipod)::text) AS docpro, documento_predio.id_doc AS numdoc, documento.fecha_doc AS fechadoc, upper((oficina_expedicion_doc.nombre_oficina)::text) AS oficina, departamento_a.nombre_dep AS deptopro, ciudad_a.nombre_ciu AS ciupro, departamento_a.nombre_dep AS departamento_a_nombre_dep, ' ' AS observaciones, ' ' AS fechaenajenacion, 'Fin Hoja INMUEBLE ' AS fin, upper(replace("substring"((tipo_contrato.nombre_tc)::text, 1), 'Comodato'::text, 'EN COMODATO'::text)) AS ocupacion, contrato.cantidad_ocupa_cont AS cantidad, contrato.porcentaje_ocupa_cont AS porcentaje_ocup, upper((contrato.tipo_ocupante_cont)::text) AS ocupante, contrato.valor_canon_cont AS canon, CASE WHEN (contrato.numero_cont IS NULL) THEN 'NO'::text ELSE 'SI'::text END AS documento, 'Fin Hoja OCUPACION' AS fin_ocupacion, matricula.numero_mat AS nunmat, upper((prediomunicipio.matricula_ppal_p)::text) AS principal, upper((modo_adq.nombre_madq)::text) AS adquisicion, matricula.fecha_mat AS fecreg, upper((departamento_b.nombre_dep)::text) AS depreg, upper((ciudad_b.nombre_ciu)::text) AS ciureg, upper((matricula.estado_juridico_mat)::text) AS estjur, 0 AS gravamen, upper((matricula.otroprop_mat)::text) AS otroprop, prediomunicipio.derecho_p AS porcentaje_prop, upper((matricula.tipoprop_mat)::text) AS tipoprop, 'Fin Hoja MATRICULA' AS fin_matricula, ''::text AS chip, upper((uso_predio.nombre_tu)::text) AS destinacion, date_part('year'::text, documento.fecha_doc) AS "año", prediomunicipio.area_cesion_p AS area_cesion, prediomunicipio.area_terreno_p AS area_terreno, prediomunicipio.area_actual_p AS area_actual, 'M2'::text AS unterreno, construccion.area_edifica_const AS construida, 'M2'::text AS unconstruida, 'Fin Hoja CEDULA_CATASTRAL' AS fin_ccatastral FROM (((((((((((((((((((calidad_bien calidad_bien RIGHT JOIN prediomunicipio prediomunicipio ON ((calidad_bien.id_cb = prediomunicipio.id_cb_fk))) LEFT JOIN ciudad ciudad ON (((prediomunicipio.ciudad_p)::text = (ciudad.cod_ciu)::text))) LEFT JOIN clase_inmueble clase_inmueble ON ((prediomunicipio.clase_inmueble_p = clase_inmueble.id_clase))) LEFT JOIN tipo_bien tipo_bien ON ((prediomunicipio.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN documento_predio documento_predio ON (((prediomunicipio.identifica_p)::text = (documento_predio.predial_p)::text))) LEFT JOIN contrato contrato ON (((prediomunicipio.identifica_p)::text = (contrato.predial_cont_fk)::text))) LEFT JOIN matricula matricula ON (((prediomunicipio.mat_inmob_p)::text = (matricula.numero_mat)::text))) LEFT JOIN modo_adq modo_adq ON ((prediomunicipio.id_madq_fk = modo_adq.id_madq))) LEFT JOIN uso_predio uso_predio ON ((prediomunicipio.id_tu_fk = uso_predio.id_tu))) LEFT JOIN construccion construccion ON (((prediomunicipio.identifica_p)::text = (construccion.predialterreno_const_fk)::text))) LEFT JOIN ciudad ciudad_b ON (((matricula.ciudad_mat)::text = (ciudad_b.cod_ciu)::text))) LEFT JOIN departamento departamento_b ON (((ciudad_b.cod_dep)::text = (departamento_b.cod_dep)::text))) LEFT JOIN tipo_contrato tipo_contrato ON ((contrato.id_tc_fk = tipo_contrato.id_tc))) LEFT JOIN documento documento ON (((documento_predio.id_doc)::text = (documento.numero_doc)::text))) LEFT JOIN tipo_doc tipo_doc ON ((documento.id_tipod_fk = tipo_doc.id_tipod))) LEFT JOIN oficina_expedicion_doc oficina_expedicion_doc ON ((documento.id_oficina_expe = oficina_expedicion_doc.id_oficina))) LEFT JOIN ciudad ciudad_a ON (((documento.ciudad_doc)::text = (ciudad_a.cod_ciu)::text))) LEFT JOIN departamento departamento_a ON (((ciudad_a.cod_dep)::text = (departamento_a.cod_dep)::text))) LEFT JOIN departamento departamento ON (((ciudad.cod_dep)::text = (departamento.cod_dep)::text))) WHERE ((((((prediomunicipio.identifica_p)::text < '1'::text) OR ((prediomunicipio.identifica_p)::text > '9999999999999'::text)) AND (prediomunicipio.fecha_estudio_titulo_p IS NOT NULL)) AND (prediomunicipio.id_estado_fk = 1)) AND (prediomunicipio.migracion_siga IS NULL));


ALTER TABLE vw_siga_varios OWNER TO sistemas;

--
-- TOC entry 327 (class 1259 OID 154866)
-- Name: zonasverdes; Type: VIEW; Schema: public; Owner: sistemas
--

CREATE VIEW zonasverdes AS
SELECT g.oid, g.gid, g.the_geom, g.id_shp, p.identifica_p AS "Num predial", p.nombre_areacedida_p AS "nombre area cedida", p.proyecto_p AS "nombre proyecto", p.direccion_p AS direccion, p.mat_inmob_p AS "matricula inmobiliaria", calidad_bien.nombre_cb AS "Calidad Bien", tipo_bien.nombre_tb AS "Tipo Bien", uso_predio.nombre_tu AS "Tipo Uso", p.codigounico_p AS "cod unico", p.codigonal_p AS "cod nacional", p.area_cesion_p AS "area cesion", p.area_actual_p AS "area actual", p.area_sicat_p AS "area SICAT", p.area_terreno_p AS "Area Terreno", p.lind_norte_p, p.lind_sur_p, p.lind_este_p, p.lind_oeste_p, p.lind_adic_p FROM ((((geo_predio_mc g LEFT JOIN prediomunicipio p ON (((g.id_shp)::text = (p.identifica_p)::text))) LEFT JOIN calidad_bien calidad_bien ON ((p.id_cb_fk = calidad_bien.id_cb))) LEFT JOIN tipo_bien tipo_bien ON ((p.id_tb_fk = tipo_bien.id_tb))) LEFT JOIN uso_predio uso_predio ON ((p.id_tu_fk = uso_predio.id_tu)));


ALTER TABLE zonasverdes OWNER TO sistemas;

--
-- TOC entry 5648 (class 0 OID 0)
-- Dependencies: 327
-- Name: VIEW zonasverdes; Type: COMMENT; Schema: public; Owner: sistemas
--

COMMENT ON VIEW zonasverdes IS 'Se crea esta vista para dar acceso a IDESC a información especifica sobre zonas verdes';


--
-- TOC entry 4002 (class 2604 OID 163317)
-- Name: gid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY barrios ALTER COLUMN gid SET DEFAULT nextval('barrios_gid_seq'::regclass);


--
-- TOC entry 4008 (class 2604 OID 163319)
-- Name: gid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comunas ALTER COLUMN gid SET DEFAULT nextval('comunas_gid_seq'::regclass);


--
-- TOC entry 4012 (class 2604 OID 163321)
-- Name: gid; Type: DEFAULT; Schema: public; Owner: topografia
--

ALTER TABLE ONLY educacion ALTER COLUMN gid SET DEFAULT nextval('educacion_gid_seq'::regclass);


--
-- TOC entry 4055 (class 2604 OID 199157)
-- Name: gid; Type: DEFAULT; Schema: public; Owner: topografia
--

ALTER TABLE ONLY juegos ALTER COLUMN gid SET DEFAULT nextval('juegos_gid_seq'::regclass);


--
-- TOC entry 4041 (class 2604 OID 163322)
-- Name: id_lib; Type: DEFAULT; Schema: public; Owner: sistemas
--

ALTER TABLE ONLY libro ALTER COLUMN id_lib SET DEFAULT nextval('libro_id_seq'::regclass);


--
-- TOC entry 4702 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 4706 (class 0 OID 0)
-- Dependencies: 1566
-- Name: box2d; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE box2d FROM PUBLIC;
REVOKE ALL ON TYPE box2d FROM postgres;
GRANT ALL ON TYPE box2d TO PUBLIC;


--
-- TOC entry 4708 (class 0 OID 0)
-- Dependencies: 1554
-- Name: box3d; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE box3d FROM PUBLIC;
REVOKE ALL ON TYPE box3d FROM postgres;
GRANT ALL ON TYPE box3d TO PUBLIC;


--
-- TOC entry 4710 (class 0 OID 0)
-- Dependencies: 1558
-- Name: box3d_extent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE box3d_extent FROM PUBLIC;
REVOKE ALL ON TYPE box3d_extent FROM postgres;
GRANT ALL ON TYPE box3d_extent TO PUBLIC;


--
-- TOC entry 4711 (class 0 OID 0)
-- Dependencies: 1562
-- Name: chip; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE chip FROM PUBLIC;
REVOKE ALL ON TYPE chip FROM postgres;
GRANT ALL ON TYPE chip TO PUBLIC;


--
-- TOC entry 4713 (class 0 OID 0)
-- Dependencies: 1581
-- Name: geography; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE geography FROM PUBLIC;
REVOKE ALL ON TYPE geography FROM postgres;
GRANT ALL ON TYPE geography TO PUBLIC;


--
-- TOC entry 4715 (class 0 OID 0)
-- Dependencies: 1550
-- Name: geometry; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE geometry FROM PUBLIC;
REVOKE ALL ON TYPE geometry FROM postgres;
GRANT ALL ON TYPE geometry TO PUBLIC;


--
-- TOC entry 4717 (class 0 OID 0)
-- Dependencies: 1570
-- Name: geometry_dump; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE geometry_dump FROM PUBLIC;
REVOKE ALL ON TYPE geometry_dump FROM postgres;
GRANT ALL ON TYPE geometry_dump TO PUBLIC;


--
-- TOC entry 4718 (class 0 OID 0)
-- Dependencies: 1585
-- Name: gidx; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE gidx FROM PUBLIC;
REVOKE ALL ON TYPE gidx FROM postgres;
GRANT ALL ON TYPE gidx TO PUBLIC;


--
-- TOC entry 4719 (class 0 OID 0)
-- Dependencies: 1577
-- Name: pgis_abs; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE pgis_abs FROM PUBLIC;
REVOKE ALL ON TYPE pgis_abs FROM postgres;
GRANT ALL ON TYPE pgis_abs TO PUBLIC;


--
-- TOC entry 4720 (class 0 OID 0)
-- Dependencies: 1546
-- Name: spheroid; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE spheroid FROM PUBLIC;
REVOKE ALL ON TYPE spheroid FROM postgres;
GRANT ALL ON TYPE spheroid TO PUBLIC;


--
-- TOC entry 5034 (class 0 OID 0)
-- Dependencies: 227
-- Name: calidad_bien; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE calidad_bien FROM PUBLIC;
REVOKE ALL ON TABLE calidad_bien FROM sistemas;
GRANT ALL ON TABLE calidad_bien TO sistemas;
GRANT SELECT ON TABLE calidad_bien TO topografia;
GRANT SELECT ON TABLE calidad_bien TO sibica;


--
-- TOC entry 5035 (class 0 OID 0)
-- Dependencies: 354
-- Name: gid_geo_predio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE gid_geo_predio FROM PUBLIC;
REVOKE ALL ON SEQUENCE gid_geo_predio FROM sistemas;
GRANT ALL ON SEQUENCE gid_geo_predio TO sistemas;
GRANT ALL ON SEQUENCE gid_geo_predio TO topografia;


--
-- TOC entry 5036 (class 0 OID 0)
-- Dependencies: 228
-- Name: geo_predio_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geo_predio_mc FROM PUBLIC;
REVOKE ALL ON TABLE geo_predio_mc FROM sistemas;
GRANT ALL ON TABLE geo_predio_mc TO sistemas;
GRANT SELECT ON TABLE geo_predio_mc TO idesc;
GRANT ALL ON TABLE geo_predio_mc TO topografia;
GRANT SELECT ON TABLE geo_predio_mc TO pme;
GRANT SELECT ON TABLE geo_predio_mc TO sibica;


--
-- TOC entry 5100 (class 0 OID 0)
-- Dependencies: 230
-- Name: prediomunicipio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE prediomunicipio FROM PUBLIC;
REVOKE ALL ON TABLE prediomunicipio FROM sistemas;
GRANT ALL ON TABLE prediomunicipio TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE prediomunicipio TO topografia;
GRANT SELECT ON TABLE prediomunicipio TO idesc;
GRANT TRIGGER ON TABLE prediomunicipio TO PUBLIC;


--
-- TOC entry 5104 (class 0 OID 0)
-- Dependencies: 231
-- Name: tipo_bien; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_bien FROM PUBLIC;
REVOKE ALL ON TABLE tipo_bien FROM sistemas;
GRANT ALL ON TABLE tipo_bien TO sistemas;
GRANT SELECT ON TABLE tipo_bien TO idesc;
GRANT SELECT ON TABLE tipo_bien TO topografia;
GRANT SELECT ON TABLE tipo_bien TO sibica;


--
-- TOC entry 5108 (class 0 OID 0)
-- Dependencies: 232
-- Name: uso_predio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE uso_predio FROM PUBLIC;
REVOKE ALL ON TABLE uso_predio FROM sistemas;
GRANT ALL ON TABLE uso_predio TO sistemas;
GRANT SELECT ON TABLE uso_predio TO idesc;
GRANT SELECT ON TABLE uso_predio TO topografia;
GRANT SELECT ON TABLE uso_predio TO sibica;


--
-- TOC entry 5109 (class 0 OID 0)
-- Dependencies: 234
-- Name: barrios; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE barrios FROM PUBLIC;
REVOKE ALL ON TABLE barrios FROM postgres;
GRANT ALL ON TABLE barrios TO postgres;
GRANT SELECT ON TABLE barrios TO topografia;
GRANT SELECT ON TABLE barrios TO sibica;


--
-- TOC entry 5135 (class 0 OID 0)
-- Dependencies: 236
-- Name: construccion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE construccion FROM PUBLIC;
REVOKE ALL ON TABLE construccion FROM sistemas;
GRANT ALL ON TABLE construccion TO sistemas;
GRANT SELECT ON TABLE construccion TO topografia;
GRANT SELECT ON TABLE construccion TO idesc;
GRANT SELECT ON TABLE construccion TO sibica;


--
-- TOC entry 5157 (class 0 OID 0)
-- Dependencies: 237
-- Name: contrato; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE contrato FROM PUBLIC;
REVOKE ALL ON TABLE contrato FROM sistemas;
GRANT ALL ON TABLE contrato TO sistemas;
GRANT SELECT ON TABLE contrato TO idesc;
GRANT SELECT ON TABLE contrato TO topografia;
GRANT SELECT ON TABLE contrato TO sibica;


--
-- TOC entry 5161 (class 0 OID 0)
-- Dependencies: 238
-- Name: dependencia; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE dependencia FROM PUBLIC;
REVOKE ALL ON TABLE dependencia FROM sistemas;
GRANT ALL ON TABLE dependencia TO sistemas;
GRANT SELECT ON TABLE dependencia TO idesc;
GRANT SELECT ON TABLE dependencia TO topografia;
GRANT SELECT ON TABLE dependencia TO sibica;


--
-- TOC entry 5167 (class 0 OID 0)
-- Dependencies: 239
-- Name: digital; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE digital FROM PUBLIC;
REVOKE ALL ON TABLE digital FROM sistemas;
GRANT ALL ON TABLE digital TO sistemas;
GRANT SELECT ON TABLE digital TO idesc;
GRANT SELECT ON TABLE digital TO topografia;


--
-- TOC entry 5174 (class 0 OID 0)
-- Dependencies: 240
-- Name: documento; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE documento FROM PUBLIC;
REVOKE ALL ON TABLE documento FROM sistemas;
GRANT ALL ON TABLE documento TO sistemas;
GRANT SELECT ON TABLE documento TO idesc;
GRANT SELECT ON TABLE documento TO topografia;
GRANT SELECT ON TABLE documento TO sibica;


--
-- TOC entry 5178 (class 0 OID 0)
-- Dependencies: 241
-- Name: documento_predio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE documento_predio FROM PUBLIC;
REVOKE ALL ON TABLE documento_predio FROM sistemas;
GRANT ALL ON TABLE documento_predio TO sistemas;
GRANT SELECT ON TABLE documento_predio TO idesc;
GRANT SELECT ON TABLE documento_predio TO topografia;
GRANT SELECT ON TABLE documento_predio TO sibica;


--
-- TOC entry 5182 (class 0 OID 0)
-- Dependencies: 242
-- Name: estado; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE estado FROM PUBLIC;
REVOKE ALL ON TABLE estado FROM sistemas;
GRANT ALL ON TABLE estado TO sistemas;
GRANT SELECT ON TABLE estado TO idesc;
GRANT SELECT ON TABLE estado TO topografia;
GRANT SELECT,INSERT,UPDATE ON TABLE estado TO sibica;


--
-- TOC entry 5186 (class 0 OID 0)
-- Dependencies: 243
-- Name: modo_adq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE modo_adq FROM PUBLIC;
REVOKE ALL ON TABLE modo_adq FROM sistemas;
GRANT ALL ON TABLE modo_adq TO sistemas;
GRANT SELECT ON TABLE modo_adq TO idesc;
GRANT SELECT ON TABLE modo_adq TO topografia;
GRANT SELECT ON TABLE modo_adq TO PUBLIC;
GRANT SELECT ON TABLE modo_adq TO sibica;


--
-- TOC entry 5189 (class 0 OID 0)
-- Dependencies: 244
-- Name: notaria; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE notaria FROM PUBLIC;
REVOKE ALL ON TABLE notaria FROM sistemas;
GRANT ALL ON TABLE notaria TO sistemas;
GRANT SELECT ON TABLE notaria TO idesc;
GRANT SELECT ON TABLE notaria TO topografia;
GRANT SELECT ON TABLE notaria TO sibica;


--
-- TOC entry 5197 (class 0 OID 0)
-- Dependencies: 245
-- Name: observacion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE observacion FROM PUBLIC;
REVOKE ALL ON TABLE observacion FROM sistemas;
GRANT ALL ON TABLE observacion TO sistemas;
GRANT SELECT ON TABLE observacion TO idesc;
GRANT SELECT,INSERT,UPDATE ON TABLE observacion TO topografia;
GRANT SELECT ON TABLE observacion TO sibica;


--
-- TOC entry 5201 (class 0 OID 0)
-- Dependencies: 246
-- Name: tercero; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tercero FROM PUBLIC;
REVOKE ALL ON TABLE tercero FROM sistemas;
GRANT ALL ON TABLE tercero TO sistemas;
GRANT SELECT ON TABLE tercero TO idesc;
GRANT SELECT ON TABLE tercero TO topografia;
GRANT SELECT ON TABLE tercero TO sibica;


--
-- TOC entry 5205 (class 0 OID 0)
-- Dependencies: 247
-- Name: tipo_contrato; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_contrato FROM PUBLIC;
REVOKE ALL ON TABLE tipo_contrato FROM sistemas;
GRANT ALL ON TABLE tipo_contrato TO sistemas;
GRANT SELECT ON TABLE tipo_contrato TO idesc;
GRANT SELECT ON TABLE tipo_contrato TO topografia;
GRANT SELECT ON TABLE tipo_contrato TO PUBLIC;
GRANT SELECT ON TABLE tipo_contrato TO sibica;


--
-- TOC entry 5209 (class 0 OID 0)
-- Dependencies: 248
-- Name: tipo_doc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_doc FROM PUBLIC;
REVOKE ALL ON TABLE tipo_doc FROM sistemas;
GRANT ALL ON TABLE tipo_doc TO sistemas;
GRANT SELECT ON TABLE tipo_doc TO idesc;
GRANT SELECT ON TABLE tipo_doc TO topografia;
GRANT SELECT ON TABLE tipo_doc TO sibica;


--
-- TOC entry 5213 (class 0 OID 0)
-- Dependencies: 249
-- Name: tipo_observacion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_observacion FROM PUBLIC;
REVOKE ALL ON TABLE tipo_observacion FROM sistemas;
GRANT ALL ON TABLE tipo_observacion TO sistemas;
GRANT SELECT ON TABLE tipo_observacion TO idesc;
GRANT SELECT ON TABLE tipo_observacion TO topografia;
GRANT SELECT ON TABLE tipo_observacion TO sibica;


--
-- TOC entry 5223 (class 0 OID 0)
-- Dependencies: 250
-- Name: usuario; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE usuario FROM PUBLIC;
REVOKE ALL ON TABLE usuario FROM sistemas;
GRANT ALL ON TABLE usuario TO sistemas;
GRANT SELECT ON TABLE usuario TO topografia;
GRANT SELECT ON TABLE usuario TO sibica;


--
-- TOC entry 5224 (class 0 OID 0)
-- Dependencies: 347
-- Name: archivo2; Type: ACL; Schema: public; Owner: topografia
--

REVOKE ALL ON TABLE archivo2 FROM PUBLIC;
REVOKE ALL ON TABLE archivo2 FROM topografia;
GRANT ALL ON TABLE archivo2 TO topografia;
GRANT ALL ON TABLE archivo2 TO PUBLIC;


--
-- TOC entry 5235 (class 0 OID 0)
-- Dependencies: 384
-- Name: auditoria; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE auditoria FROM PUBLIC;
REVOKE ALL ON TABLE auditoria FROM sistemas;
GRANT ALL ON TABLE auditoria TO sistemas;


--
-- TOC entry 5236 (class 0 OID 0)
-- Dependencies: 394
-- Name: auditoria_id_aud_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE auditoria_id_aud_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE auditoria_id_aud_seq FROM sistemas;
GRANT ALL ON SEQUENCE auditoria_id_aud_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE auditoria_id_aud_seq TO sibica;


--
-- TOC entry 5245 (class 0 OID 0)
-- Dependencies: 252
-- Name: avaluo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE avaluo FROM PUBLIC;
REVOKE ALL ON TABLE avaluo FROM sistemas;
GRANT ALL ON TABLE avaluo TO sistemas;
GRANT SELECT ON TABLE avaluo TO topografia;
GRANT SELECT ON TABLE avaluo TO sibica;


--
-- TOC entry 5253 (class 0 OID 0)
-- Dependencies: 329
-- Name: avaluo_catastral; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE avaluo_catastral FROM PUBLIC;
REVOKE ALL ON TABLE avaluo_catastral FROM sistemas;
GRANT ALL ON TABLE avaluo_catastral TO sistemas;
GRANT SELECT ON TABLE avaluo_catastral TO sibica;


--
-- TOC entry 5263 (class 0 OID 0)
-- Dependencies: 390
-- Name: calificacion_panorama; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE calificacion_panorama FROM PUBLIC;
REVOKE ALL ON TABLE calificacion_panorama FROM sistemas;
GRANT ALL ON TABLE calificacion_panorama TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE calificacion_panorama TO sibica;


--
-- TOC entry 5269 (class 0 OID 0)
-- Dependencies: 370
-- Name: campo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE campo FROM PUBLIC;
REVOKE ALL ON TABLE campo FROM sistemas;
GRANT ALL ON TABLE campo TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE campo TO sibica;


--
-- TOC entry 5272 (class 0 OID 0)
-- Dependencies: 254
-- Name: capa; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE capa FROM PUBLIC;
REVOKE ALL ON TABLE capa FROM sistemas;
GRANT ALL ON TABLE capa TO sistemas;
GRANT SELECT ON TABLE capa TO sibik;
GRANT ALL ON TABLE capa TO topografia;
GRANT SELECT ON TABLE capa TO sibica;


--
-- TOC entry 5277 (class 0 OID 0)
-- Dependencies: 257
-- Name: ciudad; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE ciudad FROM PUBLIC;
REVOKE ALL ON TABLE ciudad FROM sistemas;
GRANT ALL ON TABLE ciudad TO sistemas;
GRANT SELECT ON TABLE ciudad TO idesc;
GRANT SELECT ON TABLE ciudad TO sibica;


--
-- TOC entry 5281 (class 0 OID 0)
-- Dependencies: 258
-- Name: clase_inmueble; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE clase_inmueble FROM PUBLIC;
REVOKE ALL ON TABLE clase_inmueble FROM sistemas;
GRANT ALL ON TABLE clase_inmueble TO sistemas;
GRANT SELECT ON TABLE clase_inmueble TO idesc;
GRANT SELECT ON TABLE clase_inmueble TO sibica;


--
-- TOC entry 5285 (class 0 OID 0)
-- Dependencies: 385
-- Name: clasificacion_panorama; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE clasificacion_panorama FROM PUBLIC;
REVOKE ALL ON TABLE clasificacion_panorama FROM sistemas;
GRANT ALL ON TABLE clasificacion_panorama TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE clasificacion_panorama TO sibica;


--
-- TOC entry 5286 (class 0 OID 0)
-- Dependencies: 259
-- Name: comunas; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE comunas FROM PUBLIC;
REVOKE ALL ON TABLE comunas FROM postgres;
GRANT ALL ON TABLE comunas TO postgres;
GRANT SELECT ON TABLE comunas TO topografia;
GRANT SELECT ON TABLE comunas TO sibica;


--
-- TOC entry 5291 (class 0 OID 0)
-- Dependencies: 359
-- Name: cuenta; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE cuenta FROM PUBLIC;
REVOKE ALL ON TABLE cuenta FROM sistemas;
GRANT ALL ON TABLE cuenta TO sistemas;
GRANT SELECT ON TABLE cuenta TO sibica;


--
-- TOC entry 5295 (class 0 OID 0)
-- Dependencies: 262
-- Name: matricula; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE matricula FROM PUBLIC;
REVOKE ALL ON TABLE matricula FROM sistemas;
GRANT ALL ON TABLE matricula TO sistemas;
GRANT SELECT ON TABLE matricula TO sibica;


--
-- TOC entry 5297 (class 0 OID 0)
-- Dependencies: 263
-- Name: dapm_sepou_construccion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE dapm_sepou_construccion FROM PUBLIC;
REVOKE ALL ON TABLE dapm_sepou_construccion FROM sistemas;
GRANT ALL ON TABLE dapm_sepou_construccion TO sistemas;
GRANT SELECT ON TABLE dapm_sepou_construccion TO topografia;
GRANT ALL ON TABLE dapm_sepou_construccion TO dapm;


--
-- TOC entry 5299 (class 0 OID 0)
-- Dependencies: 264
-- Name: dapm_sepou_terrenos; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE dapm_sepou_terrenos FROM PUBLIC;
REVOKE ALL ON TABLE dapm_sepou_terrenos FROM sistemas;
GRANT ALL ON TABLE dapm_sepou_terrenos TO sistemas;
GRANT ALL ON TABLE dapm_sepou_terrenos TO dapm;
GRANT ALL ON TABLE dapm_sepou_terrenos TO topografia;


--
-- TOC entry 5303 (class 0 OID 0)
-- Dependencies: 265
-- Name: departamento; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE departamento FROM PUBLIC;
REVOKE ALL ON TABLE departamento FROM sistemas;
GRANT ALL ON TABLE departamento TO sistemas;
GRANT SELECT ON TABLE departamento TO idesc;
GRANT SELECT ON TABLE departamento TO sibica;


--
-- TOC entry 5305 (class 0 OID 0)
-- Dependencies: 268
-- Name: epg_capa; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_capa FROM PUBLIC;
REVOKE ALL ON TABLE epg_capa FROM sistemas;
GRANT ALL ON TABLE epg_capa TO sistemas;
GRANT SELECT ON TABLE epg_capa TO idesc;


--
-- TOC entry 5309 (class 0 OID 0)
-- Dependencies: 269
-- Name: epg_clase; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_clase FROM PUBLIC;
REVOKE ALL ON TABLE epg_clase FROM sistemas;
GRANT ALL ON TABLE epg_clase TO sistemas;
GRANT SELECT ON TABLE epg_clase TO topografia;


--
-- TOC entry 5318 (class 0 OID 0)
-- Dependencies: 271
-- Name: epg_consumo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_consumo FROM PUBLIC;
REVOKE ALL ON TABLE epg_consumo FROM sistemas;
GRANT ALL ON TABLE epg_consumo TO sistemas;
GRANT SELECT ON TABLE epg_consumo TO topografia;


--
-- TOC entry 5328 (class 0 OID 0)
-- Dependencies: 273
-- Name: epg_elemento; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_elemento FROM PUBLIC;
REVOKE ALL ON TABLE epg_elemento FROM sistemas;
GRANT ALL ON TABLE epg_elemento TO sistemas;
GRANT SELECT ON TABLE epg_elemento TO topografia;


--
-- TOC entry 5332 (class 0 OID 0)
-- Dependencies: 274
-- Name: epg_estado; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_estado FROM PUBLIC;
REVOKE ALL ON TABLE epg_estado FROM sistemas;
GRANT ALL ON TABLE epg_estado TO sistemas;
GRANT SELECT ON TABLE epg_estado TO topografia;


--
-- TOC entry 5334 (class 0 OID 0)
-- Dependencies: 275
-- Name: epg_geo_nodo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_geo_nodo FROM PUBLIC;
REVOKE ALL ON TABLE epg_geo_nodo FROM sistemas;
GRANT ALL ON TABLE epg_geo_nodo TO sistemas;
GRANT ALL ON TABLE epg_geo_nodo TO topografia;
GRANT SELECT ON TABLE epg_geo_nodo TO idesc;


--
-- TOC entry 5346 (class 0 OID 0)
-- Dependencies: 277
-- Name: epg_inventario; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_inventario FROM PUBLIC;
REVOKE ALL ON TABLE epg_inventario FROM sistemas;
GRANT ALL ON TABLE epg_inventario TO sistemas;
GRANT SELECT ON TABLE epg_inventario TO topografia;


--
-- TOC entry 5348 (class 0 OID 0)
-- Dependencies: 279
-- Name: epg_marca; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_marca FROM PUBLIC;
REVOKE ALL ON TABLE epg_marca FROM sistemas;
GRANT ALL ON TABLE epg_marca TO sistemas;
GRANT SELECT ON TABLE epg_marca TO topografia;


--
-- TOC entry 5349 (class 0 OID 0)
-- Dependencies: 280
-- Name: epg_nivel_gestion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_nivel_gestion FROM PUBLIC;
REVOKE ALL ON TABLE epg_nivel_gestion FROM sistemas;
GRANT ALL ON TABLE epg_nivel_gestion TO sistemas;
GRANT SELECT ON TABLE epg_nivel_gestion TO idesc;


--
-- TOC entry 5356 (class 0 OID 0)
-- Dependencies: 282
-- Name: epg_nodo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_nodo FROM PUBLIC;
REVOKE ALL ON TABLE epg_nodo FROM sistemas;
GRANT ALL ON TABLE epg_nodo TO sistemas;
GRANT SELECT ON TABLE epg_nodo TO topografia;
GRANT SELECT ON TABLE epg_nodo TO idesc;
GRANT SELECT ON TABLE epg_nodo TO dapm;


--
-- TOC entry 5358 (class 0 OID 0)
-- Dependencies: 284
-- Name: epg_personal; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_personal FROM PUBLIC;
REVOKE ALL ON TABLE epg_personal FROM sistemas;
GRANT ALL ON TABLE epg_personal TO sistemas;
GRANT SELECT ON TABLE epg_personal TO topografia;


--
-- TOC entry 5360 (class 0 OID 0)
-- Dependencies: 285
-- Name: epg_servicio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_servicio FROM PUBLIC;
REVOKE ALL ON TABLE epg_servicio FROM sistemas;
GRANT ALL ON TABLE epg_servicio TO sistemas;
GRANT SELECT ON TABLE epg_servicio TO topografia;


--
-- TOC entry 5362 (class 0 OID 0)
-- Dependencies: 287
-- Name: epg_tipo; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE epg_tipo FROM PUBLIC;
REVOKE ALL ON TABLE epg_tipo FROM postgres;
GRANT ALL ON TABLE epg_tipo TO postgres;
GRANT SELECT ON TABLE epg_tipo TO topografia;


--
-- TOC entry 5364 (class 0 OID 0)
-- Dependencies: 289
-- Name: epg_tipo_ocupacion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_tipo_ocupacion FROM PUBLIC;
REVOKE ALL ON TABLE epg_tipo_ocupacion FROM sistemas;
GRANT ALL ON TABLE epg_tipo_ocupacion TO sistemas;
GRANT SELECT ON TABLE epg_tipo_ocupacion TO topografia;


--
-- TOC entry 5366 (class 0 OID 0)
-- Dependencies: 291
-- Name: epg_tipo_personal; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE epg_tipo_personal FROM PUBLIC;
REVOKE ALL ON TABLE epg_tipo_personal FROM postgres;
GRANT ALL ON TABLE epg_tipo_personal TO postgres;
GRANT SELECT ON TABLE epg_tipo_personal TO topografia;


--
-- TOC entry 5372 (class 0 OID 0)
-- Dependencies: 293
-- Name: epg_ubicacion_nodo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE epg_ubicacion_nodo FROM PUBLIC;
REVOKE ALL ON TABLE epg_ubicacion_nodo FROM sistemas;
GRANT ALL ON TABLE epg_ubicacion_nodo TO sistemas;
GRANT ALL ON TABLE epg_ubicacion_nodo TO topografia;
GRANT SELECT ON TABLE epg_ubicacion_nodo TO idesc;


--
-- TOC entry 5374 (class 0 OID 0)
-- Dependencies: 386
-- Name: file; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE file FROM PUBLIC;
REVOKE ALL ON TABLE file FROM sistemas;
GRANT ALL ON TABLE file TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE file TO sibica;


--
-- TOC entry 5375 (class 0 OID 0)
-- Dependencies: 395
-- Name: file_id_file_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE file_id_file_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE file_id_file_seq FROM sistemas;
GRANT ALL ON SEQUENCE file_id_file_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE file_id_file_seq TO sibica;


--
-- TOC entry 5377 (class 0 OID 0)
-- Dependencies: 294
-- Name: geo_amob_li_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geo_amob_li_mc FROM PUBLIC;
REVOKE ALL ON TABLE geo_amob_li_mc FROM sistemas;
GRANT ALL ON TABLE geo_amob_li_mc TO sistemas;
GRANT SELECT ON TABLE geo_amob_li_mc TO idesc;
GRANT ALL ON TABLE geo_amob_li_mc TO topografia;
GRANT SELECT ON TABLE geo_amob_li_mc TO dapm;
GRANT SELECT ON TABLE geo_amob_li_mc TO pme;
GRANT SELECT ON TABLE geo_amob_li_mc TO sibica;


--
-- TOC entry 5378 (class 0 OID 0)
-- Dependencies: 295
-- Name: geo_amob_pol_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geo_amob_pol_mc FROM PUBLIC;
REVOKE ALL ON TABLE geo_amob_pol_mc FROM sistemas;
GRANT ALL ON TABLE geo_amob_pol_mc TO sistemas;
GRANT SELECT ON TABLE geo_amob_pol_mc TO idesc;
GRANT ALL ON TABLE geo_amob_pol_mc TO topografia;
GRANT SELECT ON TABLE geo_amob_pol_mc TO dapm;
GRANT SELECT ON TABLE geo_amob_pol_mc TO pme;
GRANT SELECT ON TABLE geo_amob_pol_mc TO sibica;


--
-- TOC entry 5379 (class 0 OID 0)
-- Dependencies: 296
-- Name: geo_amob_pto_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geo_amob_pto_mc FROM PUBLIC;
REVOKE ALL ON TABLE geo_amob_pto_mc FROM sistemas;
GRANT ALL ON TABLE geo_amob_pto_mc TO sistemas;
GRANT ALL ON TABLE geo_amob_pto_mc TO topografia;
GRANT SELECT ON TABLE geo_amob_pto_mc TO idesc;
GRANT SELECT ON TABLE geo_amob_pto_mc TO dapm;
GRANT SELECT ON TABLE geo_amob_pto_mc TO pme;
GRANT SELECT ON TABLE geo_amob_pto_mc TO sibica;


--
-- TOC entry 5380 (class 0 OID 0)
-- Dependencies: 297
-- Name: geo_constr_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geo_constr_mc FROM PUBLIC;
REVOKE ALL ON TABLE geo_constr_mc FROM sistemas;
GRANT ALL ON TABLE geo_constr_mc TO sistemas;
GRANT SELECT ON TABLE geo_constr_mc TO idesc;
GRANT ALL ON TABLE geo_constr_mc TO topografia;
GRANT SELECT ON TABLE geo_constr_mc TO dapm;
GRANT SELECT ON TABLE geo_constr_mc TO pme;
GRANT SELECT ON TABLE geo_constr_mc TO sibica;


--
-- TOC entry 5381 (class 0 OID 0)
-- Dependencies: 225
-- Name: geometry_columns; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE geometry_columns FROM PUBLIC;
REVOKE ALL ON TABLE geometry_columns FROM sistemas;
GRANT ALL ON TABLE geometry_columns TO sistemas;
GRANT ALL ON TABLE geometry_columns TO topografia;
GRANT ALL ON TABLE geometry_columns TO idesc;
GRANT ALL ON TABLE geometry_columns TO PUBLIC;
GRANT SELECT ON TABLE geometry_columns TO sibica;


--
-- TOC entry 5390 (class 0 OID 0)
-- Dependencies: 298
-- Name: libro; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE libro FROM PUBLIC;
REVOKE ALL ON TABLE libro FROM sistemas;
GRANT ALL ON TABLE libro TO sistemas;
GRANT SELECT ON TABLE libro TO sibica;


--
-- TOC entry 5399 (class 0 OID 0)
-- Dependencies: 383
-- Name: log_usuario_sistema; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE log_usuario_sistema FROM PUBLIC;
REVOKE ALL ON TABLE log_usuario_sistema FROM sistemas;
GRANT ALL ON TABLE log_usuario_sistema TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE log_usuario_sistema TO sibica;


--
-- TOC entry 5400 (class 0 OID 0)
-- Dependencies: 393
-- Name: log_usuario_sistema_id_log_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE log_usuario_sistema_id_log_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE log_usuario_sistema_id_log_seq FROM sistemas;
GRANT ALL ON SEQUENCE log_usuario_sistema_id_log_seq TO sistemas;
GRANT ALL ON SEQUENCE log_usuario_sistema_id_log_seq TO sibica;


--
-- TOC entry 5407 (class 0 OID 0)
-- Dependencies: 371
-- Name: modulo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE modulo FROM PUBLIC;
REVOKE ALL ON TABLE modulo FROM sistemas;
GRANT ALL ON TABLE modulo TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE modulo TO sibica;


--
-- TOC entry 5408 (class 0 OID 0)
-- Dependencies: 376
-- Name: modulo_id_mod_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE modulo_id_mod_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE modulo_id_mod_seq FROM sistemas;
GRANT ALL ON SEQUENCE modulo_id_mod_seq TO sistemas;
GRANT ALL ON SEQUENCE modulo_id_mod_seq TO sibica;


--
-- TOC entry 5419 (class 0 OID 0)
-- Dependencies: 372
-- Name: modulo_permiso; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE modulo_permiso FROM PUBLIC;
REVOKE ALL ON TABLE modulo_permiso FROM sistemas;
GRANT ALL ON TABLE modulo_permiso TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE modulo_permiso TO sibica;


--
-- TOC entry 5425 (class 0 OID 0)
-- Dependencies: 373
-- Name: modulo_permiso_campo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE modulo_permiso_campo FROM PUBLIC;
REVOKE ALL ON TABLE modulo_permiso_campo FROM sistemas;
GRANT ALL ON TABLE modulo_permiso_campo TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE modulo_permiso_campo TO sibica;


--
-- TOC entry 5429 (class 0 OID 0)
-- Dependencies: 300
-- Name: oficina_expedicion_doc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE oficina_expedicion_doc FROM PUBLIC;
REVOKE ALL ON TABLE oficina_expedicion_doc FROM sistemas;
GRANT ALL ON TABLE oficina_expedicion_doc TO sistemas;
GRANT SELECT ON TABLE oficina_expedicion_doc TO idesc;
GRANT SELECT ON TABLE oficina_expedicion_doc TO sibica;


--
-- TOC entry 5438 (class 0 OID 0)
-- Dependencies: 387
-- Name: panorama_riesgo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE panorama_riesgo FROM PUBLIC;
REVOKE ALL ON TABLE panorama_riesgo FROM sistemas;
GRANT ALL ON TABLE panorama_riesgo TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE panorama_riesgo TO sibica;


--
-- TOC entry 5442 (class 0 OID 0)
-- Dependencies: 302
-- Name: proceso; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE proceso FROM PUBLIC;
REVOKE ALL ON TABLE proceso FROM sistemas;
GRANT ALL ON TABLE proceso TO sistemas;
GRANT SELECT ON TABLE proceso TO idesc;
GRANT SELECT ON TABLE proceso TO sibica;


--
-- TOC entry 5446 (class 0 OID 0)
-- Dependencies: 303
-- Name: proceso_matricula; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE proceso_matricula FROM PUBLIC;
REVOKE ALL ON TABLE proceso_matricula FROM sistemas;
GRANT ALL ON TABLE proceso_matricula TO sistemas;
GRANT SELECT ON TABLE proceso_matricula TO idesc;
GRANT SELECT ON TABLE proceso_matricula TO sibica;


--
-- TOC entry 5447 (class 0 OID 0)
-- Dependencies: 331
-- Name: proyecto; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE proyecto FROM PUBLIC;
REVOKE ALL ON TABLE proyecto FROM sistemas;
GRANT ALL ON TABLE proyecto TO sistemas;
GRANT SELECT ON TABLE proyecto TO sibica;


--
-- TOC entry 5448 (class 0 OID 0)
-- Dependencies: 304
-- Name: secuencia_id_reporte; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE secuencia_id_reporte FROM PUBLIC;
REVOKE ALL ON SEQUENCE secuencia_id_reporte FROM sistemas;
GRANT ALL ON SEQUENCE secuencia_id_reporte TO sistemas;
GRANT ALL ON SEQUENCE secuencia_id_reporte TO sibik;


--
-- TOC entry 5462 (class 0 OID 0)
-- Dependencies: 305
-- Name: reporte_predio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE reporte_predio FROM PUBLIC;
REVOKE ALL ON TABLE reporte_predio FROM sistemas;
GRANT ALL ON TABLE reporte_predio TO sistemas;
GRANT ALL ON TABLE reporte_predio TO sibik;
GRANT SELECT ON TABLE reporte_predio TO sibica;


--
-- TOC entry 5471 (class 0 OID 0)
-- Dependencies: 306
-- Name: restitucion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE restitucion FROM PUBLIC;
REVOKE ALL ON TABLE restitucion FROM sistemas;
GRANT ALL ON TABLE restitucion TO sistemas;
GRANT SELECT ON TABLE restitucion TO idesc;
GRANT SELECT ON TABLE restitucion TO topografia;


--
-- TOC entry 5478 (class 0 OID 0)
-- Dependencies: 307
-- Name: rol; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE rol FROM PUBLIC;
REVOKE ALL ON TABLE rol FROM sistemas;
GRANT ALL ON TABLE rol TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE rol TO sibica;


--
-- TOC entry 5479 (class 0 OID 0)
-- Dependencies: 375
-- Name: rol_id_rol_pk_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE rol_id_rol_pk_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rol_id_rol_pk_seq FROM sistemas;
GRANT ALL ON SEQUENCE rol_id_rol_pk_seq TO sistemas;
GRANT ALL ON SEQUENCE rol_id_rol_pk_seq TO sibica;


--
-- TOC entry 5485 (class 0 OID 0)
-- Dependencies: 391
-- Name: seguimiento_tarea; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE seguimiento_tarea FROM PUBLIC;
REVOKE ALL ON TABLE seguimiento_tarea FROM sistemas;
GRANT ALL ON TABLE seguimiento_tarea TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE seguimiento_tarea TO sibica;


--
-- TOC entry 5490 (class 0 OID 0)
-- Dependencies: 392
-- Name: seguimiento_tarea_file; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE seguimiento_tarea_file FROM PUBLIC;
REVOKE ALL ON TABLE seguimiento_tarea_file FROM sistemas;
GRANT ALL ON TABLE seguimiento_tarea_file TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE seguimiento_tarea_file TO sibica;


--
-- TOC entry 5491 (class 0 OID 0)
-- Dependencies: 397
-- Name: seguimiento_tarea_file_id_stf_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE seguimiento_tarea_file_id_stf_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seguimiento_tarea_file_id_stf_seq FROM sistemas;
GRANT ALL ON SEQUENCE seguimiento_tarea_file_id_stf_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE seguimiento_tarea_file_id_stf_seq TO sibica;


--
-- TOC entry 5492 (class 0 OID 0)
-- Dependencies: 396
-- Name: seguimiento_tarea_id_seguimiento_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE seguimiento_tarea_id_seguimiento_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seguimiento_tarea_id_seguimiento_seq FROM sistemas;
GRANT ALL ON SEQUENCE seguimiento_tarea_id_seguimiento_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE seguimiento_tarea_id_seguimiento_seq TO sibica;


--
-- TOC entry 5494 (class 0 OID 0)
-- Dependencies: 351
-- Name: sepou; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE sepou FROM PUBLIC;
REVOKE ALL ON TABLE sepou FROM sistemas;
GRANT ALL ON TABLE sepou TO sistemas;
GRANT ALL ON TABLE sepou TO sepou;


--
-- TOC entry 5501 (class 0 OID 0)
-- Dependencies: 308
-- Name: servicio_publico; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE servicio_publico FROM PUBLIC;
REVOKE ALL ON TABLE servicio_publico FROM sistemas;
GRANT ALL ON TABLE servicio_publico TO sistemas;
GRANT SELECT ON TABLE servicio_publico TO sibica;


--
-- TOC entry 5502 (class 0 OID 0)
-- Dependencies: 224
-- Name: spatial_ref_sys; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE spatial_ref_sys FROM PUBLIC;
REVOKE ALL ON TABLE spatial_ref_sys FROM postgres;
GRANT ALL ON TABLE spatial_ref_sys TO postgres;
GRANT ALL ON TABLE spatial_ref_sys TO topografia;
GRANT ALL ON TABLE spatial_ref_sys TO PUBLIC;
GRANT SELECT ON TABLE spatial_ref_sys TO sibica;


--
-- TOC entry 5507 (class 0 OID 0)
-- Dependencies: 309
-- Name: subservicio; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE subservicio FROM PUBLIC;
REVOKE ALL ON TABLE subservicio FROM postgres;
GRANT ALL ON TABLE subservicio TO postgres;
GRANT SELECT ON TABLE subservicio TO idesc;
GRANT SELECT ON TABLE subservicio TO topografia;
GRANT SELECT ON TABLE subservicio TO sibica;


--
-- TOC entry 5512 (class 0 OID 0)
-- Dependencies: 369
-- Name: tabla; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tabla FROM PUBLIC;
REVOKE ALL ON TABLE tabla FROM sistemas;
GRANT ALL ON TABLE tabla TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE tabla TO sibica;


--
-- TOC entry 5524 (class 0 OID 0)
-- Dependencies: 388
-- Name: tarea_panorama; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tarea_panorama FROM PUBLIC;
REVOKE ALL ON TABLE tarea_panorama FROM sistemas;
GRANT ALL ON TABLE tarea_panorama TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE tarea_panorama TO sibica;


--
-- TOC entry 5586 (class 0 OID 0)
-- Dependencies: 361
-- Name: terreno; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE terreno FROM PUBLIC;
REVOKE ALL ON TABLE terreno FROM sistemas;
GRANT ALL ON TABLE terreno TO sistemas;
GRANT SELECT ON TABLE terreno TO sibica;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE terreno TO topografia;


--
-- TOC entry 5592 (class 0 OID 0)
-- Dependencies: 310
-- Name: tipo_amoblamiento; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_amoblamiento FROM PUBLIC;
REVOKE ALL ON TABLE tipo_amoblamiento FROM sistemas;
GRANT ALL ON TABLE tipo_amoblamiento TO sistemas;
GRANT SELECT ON TABLE tipo_amoblamiento TO idesc;
GRANT ALL ON TABLE tipo_amoblamiento TO topografia;
GRANT SELECT,INSERT,UPDATE ON TABLE tipo_amoblamiento TO sibica;


--
-- TOC entry 5593 (class 0 OID 0)
-- Dependencies: 398
-- Name: tipo_amoblamiento_id_ta_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE tipo_amoblamiento_id_ta_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tipo_amoblamiento_id_ta_seq FROM sistemas;
GRANT ALL ON SEQUENCE tipo_amoblamiento_id_ta_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE tipo_amoblamiento_id_ta_seq TO sibica;


--
-- TOC entry 5598 (class 0 OID 0)
-- Dependencies: 389
-- Name: tipo_reporte; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_reporte FROM PUBLIC;
REVOKE ALL ON TABLE tipo_reporte FROM sistemas;
GRANT ALL ON TABLE tipo_reporte TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE tipo_reporte TO sibica;


--
-- TOC entry 5599 (class 0 OID 0)
-- Dependencies: 399
-- Name: tipo_reporte_id_tr_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE tipo_reporte_id_tr_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tipo_reporte_id_tr_seq FROM sistemas;
GRANT ALL ON SEQUENCE tipo_reporte_id_tr_seq TO sistemas;
GRANT USAGE,UPDATE ON SEQUENCE tipo_reporte_id_tr_seq TO sibica;


--
-- TOC entry 5603 (class 0 OID 0)
-- Dependencies: 311
-- Name: tipo_servicio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE tipo_servicio FROM PUBLIC;
REVOKE ALL ON TABLE tipo_servicio FROM sistemas;
GRANT ALL ON TABLE tipo_servicio TO sistemas;
GRANT SELECT ON TABLE tipo_servicio TO idesc;
GRANT SELECT ON TABLE tipo_servicio TO topografia;
GRANT SELECT ON TABLE tipo_servicio TO sibica;


--
-- TOC entry 5618 (class 0 OID 0)
-- Dependencies: 368
-- Name: user; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE "user" FROM PUBLIC;
REVOKE ALL ON TABLE "user" FROM sistemas;
GRANT ALL ON TABLE "user" TO sistemas;
GRANT SELECT,INSERT,UPDATE ON TABLE "user" TO sibica;


--
-- TOC entry 5619 (class 0 OID 0)
-- Dependencies: 374
-- Name: user_id_user_pk_seq; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON SEQUENCE user_id_user_pk_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_id_user_pk_seq FROM sistemas;
GRANT ALL ON SEQUENCE user_id_user_pk_seq TO sistemas;
GRANT SELECT,UPDATE ON SEQUENCE user_id_user_pk_seq TO sibica;


--
-- TOC entry 5620 (class 0 OID 0)
-- Dependencies: 312
-- Name: vw_app_externo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_app_externo FROM PUBLIC;
REVOKE ALL ON TABLE vw_app_externo FROM sistemas;
GRANT ALL ON TABLE vw_app_externo TO sistemas;
GRANT SELECT ON TABLE vw_app_externo TO sibik;
GRANT SELECT,INSERT,UPDATE ON TABLE vw_app_externo TO sibica;


--
-- TOC entry 5621 (class 0 OID 0)
-- Dependencies: 313
-- Name: vw_app_geo_amoblamientos; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_app_geo_amoblamientos FROM PUBLIC;
REVOKE ALL ON TABLE vw_app_geo_amoblamientos FROM sistemas;
GRANT ALL ON TABLE vw_app_geo_amoblamientos TO sistemas;
GRANT SELECT ON TABLE vw_app_geo_amoblamientos TO sibik;
GRANT SELECT,INSERT,UPDATE ON TABLE vw_app_geo_amoblamientos TO sibica;


--
-- TOC entry 5623 (class 0 OID 0)
-- Dependencies: 314
-- Name: vw_app_geo_constr; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_app_geo_constr FROM PUBLIC;
REVOKE ALL ON TABLE vw_app_geo_constr FROM sistemas;
GRANT ALL ON TABLE vw_app_geo_constr TO sistemas;
GRANT SELECT ON TABLE vw_app_geo_constr TO sibik;
GRANT SELECT,INSERT,UPDATE ON TABLE vw_app_geo_constr TO sibica;


--
-- TOC entry 5624 (class 0 OID 0)
-- Dependencies: 363
-- Name: vw_app_interno; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_app_interno FROM PUBLIC;
REVOKE ALL ON TABLE vw_app_interno FROM sistemas;
GRANT ALL ON TABLE vw_app_interno TO sistemas;
GRANT SELECT ON TABLE vw_app_interno TO sibik;
GRANT SELECT,INSERT,UPDATE ON TABLE vw_app_interno TO sibica;


--
-- TOC entry 5625 (class 0 OID 0)
-- Dependencies: 350
-- Name: vw_cali_distrito; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_cali_distrito FROM PUBLIC;
REVOKE ALL ON TABLE vw_cali_distrito FROM sistemas;
GRANT ALL ON TABLE vw_cali_distrito TO sistemas;
GRANT SELECT ON TABLE vw_cali_distrito TO gobierno;


--
-- TOC entry 5626 (class 0 OID 0)
-- Dependencies: 353
-- Name: vw_calis; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_calis FROM PUBLIC;
REVOKE ALL ON TABLE vw_calis FROM sistemas;
GRANT ALL ON TABLE vw_calis TO sistemas;
GRANT ALL ON TABLE vw_calis TO topografia;


--
-- TOC entry 5627 (class 0 OID 0)
-- Dependencies: 315
-- Name: vw_cargue_masivo_sap; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_cargue_masivo_sap FROM PUBLIC;
REVOKE ALL ON TABLE vw_cargue_masivo_sap FROM sistemas;
GRANT ALL ON TABLE vw_cargue_masivo_sap TO sistemas;
GRANT ALL ON TABLE vw_cargue_masivo_sap TO topografia;


--
-- TOC entry 5628 (class 0 OID 0)
-- Dependencies: 349
-- Name: vw_catastro_terreno; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_catastro_terreno FROM PUBLIC;
REVOKE ALL ON TABLE vw_catastro_terreno FROM sistemas;
GRANT ALL ON TABLE vw_catastro_terreno TO sistemas;
GRANT SELECT ON TABLE vw_catastro_terreno TO topografia;
GRANT SELECT ON TABLE vw_catastro_terreno TO catastro;


--
-- TOC entry 5630 (class 0 OID 0)
-- Dependencies: 316
-- Name: vw_dapm_pot; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_dapm_pot FROM PUBLIC;
REVOKE ALL ON TABLE vw_dapm_pot FROM sistemas;
GRANT ALL ON TABLE vw_dapm_pot TO sistemas;
GRANT ALL ON TABLE vw_dapm_pot TO dapm_pot;


--
-- TOC entry 5631 (class 0 OID 0)
-- Dependencies: 317
-- Name: vw_dapm_pot2; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_dapm_pot2 FROM PUBLIC;
REVOKE ALL ON TABLE vw_dapm_pot2 FROM sistemas;
GRANT ALL ON TABLE vw_dapm_pot2 TO sistemas;
GRANT ALL ON TABLE vw_dapm_pot2 TO dapm_pot;


--
-- TOC entry 5632 (class 0 OID 0)
-- Dependencies: 337
-- Name: vw_epg_abuelo_padre_hijo; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_epg_abuelo_padre_hijo FROM PUBLIC;
REVOKE ALL ON TABLE vw_epg_abuelo_padre_hijo FROM sistemas;
GRANT ALL ON TABLE vw_epg_abuelo_padre_hijo TO sistemas;
GRANT ALL ON TABLE vw_epg_abuelo_padre_hijo TO topografia;


--
-- TOC entry 5633 (class 0 OID 0)
-- Dependencies: 318
-- Name: vw_epg_ubicacion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_epg_ubicacion FROM PUBLIC;
REVOKE ALL ON TABLE vw_epg_ubicacion FROM sistemas;
GRANT ALL ON TABLE vw_epg_ubicacion TO sistemas;
GRANT ALL ON TABLE vw_epg_ubicacion TO topografia;
GRANT SELECT ON TABLE vw_epg_ubicacion TO idesc;


--
-- TOC entry 5634 (class 0 OID 0)
-- Dependencies: 319
-- Name: vw_geo_construccion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_geo_construccion FROM PUBLIC;
REVOKE ALL ON TABLE vw_geo_construccion FROM sistemas;
GRANT ALL ON TABLE vw_geo_construccion TO sistemas;
GRANT ALL ON TABLE vw_geo_construccion TO dapm;


--
-- TOC entry 5635 (class 0 OID 0)
-- Dependencies: 320
-- Name: vw_geo_predio_externo_mc; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE vw_geo_predio_externo_mc FROM PUBLIC;
REVOKE ALL ON TABLE vw_geo_predio_externo_mc FROM postgres;
GRANT ALL ON TABLE vw_geo_predio_externo_mc TO postgres;
GRANT SELECT ON TABLE vw_geo_predio_externo_mc TO idesc;


--
-- TOC entry 5636 (class 0 OID 0)
-- Dependencies: 348
-- Name: vw_geo_predio_interno_mc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_geo_predio_interno_mc FROM PUBLIC;
REVOKE ALL ON TABLE vw_geo_predio_interno_mc FROM sistemas;
GRANT ALL ON TABLE vw_geo_predio_interno_mc TO sistemas;
GRANT SELECT ON TABLE vw_geo_predio_interno_mc TO idesc;
GRANT ALL ON TABLE vw_geo_predio_interno_mc TO topografia;
GRANT SELECT ON TABLE vw_geo_predio_interno_mc TO contador_sap;


--
-- TOC entry 5637 (class 0 OID 0)
-- Dependencies: 336
-- Name: vw_ok_construcciones; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_ok_construcciones FROM PUBLIC;
REVOKE ALL ON TABLE vw_ok_construcciones FROM sistemas;
GRANT ALL ON TABLE vw_ok_construcciones TO sistemas;
GRANT SELECT ON TABLE vw_ok_construcciones TO topografia;
GRANT SELECT ON TABLE vw_ok_construcciones TO archivo;


--
-- TOC entry 5638 (class 0 OID 0)
-- Dependencies: 346
-- Name: vw_ok_subidos; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_ok_subidos FROM PUBLIC;
REVOKE ALL ON TABLE vw_ok_subidos FROM sistemas;
GRANT ALL ON TABLE vw_ok_subidos TO sistemas;
GRANT SELECT ON TABLE vw_ok_subidos TO topografia;
GRANT SELECT ON TABLE vw_ok_subidos TO archivo;


--
-- TOC entry 5639 (class 0 OID 0)
-- Dependencies: 400
-- Name: vw_predio; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_predio FROM PUBLIC;
REVOKE ALL ON TABLE vw_predio FROM sistemas;
GRANT ALL ON TABLE vw_predio TO sistemas;
GRANT ALL ON TABLE vw_predio TO topografia;


--
-- TOC entry 5640 (class 0 OID 0)
-- Dependencies: 321
-- Name: vw_prueba_idesc; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_prueba_idesc FROM PUBLIC;
REVOKE ALL ON TABLE vw_prueba_idesc FROM sistemas;
GRANT ALL ON TABLE vw_prueba_idesc TO sistemas;
GRANT SELECT ON TABLE vw_prueba_idesc TO idesc;
GRANT SELECT ON TABLE vw_prueba_idesc TO gobierno;


--
-- TOC entry 5642 (class 0 OID 0)
-- Dependencies: 380
-- Name: vw_saneamiento; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_saneamiento FROM PUBLIC;
REVOKE ALL ON TABLE vw_saneamiento FROM sistemas;
GRANT ALL ON TABLE vw_saneamiento TO sistemas;
GRANT SELECT ON TABLE vw_saneamiento TO remu;
GRANT SELECT ON TABLE vw_saneamiento TO sibica;


--
-- TOC entry 5643 (class 0 OID 0)
-- Dependencies: 333
-- Name: vw_sap; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_sap FROM PUBLIC;
REVOKE ALL ON TABLE vw_sap FROM sistemas;
GRANT ALL ON TABLE vw_sap TO sistemas;
GRANT ALL ON TABLE vw_sap TO postgres;
GRANT SELECT ON TABLE vw_sap TO contador_sap;


--
-- TOC entry 5644 (class 0 OID 0)
-- Dependencies: 323
-- Name: vw_siga_inmueble; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_siga_inmueble FROM PUBLIC;
REVOKE ALL ON TABLE vw_siga_inmueble FROM sistemas;
GRANT ALL ON TABLE vw_siga_inmueble TO sistemas;
GRANT ALL ON TABLE vw_siga_inmueble TO topografia;


--
-- TOC entry 5645 (class 0 OID 0)
-- Dependencies: 324
-- Name: vw_siga_matricula; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_siga_matricula FROM PUBLIC;
REVOKE ALL ON TABLE vw_siga_matricula FROM sistemas;
GRANT ALL ON TABLE vw_siga_matricula TO sistemas;
GRANT ALL ON TABLE vw_siga_matricula TO topografia;


--
-- TOC entry 5646 (class 0 OID 0)
-- Dependencies: 326
-- Name: vw_siga_ocupacion; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_siga_ocupacion FROM PUBLIC;
REVOKE ALL ON TABLE vw_siga_ocupacion FROM sistemas;
GRANT ALL ON TABLE vw_siga_ocupacion TO sistemas;
GRANT ALL ON TABLE vw_siga_ocupacion TO topografia;


--
-- TOC entry 5647 (class 0 OID 0)
-- Dependencies: 338
-- Name: vw_siga_varios; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE vw_siga_varios FROM PUBLIC;
REVOKE ALL ON TABLE vw_siga_varios FROM sistemas;
GRANT ALL ON TABLE vw_siga_varios TO sistemas;
GRANT SELECT ON TABLE vw_siga_varios TO sibica;


--
-- TOC entry 5649 (class 0 OID 0)
-- Dependencies: 327
-- Name: zonasverdes; Type: ACL; Schema: public; Owner: sistemas
--

REVOKE ALL ON TABLE zonasverdes FROM PUBLIC;
REVOKE ALL ON TABLE zonasverdes FROM sistemas;
GRANT ALL ON TABLE zonasverdes TO sistemas;
GRANT ALL ON TABLE zonasverdes TO topografia;
GRANT SELECT ON TABLE zonasverdes TO idesc;


-- Completed on 2019-11-20 11:39:32

--
-- PostgreSQL database dump complete
--

